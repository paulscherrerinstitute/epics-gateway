//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace GWLogger.Inventory {
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(Namespace="http://inventory.psi.ch/DataAccess.asmx", ConfigurationName="Inventory.DataAccessSoap")]
    public interface DataAccessSoap {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://inventory.psi.ch/DataAccess.asmx/DeleteDocument", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        void DeleteDocument(string tokenId, string link);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://inventory.psi.ch/DataAccess.asmx/DeleteDocument", ReplyAction="*")]
        System.Threading.Tasks.Task DeleteDocumentAsync(string tokenId, string link);
        
        // CODEGEN: Parameter 'fileContent' requires additional schema information that cannot be captured using the parameter mode. The specific attribute is 'System.Xml.Serialization.XmlElementAttribute'.
        [System.ServiceModel.OperationContractAttribute(Action="http://inventory.psi.ch/DataAccess.asmx/UploadPartDocument", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        GWLogger.Inventory.UploadPartDocumentResponse UploadPartDocument(GWLogger.Inventory.UploadPartDocumentRequest request);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://inventory.psi.ch/DataAccess.asmx/UploadPartDocument", ReplyAction="*")]
        System.Threading.Tasks.Task<GWLogger.Inventory.UploadPartDocumentResponse> UploadPartDocumentAsync(GWLogger.Inventory.UploadPartDocumentRequest request);
        
        // CODEGEN: Parameter 'fileContent' requires additional schema information that cannot be captured using the parameter mode. The specific attribute is 'System.Xml.Serialization.XmlElementAttribute'.
        [System.ServiceModel.OperationContractAttribute(Action="http://inventory.psi.ch/DataAccess.asmx/UploadPartTypeDocument", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        GWLogger.Inventory.UploadPartTypeDocumentResponse UploadPartTypeDocument(GWLogger.Inventory.UploadPartTypeDocumentRequest request);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://inventory.psi.ch/DataAccess.asmx/UploadPartTypeDocument", ReplyAction="*")]
        System.Threading.Tasks.Task<GWLogger.Inventory.UploadPartTypeDocumentResponse> UploadPartTypeDocumentAsync(GWLogger.Inventory.UploadPartTypeDocumentRequest request);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://inventory.psi.ch/DataAccess.asmx/GetPartDiagramMap", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        string GetPartDiagramMap(string psiLabel);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://inventory.psi.ch/DataAccess.asmx/GetPartDiagramMap", ReplyAction="*")]
        System.Threading.Tasks.Task<string> GetPartDiagramMapAsync(string psiLabel);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://inventory.psi.ch/DataAccess.asmx/UpdateAttributes", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        void UpdateAttributes(string tokenId, string psiLabel, GWLogger.Inventory.AttributeField[] fields);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://inventory.psi.ch/DataAccess.asmx/UpdateAttributes", ReplyAction="*")]
        System.Threading.Tasks.Task UpdateAttributesAsync(string tokenId, string psiLabel, GWLogger.Inventory.AttributeField[] fields);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://inventory.psi.ch/DataAccess.asmx/PlugPart", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        void PlugPart(string tokenId, string parentLabel, string connName, string childLabel);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://inventory.psi.ch/DataAccess.asmx/PlugPart", ReplyAction="*")]
        System.Threading.Tasks.Task PlugPartAsync(string tokenId, string parentLabel, string connName, string childLabel);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://inventory.psi.ch/DataAccess.asmx/PlugInPlace", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        void PlugInPlace(string tokenId, string psiLabel, string newLabel);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://inventory.psi.ch/DataAccess.asmx/PlugInPlace", ReplyAction="*")]
        System.Threading.Tasks.Task PlugInPlaceAsync(string tokenId, string psiLabel, string newLabel);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://inventory.psi.ch/DataAccess.asmx/CanPlace", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        bool CanPlace(string parentLabel, string connName, string childLabel);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://inventory.psi.ch/DataAccess.asmx/CanPlace", ReplyAction="*")]
        System.Threading.Tasks.Task<bool> CanPlaceAsync(string parentLabel, string connName, string childLabel);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://inventory.psi.ch/DataAccess.asmx/PluggedPart", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        string PluggedPart(string parentLabel, string connName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://inventory.psi.ch/DataAccess.asmx/PluggedPart", ReplyAction="*")]
        System.Threading.Tasks.Task<string> PluggedPartAsync(string parentLabel, string connName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://inventory.psi.ch/DataAccess.asmx/GetCompatibleStockItems", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        GWLogger.Inventory.TreeNode[] GetCompatibleStockItems(string parentLabel, string connName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://inventory.psi.ch/DataAccess.asmx/GetCompatibleStockItems", ReplyAction="*")]
        System.Threading.Tasks.Task<GWLogger.Inventory.TreeNode[]> GetCompatibleStockItemsAsync(string parentLabel, string connName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://inventory.psi.ch/DataAccess.asmx/GetCompatibleStockItemsForPart", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        GWLogger.Inventory.TreeNode[] GetCompatibleStockItemsForPart(string currentPart);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://inventory.psi.ch/DataAccess.asmx/GetCompatibleStockItemsForPart", ReplyAction="*")]
        System.Threading.Tasks.Task<GWLogger.Inventory.TreeNode[]> GetCompatibleStockItemsForPartAsync(string currentPart);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://inventory.psi.ch/DataAccess.asmx/GetCompatibleItems", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        GWLogger.Inventory.TreeNode[] GetCompatibleItems(string parentLabel, string connName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://inventory.psi.ch/DataAccess.asmx/GetCompatibleItems", ReplyAction="*")]
        System.Threading.Tasks.Task<GWLogger.Inventory.TreeNode[]> GetCompatibleItemsAsync(string parentLabel, string connName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://inventory.psi.ch/DataAccess.asmx/GetCompatibleItemsForPart", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        GWLogger.Inventory.TreeNode[] GetCompatibleItemsForPart(string currentPart);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://inventory.psi.ch/DataAccess.asmx/GetCompatibleItemsForPart", ReplyAction="*")]
        System.Threading.Tasks.Task<GWLogger.Inventory.TreeNode[]> GetCompatibleItemsForPartAsync(string currentPart);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://inventory.psi.ch/DataAccess.asmx/GetCompatibleExchangeItems", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        GWLogger.Inventory.TreeNode[] GetCompatibleExchangeItems(string parentLabel, string connName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://inventory.psi.ch/DataAccess.asmx/GetCompatibleExchangeItems", ReplyAction="*")]
        System.Threading.Tasks.Task<GWLogger.Inventory.TreeNode[]> GetCompatibleExchangeItemsAsync(string parentLabel, string connName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://inventory.psi.ch/DataAccess.asmx/GetCompatibleExchangeItemsForPart", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        GWLogger.Inventory.TreeNode[] GetCompatibleExchangeItemsForPart(string currentPart);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://inventory.psi.ch/DataAccess.asmx/GetCompatibleExchangeItemsForPart", ReplyAction="*")]
        System.Threading.Tasks.Task<GWLogger.Inventory.TreeNode[]> GetCompatibleExchangeItemsForPartAsync(string currentPart);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://inventory.psi.ch/DataAccess.asmx/ReturnPartToStock", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        string ReturnPartToStock(string tokenId, string psiLabel, int location);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://inventory.psi.ch/DataAccess.asmx/ReturnPartToStock", ReplyAction="*")]
        System.Threading.Tasks.Task<string> ReturnPartToStockAsync(string tokenId, string psiLabel, int location);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://inventory.psi.ch/DataAccess.asmx/ExchangePart", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        void ExchangePart(string tokenId, string psiLabel, string newPart, int returnLocation, int hwStatus, string usageType);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://inventory.psi.ch/DataAccess.asmx/ExchangePart", ReplyAction="*")]
        System.Threading.Tasks.Task ExchangePartAsync(string tokenId, string psiLabel, string newPart, int returnLocation, int hwStatus, string usageType);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://inventory.psi.ch/DataAccess.asmx/CutConnection", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        void CutConnection(string tokenId, string psiLabel, string connName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://inventory.psi.ch/DataAccess.asmx/CutConnection", ReplyAction="*")]
        System.Threading.Tasks.Task CutConnectionAsync(string tokenId, string psiLabel, string connName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://inventory.psi.ch/DataAccess.asmx/GetStockWatch", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        GWLogger.Inventory.SearchResult GetStockWatch();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://inventory.psi.ch/DataAccess.asmx/GetStockWatch", ReplyAction="*")]
        System.Threading.Tasks.Task<GWLogger.Inventory.SearchResult> GetStockWatchAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://inventory.psi.ch/DataAccess.asmx/GetRack", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        GWLogger.Inventory.Rack GetRack(int locationId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://inventory.psi.ch/DataAccess.asmx/GetRack", ReplyAction="*")]
        System.Threading.Tasks.Task<GWLogger.Inventory.Rack> GetRackAsync(int locationId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://inventory.psi.ch/DataAccess.asmx/SetRackPosition", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        void SetRackPosition(string tokenId, string label, string location, int position);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://inventory.psi.ch/DataAccess.asmx/SetRackPosition", ReplyAction="*")]
        System.Threading.Tasks.Task SetRackPositionAsync(string tokenId, string label, string location, int position);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://inventory.psi.ch/DataAccess.asmx/ParentNotSameLocation", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        GWLogger.Inventory.SearchResult ParentNotSameLocation();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://inventory.psi.ch/DataAccess.asmx/ParentNotSameLocation", ReplyAction="*")]
        System.Threading.Tasks.Task<GWLogger.Inventory.SearchResult> ParentNotSameLocationAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://inventory.psi.ch/DataAccess.asmx/GetRequestPsp", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        string GetRequestPsp(string psiLabel);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://inventory.psi.ch/DataAccess.asmx/GetRequestPsp", ReplyAction="*")]
        System.Threading.Tasks.Task<string> GetRequestPspAsync(string psiLabel);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://inventory.psi.ch/DataAccess.asmx/CheckRequest", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        string CheckRequest(string psiLabel);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://inventory.psi.ch/DataAccess.asmx/CheckRequest", ReplyAction="*")]
        System.Threading.Tasks.Task<string> CheckRequestAsync(string psiLabel);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://inventory.psi.ch/DataAccess.asmx/GetRequest", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        GWLogger.Inventory.RequestInformation GetRequest(string psiLabel);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://inventory.psi.ch/DataAccess.asmx/GetRequest", ReplyAction="*")]
        System.Threading.Tasks.Task<GWLogger.Inventory.RequestInformation> GetRequestAsync(string psiLabel);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://inventory.psi.ch/DataAccess.asmx/RequestedPartTypeName", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        string RequestedPartTypeName(string psiLabel);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://inventory.psi.ch/DataAccess.asmx/RequestedPartTypeName", ReplyAction="*")]
        System.Threading.Tasks.Task<string> RequestedPartTypeNameAsync(string psiLabel);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://inventory.psi.ch/DataAccess.asmx/RequestedPartType", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        int RequestedPartType(string psiLabel);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://inventory.psi.ch/DataAccess.asmx/RequestedPartType", ReplyAction="*")]
        System.Threading.Tasks.Task<int> RequestedPartTypeAsync(string psiLabel);
        
        // CODEGEN: Parameter 'fromDate' requires additional schema information that cannot be captured using the parameter mode. The specific attribute is 'System.Xml.Serialization.XmlElementAttribute'.
        [System.ServiceModel.OperationContractAttribute(Action="http://inventory.psi.ch/DataAccess.asmx/GetHandledRequests", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        GWLogger.Inventory.GetHandledRequestsResponse GetHandledRequests(GWLogger.Inventory.GetHandledRequestsRequest request);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://inventory.psi.ch/DataAccess.asmx/GetHandledRequests", ReplyAction="*")]
        System.Threading.Tasks.Task<GWLogger.Inventory.GetHandledRequestsResponse> GetHandledRequestsAsync(GWLogger.Inventory.GetHandledRequestsRequest request);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://inventory.psi.ch/DataAccess.asmx/AddRequestForSlot", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        string AddRequestForSlot(string tokenId, string psiLabel, string connName, int partType, int location, string deadline, string pspNumber, string comment);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://inventory.psi.ch/DataAccess.asmx/AddRequestForSlot", ReplyAction="*")]
        System.Threading.Tasks.Task<string> AddRequestForSlotAsync(string tokenId, string psiLabel, string connName, int partType, int location, string deadline, string pspNumber, string comment);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://inventory.psi.ch/DataAccess.asmx/AddRequest", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        string[] AddRequest(string tokenId, int amount, int partType, int location, string deadline, string pspNumber, string comment);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://inventory.psi.ch/DataAccess.asmx/AddRequest", ReplyAction="*")]
        System.Threading.Tasks.Task<string[]> AddRequestAsync(string tokenId, int amount, int partType, int location, string deadline, string pspNumber, string comment);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://inventory.psi.ch/DataAccess.asmx/ChangeRequestPSP", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        void ChangeRequestPSP(string tokenId, string psiLabel, string pspNumber);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://inventory.psi.ch/DataAccess.asmx/ChangeRequestPSP", ReplyAction="*")]
        System.Threading.Tasks.Task ChangeRequestPSPAsync(string tokenId, string psiLabel, string pspNumber);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://inventory.psi.ch/DataAccess.asmx/CancelRequestOnPart", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        void CancelRequestOnPart(string tokenId, string psiLabel);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://inventory.psi.ch/DataAccess.asmx/CancelRequestOnPart", ReplyAction="*")]
        System.Threading.Tasks.Task CancelRequestOnPartAsync(string tokenId, string psiLabel);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://inventory.psi.ch/DataAccess.asmx/AddRequestToRemove", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        int AddRequestToRemove(string tokenId, string psiLabel, string comment, string dealine);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://inventory.psi.ch/DataAccess.asmx/AddRequestToRemove", ReplyAction="*")]
        System.Threading.Tasks.Task<int> AddRequestToRemoveAsync(string tokenId, string psiLabel, string comment, string dealine);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://inventory.psi.ch/DataAccess.asmx/AddRequestToExchange", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        int AddRequestToExchange(string tokenId, string psiLabel, int newPartType, string comment, string dealine, string pspNumber);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://inventory.psi.ch/DataAccess.asmx/AddRequestToExchange", ReplyAction="*")]
        System.Threading.Tasks.Task<int> AddRequestToExchangeAsync(string tokenId, string psiLabel, int newPartType, string comment, string dealine, string pspNumber);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://inventory.psi.ch/DataAccess.asmx/RequestOwnerOnPart", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        int RequestOwnerOnPart(string psiLabel);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://inventory.psi.ch/DataAccess.asmx/RequestOwnerOnPart", ReplyAction="*")]
        System.Threading.Tasks.Task<int> RequestOwnerOnPartAsync(string psiLabel);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://inventory.psi.ch/DataAccess.asmx/RequestedPartTypes", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        GWLogger.Inventory.RequestedPartTypeInformation[] RequestedPartTypes(string tokenId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://inventory.psi.ch/DataAccess.asmx/RequestedPartTypes", ReplyAction="*")]
        System.Threading.Tasks.Task<GWLogger.Inventory.RequestedPartTypeInformation[]> RequestedPartTypesAsync(string tokenId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://inventory.psi.ch/DataAccess.asmx/OpenRequests", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        GWLogger.Inventory.RequestInformation[] OpenRequests(string tokenId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://inventory.psi.ch/DataAccess.asmx/OpenRequests", ReplyAction="*")]
        System.Threading.Tasks.Task<GWLogger.Inventory.RequestInformation[]> OpenRequestsAsync(string tokenId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://inventory.psi.ch/DataAccess.asmx/OpenPersonalRequests", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        GWLogger.Inventory.RequestInformation[] OpenPersonalRequests(string tokenId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://inventory.psi.ch/DataAccess.asmx/OpenPersonalRequests", ReplyAction="*")]
        System.Threading.Tasks.Task<GWLogger.Inventory.RequestInformation[]> OpenPersonalRequestsAsync(string tokenId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://inventory.psi.ch/DataAccess.asmx/FindObjects", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        GWLogger.Inventory.SearchResult FindObjects(GWLogger.Inventory.SearchDefinition search);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://inventory.psi.ch/DataAccess.asmx/FindObjects", ReplyAction="*")]
        System.Threading.Tasks.Task<GWLogger.Inventory.SearchResult> FindObjectsAsync(GWLogger.Inventory.SearchDefinition search);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://inventory.psi.ch/DataAccess.asmx/GetAllAttributes", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        string[] GetAllAttributes();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://inventory.psi.ch/DataAccess.asmx/GetAllAttributes", ReplyAction="*")]
        System.Threading.Tasks.Task<string[]> GetAllAttributesAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://inventory.psi.ch/DataAccess.asmx/GetAllDataFields", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        GWLogger.Inventory.DataFieldSpec[] GetAllDataFields();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://inventory.psi.ch/DataAccess.asmx/GetAllDataFields", ReplyAction="*")]
        System.Threading.Tasks.Task<GWLogger.Inventory.DataFieldSpec[]> GetAllDataFieldsAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://inventory.psi.ch/DataAccess.asmx/GetStoredSearches", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        GWLogger.Inventory.IdValuePair[] GetStoredSearches(string tokenId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://inventory.psi.ch/DataAccess.asmx/GetStoredSearches", ReplyAction="*")]
        System.Threading.Tasks.Task<GWLogger.Inventory.IdValuePair[]> GetStoredSearchesAsync(string tokenId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://inventory.psi.ch/DataAccess.asmx/GetStoredSearche", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        GWLogger.Inventory.StoredSearch GetStoredSearche(int searchId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://inventory.psi.ch/DataAccess.asmx/GetStoredSearche", ReplyAction="*")]
        System.Threading.Tasks.Task<GWLogger.Inventory.StoredSearch> GetStoredSearcheAsync(int searchId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://inventory.psi.ch/DataAccess.asmx/AddStoredSearch", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        void AddStoredSearch(string tokenId, string name, string attributes, string rule);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://inventory.psi.ch/DataAccess.asmx/AddStoredSearch", ReplyAction="*")]
        System.Threading.Tasks.Task AddStoredSearchAsync(string tokenId, string name, string attributes, string rule);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://inventory.psi.ch/DataAccess.asmx/DeleteStoredSearch", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        void DeleteStoredSearch(string tokenId, int searchId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://inventory.psi.ch/DataAccess.asmx/DeleteStoredSearch", ReplyAction="*")]
        System.Threading.Tasks.Task DeleteStoredSearchAsync(string tokenId, int searchId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://inventory.psi.ch/DataAccess.asmx/CleanSearchCache", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        void CleanSearchCache();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://inventory.psi.ch/DataAccess.asmx/CleanSearchCache", ReplyAction="*")]
        System.Threading.Tasks.Task CleanSearchCacheAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://inventory.psi.ch/DataAccess.asmx/GetStatTypes", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        GWLogger.Inventory.IdValuePair[] GetStatTypes();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://inventory.psi.ch/DataAccess.asmx/GetStatTypes", ReplyAction="*")]
        System.Threading.Tasks.Task<GWLogger.Inventory.IdValuePair[]> GetStatTypesAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://inventory.psi.ch/DataAccess.asmx/GetYearStat", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        double[] GetYearStat(int year, int stat);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://inventory.psi.ch/DataAccess.asmx/GetYearStat", ReplyAction="*")]
        System.Threading.Tasks.Task<double[]> GetYearStatAsync(int year, int stat);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://inventory.psi.ch/DataAccess.asmx/GetMonthStat", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        double[] GetMonthStat(int year, int month, int stat);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://inventory.psi.ch/DataAccess.asmx/GetMonthStat", ReplyAction="*")]
        System.Threading.Tasks.Task<double[]> GetMonthStatAsync(int year, int month, int stat);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://inventory.psi.ch/DataAccess.asmx/GetTids", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        GWLogger.Inventory.IdValuePair[] GetTids();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://inventory.psi.ch/DataAccess.asmx/GetTids", ReplyAction="*")]
        System.Threading.Tasks.Task<GWLogger.Inventory.IdValuePair[]> GetTidsAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://inventory.psi.ch/DataAccess.asmx/GetTidManuals", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        GWLogger.Inventory.TidManual[] GetTidManuals(string psiLabel);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://inventory.psi.ch/DataAccess.asmx/GetTidManuals", ReplyAction="*")]
        System.Threading.Tasks.Task<GWLogger.Inventory.TidManual[]> GetTidManualsAsync(string psiLabel);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://inventory.psi.ch/DataAccess.asmx/GetTidHistory", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        GWLogger.Inventory.TidHistory[] GetTidHistory(string psiLabel);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://inventory.psi.ch/DataAccess.asmx/GetTidHistory", ReplyAction="*")]
        System.Threading.Tasks.Task<GWLogger.Inventory.TidHistory[]> GetTidHistoryAsync(string psiLabel);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://inventory.psi.ch/DataAccess.asmx/IsTidPart", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        bool IsTidPart(string psiLabel);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://inventory.psi.ch/DataAccess.asmx/IsTidPart", ReplyAction="*")]
        System.Threading.Tasks.Task<bool> IsTidPartAsync(string psiLabel);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://inventory.psi.ch/DataAccess.asmx/GetBorrowedItems", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        GWLogger.Inventory.TidSearchResult[] GetBorrowedItems(string tokenId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://inventory.psi.ch/DataAccess.asmx/GetBorrowedItems", ReplyAction="*")]
        System.Threading.Tasks.Task<GWLogger.Inventory.TidSearchResult[]> GetBorrowedItemsAsync(string tokenId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://inventory.psi.ch/DataAccess.asmx/DeleteTidManual", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        void DeleteTidManual(string tokenId, int manualId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://inventory.psi.ch/DataAccess.asmx/DeleteTidManual", ReplyAction="*")]
        System.Threading.Tasks.Task DeleteTidManualAsync(string tokenId, int manualId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://inventory.psi.ch/DataAccess.asmx/DuplicateTid", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        void DuplicateTid(string tokenId, string psiLabel, string newPsiLabel);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://inventory.psi.ch/DataAccess.asmx/DuplicateTid", ReplyAction="*")]
        System.Threading.Tasks.Task DuplicateTidAsync(string tokenId, string psiLabel, string newPsiLabel);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://inventory.psi.ch/DataAccess.asmx/TidCanJoin", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        bool TidCanJoin(string tokenId, string psiLabel);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://inventory.psi.ch/DataAccess.asmx/TidCanJoin", ReplyAction="*")]
        System.Threading.Tasks.Task<bool> TidCanJoinAsync(string tokenId, string psiLabel);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://inventory.psi.ch/DataAccess.asmx/TidCanAskToBorrow", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        bool TidCanAskToBorrow(string tokenId, string psiLabel);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://inventory.psi.ch/DataAccess.asmx/TidCanAskToBorrow", ReplyAction="*")]
        System.Threading.Tasks.Task<bool> TidCanAskToBorrowAsync(string tokenId, string psiLabel);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://inventory.psi.ch/DataAccess.asmx/TidCanBorrow", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        bool TidCanBorrow(string tokenId, string psiLabel);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://inventory.psi.ch/DataAccess.asmx/TidCanBorrow", ReplyAction="*")]
        System.Threading.Tasks.Task<bool> TidCanBorrowAsync(string tokenId, string psiLabel);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://inventory.psi.ch/DataAccess.asmx/TidCanReturn", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        bool TidCanReturn(string tokenId, string psiLabel);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://inventory.psi.ch/DataAccess.asmx/TidCanReturn", ReplyAction="*")]
        System.Threading.Tasks.Task<bool> TidCanReturnAsync(string tokenId, string psiLabel);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://inventory.psi.ch/DataAccess.asmx/TidReturnPart", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        void TidReturnPart(string tokenId, string psiLabel);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://inventory.psi.ch/DataAccess.asmx/TidReturnPart", ReplyAction="*")]
        System.Threading.Tasks.Task TidReturnPartAsync(string tokenId, string psiLabel);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://inventory.psi.ch/DataAccess.asmx/TidAskToBorrowPart", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        void TidAskToBorrowPart(string tokenId, string psiLabel, System.DateTime borrowTo);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://inventory.psi.ch/DataAccess.asmx/TidAskToBorrowPart", ReplyAction="*")]
        System.Threading.Tasks.Task TidAskToBorrowPartAsync(string tokenId, string psiLabel, System.DateTime borrowTo);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://inventory.psi.ch/DataAccess.asmx/TidAskToJoin", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        void TidAskToJoin(string tokenId, string psiLabel);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://inventory.psi.ch/DataAccess.asmx/TidAskToJoin", ReplyAction="*")]
        System.Threading.Tasks.Task TidAskToJoinAsync(string tokenId, string psiLabel);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://inventory.psi.ch/DataAccess.asmx/TidBorrowPart", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        void TidBorrowPart(string tokenId, string psiLabel, System.DateTime borrowTo, int borrowUser, string location, string comment);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://inventory.psi.ch/DataAccess.asmx/TidBorrowPart", ReplyAction="*")]
        System.Threading.Tasks.Task TidBorrowPartAsync(string tokenId, string psiLabel, System.DateTime borrowTo, int borrowUser, string location, string comment);
        
        // CODEGEN: Parameter 'tid' requires additional schema information that cannot be captured using the parameter mode. The specific attribute is 'System.Xml.Serialization.XmlElementAttribute'.
        [System.ServiceModel.OperationContractAttribute(Action="http://inventory.psi.ch/DataAccess.asmx/SearchTid", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        GWLogger.Inventory.SearchTidResponse SearchTid(GWLogger.Inventory.SearchTidRequest request);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://inventory.psi.ch/DataAccess.asmx/SearchTid", ReplyAction="*")]
        System.Threading.Tasks.Task<GWLogger.Inventory.SearchTidResponse> SearchTidAsync(GWLogger.Inventory.SearchTidRequest request);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://inventory.psi.ch/DataAccess.asmx/GetTidDeviceClasses", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        GWLogger.Inventory.IdValuePair[] GetTidDeviceClasses();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://inventory.psi.ch/DataAccess.asmx/GetTidDeviceClasses", ReplyAction="*")]
        System.Threading.Tasks.Task<GWLogger.Inventory.IdValuePair[]> GetTidDeviceClassesAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://inventory.psi.ch/DataAccess.asmx/GetManagableTids", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        GWLogger.Inventory.IdValuePair[] GetManagableTids(string tokenId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://inventory.psi.ch/DataAccess.asmx/GetManagableTids", ReplyAction="*")]
        System.Threading.Tasks.Task<GWLogger.Inventory.IdValuePair[]> GetManagableTidsAsync(string tokenId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://inventory.psi.ch/DataAccess.asmx/GetTidMembers", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        GWLogger.Inventory.ShortUserInfo[] GetTidMembers(int tid);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://inventory.psi.ch/DataAccess.asmx/GetTidMembers", ReplyAction="*")]
        System.Threading.Tasks.Task<GWLogger.Inventory.ShortUserInfo[]> GetTidMembersAsync(int tid);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://inventory.psi.ch/DataAccess.asmx/GetTidRequesters", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        GWLogger.Inventory.ShortUserInfo[] GetTidRequesters(int tid);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://inventory.psi.ch/DataAccess.asmx/GetTidRequesters", ReplyAction="*")]
        System.Threading.Tasks.Task<GWLogger.Inventory.ShortUserInfo[]> GetTidRequestersAsync(int tid);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://inventory.psi.ch/DataAccess.asmx/AcceptTidUser", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        void AcceptTidUser(string tokenId, int tid, int requesterId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://inventory.psi.ch/DataAccess.asmx/AcceptTidUser", ReplyAction="*")]
        System.Threading.Tasks.Task AcceptTidUserAsync(string tokenId, int tid, int requesterId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://inventory.psi.ch/DataAccess.asmx/RefuseTidUser", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        void RefuseTidUser(string tokenId, int tid, int requesterId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://inventory.psi.ch/DataAccess.asmx/RefuseTidUser", ReplyAction="*")]
        System.Threading.Tasks.Task RefuseTidUserAsync(string tokenId, int tid, int requesterId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://inventory.psi.ch/DataAccess.asmx/RevokeTidUser", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        void RevokeTidUser(string tokenId, int tid, int requesterId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://inventory.psi.ch/DataAccess.asmx/RevokeTidUser", ReplyAction="*")]
        System.Threading.Tasks.Task RevokeTidUserAsync(string tokenId, int tid, int requesterId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://inventory.psi.ch/DataAccess.asmx/AddTidPart", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        void AddTidPart(string tokenId, int tid, string psiLabel);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://inventory.psi.ch/DataAccess.asmx/AddTidPart", ReplyAction="*")]
        System.Threading.Tasks.Task AddTidPartAsync(string tokenId, int tid, string psiLabel);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://inventory.psi.ch/DataAccess.asmx/GetTidDeviceType", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        GWLogger.Inventory.IdValuePair GetTidDeviceType(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://inventory.psi.ch/DataAccess.asmx/GetTidDeviceType", ReplyAction="*")]
        System.Threading.Tasks.Task<GWLogger.Inventory.IdValuePair> GetTidDeviceTypeAsync(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://inventory.psi.ch/DataAccess.asmx/AddTidDeviceType", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        int AddTidDeviceType(string tokenId, string name);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://inventory.psi.ch/DataAccess.asmx/AddTidDeviceType", ReplyAction="*")]
        System.Threading.Tasks.Task<int> AddTidDeviceTypeAsync(string tokenId, string name);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://inventory.psi.ch/DataAccess.asmx/UpdateTidDeviceType", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        void UpdateTidDeviceType(string tokenId, int id, string name);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://inventory.psi.ch/DataAccess.asmx/UpdateTidDeviceType", ReplyAction="*")]
        System.Threading.Tasks.Task UpdateTidDeviceTypeAsync(string tokenId, int id, string name);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://inventory.psi.ch/DataAccess.asmx/DeleteTidDeviceType", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        void DeleteTidDeviceType(string tokenId, int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://inventory.psi.ch/DataAccess.asmx/DeleteTidDeviceType", ReplyAction="*")]
        System.Threading.Tasks.Task DeleteTidDeviceTypeAsync(string tokenId, int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://inventory.psi.ch/DataAccess.asmx/TidRequestNewDevice", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        void TidRequestNewDevice(string tokenId, int deviceClass, string deviceType, string description, int manufacturer, string serial, int standardLocation, string contactPerson, string kostenstelle, string psp, int distributor, string distributorPartNo);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://inventory.psi.ch/DataAccess.asmx/TidRequestNewDevice", ReplyAction="*")]
        System.Threading.Tasks.Task TidRequestNewDeviceAsync(string tokenId, int deviceClass, string deviceType, string description, int manufacturer, string serial, int standardLocation, string contactPerson, string kostenstelle, string psp, int distributor, string distributorPartNo);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://inventory.psi.ch/DataAccess.asmx/TidRequestedNewDevices", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        GWLogger.Inventory.TidNewDeviceRequest[] TidRequestedNewDevices();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://inventory.psi.ch/DataAccess.asmx/TidRequestedNewDevices", ReplyAction="*")]
        System.Threading.Tasks.Task<GWLogger.Inventory.TidNewDeviceRequest[]> TidRequestedNewDevicesAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://inventory.psi.ch/DataAccess.asmx/TidRequestedNewDevice", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        GWLogger.Inventory.TidNewDeviceRequest TidRequestedNewDevice(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://inventory.psi.ch/DataAccess.asmx/TidRequestedNewDevice", ReplyAction="*")]
        System.Threading.Tasks.Task<GWLogger.Inventory.TidNewDeviceRequest> TidRequestedNewDeviceAsync(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://inventory.psi.ch/DataAccess.asmx/TidUpdateRequestedNewDevice", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        void TidUpdateRequestedNewDevice(string tokenId, GWLogger.Inventory.TidNewDeviceRequest update);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://inventory.psi.ch/DataAccess.asmx/TidUpdateRequestedNewDevice", ReplyAction="*")]
        System.Threading.Tasks.Task TidUpdateRequestedNewDeviceAsync(string tokenId, GWLogger.Inventory.TidNewDeviceRequest update);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://inventory.psi.ch/DataAccess.asmx/TidHandleRequestedNewDevice", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        void TidHandleRequestedNewDevice(string tokenId, int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://inventory.psi.ch/DataAccess.asmx/TidHandleRequestedNewDevice", ReplyAction="*")]
        System.Threading.Tasks.Task TidHandleRequestedNewDeviceAsync(string tokenId, int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://inventory.psi.ch/DataAccess.asmx/TidDeleteRequestedNewDevice", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        void TidDeleteRequestedNewDevice(string tokenId, int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://inventory.psi.ch/DataAccess.asmx/TidDeleteRequestedNewDevice", ReplyAction="*")]
        System.Threading.Tasks.Task TidDeleteRequestedNewDeviceAsync(string tokenId, int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://inventory.psi.ch/DataAccess.asmx/GetGatewayConfiguration", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        GWLogger.Inventory.GatewayConfiguration GetGatewayConfiguration(string psiLabel);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://inventory.psi.ch/DataAccess.asmx/GetGatewayConfiguration", ReplyAction="*")]
        System.Threading.Tasks.Task<GWLogger.Inventory.GatewayConfiguration> GetGatewayConfigurationAsync(string psiLabel);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://inventory.psi.ch/DataAccess.asmx/GetGatewayFilterTypes", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        GWLogger.Inventory.GatewayFilterType[] GetGatewayFilterTypes();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://inventory.psi.ch/DataAccess.asmx/GetGatewayFilterTypes", ReplyAction="*")]
        System.Threading.Tasks.Task<GWLogger.Inventory.GatewayFilterType[]> GetGatewayFilterTypesAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://inventory.psi.ch/DataAccess.asmx/UpdateGatewayConfiguration", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        GWLogger.Inventory.GatewayConfiguration UpdateGatewayConfiguration(string tokenId, string psiLabel, GWLogger.Inventory.GatewayConfiguration configuration, int command);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://inventory.psi.ch/DataAccess.asmx/UpdateGatewayConfiguration", ReplyAction="*")]
        System.Threading.Tasks.Task<GWLogger.Inventory.GatewayConfiguration> UpdateGatewayConfigurationAsync(string tokenId, string psiLabel, GWLogger.Inventory.GatewayConfiguration configuration, int command);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://inventory.psi.ch/DataAccess.asmx/GetPartMaintenanceSheetList", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        GWLogger.Inventory.SearchResult GetPartMaintenanceSheetList(string psiLabel);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://inventory.psi.ch/DataAccess.asmx/GetPartMaintenanceSheetList", ReplyAction="*")]
        System.Threading.Tasks.Task<GWLogger.Inventory.SearchResult> GetPartMaintenanceSheetListAsync(string psiLabel);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://inventory.psi.ch/DataAccess.asmx/GetPartMaintenanceHistory", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        GWLogger.Inventory.MaintenanceHistory[] GetPartMaintenanceHistory(string psiLabel);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://inventory.psi.ch/DataAccess.asmx/GetPartMaintenanceHistory", ReplyAction="*")]
        System.Threading.Tasks.Task<GWLogger.Inventory.MaintenanceHistory[]> GetPartMaintenanceHistoryAsync(string psiLabel);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://inventory.psi.ch/DataAccess.asmx/StartMaintenance", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        int StartMaintenance(string tokenId, int sheetId, string psiLabel);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://inventory.psi.ch/DataAccess.asmx/StartMaintenance", ReplyAction="*")]
        System.Threading.Tasks.Task<int> StartMaintenanceAsync(string tokenId, int sheetId, string psiLabel);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://inventory.psi.ch/DataAccess.asmx/SetMaintenanceDescription", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        void SetMaintenanceDescription(string tokenId, int sheetId, string psiLabel, string description);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://inventory.psi.ch/DataAccess.asmx/SetMaintenanceDescription", ReplyAction="*")]
        System.Threading.Tasks.Task SetMaintenanceDescriptionAsync(string tokenId, int sheetId, string psiLabel, string description);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://inventory.psi.ch/DataAccess.asmx/StopMaintenance", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        void StopMaintenance(string tokenId, int sheetId, string psiLabel, string description);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://inventory.psi.ch/DataAccess.asmx/StopMaintenance", ReplyAction="*")]
        System.Threading.Tasks.Task StopMaintenanceAsync(string tokenId, int sheetId, string psiLabel, string description);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://inventory.psi.ch/DataAccess.asmx/GetAllMaintenanceSheetList", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        GWLogger.Inventory.SearchResult GetAllMaintenanceSheetList();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://inventory.psi.ch/DataAccess.asmx/GetAllMaintenanceSheetList", ReplyAction="*")]
        System.Threading.Tasks.Task<GWLogger.Inventory.SearchResult> GetAllMaintenanceSheetListAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://inventory.psi.ch/DataAccess.asmx/SetNextMaintenance", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        void SetNextMaintenance(string tokenId, int sheetId, string psiLabel, System.DateTime nextMaintenance);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://inventory.psi.ch/DataAccess.asmx/SetNextMaintenance", ReplyAction="*")]
        System.Threading.Tasks.Task SetNextMaintenanceAsync(string tokenId, int sheetId, string psiLabel, System.DateTime nextMaintenance);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://inventory.psi.ch/DataAccess.asmx/GetMaintenanceSheetsForPart", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        GWLogger.Inventory.IdValuePair[] GetMaintenanceSheetsForPart(int sheetId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://inventory.psi.ch/DataAccess.asmx/GetMaintenanceSheetsForPart", ReplyAction="*")]
        System.Threading.Tasks.Task<GWLogger.Inventory.IdValuePair[]> GetMaintenanceSheetsForPartAsync(int sheetId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://inventory.psi.ch/DataAccess.asmx/AddMaintenanceSheetForPart", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        int AddMaintenanceSheetForPart(string tokenId, int sheetId, string psiLabel);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://inventory.psi.ch/DataAccess.asmx/AddMaintenanceSheetForPart", ReplyAction="*")]
        System.Threading.Tasks.Task<int> AddMaintenanceSheetForPartAsync(string tokenId, int sheetId, string psiLabel);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://inventory.psi.ch/DataAccess.asmx/DeleteMaintenanceSheetForPart", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        void DeleteMaintenanceSheetForPart(string tokenId, int sheetForPartId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://inventory.psi.ch/DataAccess.asmx/DeleteMaintenanceSheetForPart", ReplyAction="*")]
        System.Threading.Tasks.Task DeleteMaintenanceSheetForPartAsync(string tokenId, int sheetForPartId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://inventory.psi.ch/DataAccess.asmx/UpdatePartDisturbance", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        void UpdatePartDisturbance(string tokenId, int disturbanceId, GWLogger.Inventory.DataField[] fields, bool sendUpdate);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://inventory.psi.ch/DataAccess.asmx/UpdatePartDisturbance", ReplyAction="*")]
        System.Threading.Tasks.Task UpdatePartDisturbanceAsync(string tokenId, int disturbanceId, GWLogger.Inventory.DataField[] fields, bool sendUpdate);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://inventory.psi.ch/DataAccess.asmx/AddPartDisturbance", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        int AddPartDisturbance(string tokenId, string psiLabel, GWLogger.Inventory.DataField[] fields);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://inventory.psi.ch/DataAccess.asmx/AddPartDisturbance", ReplyAction="*")]
        System.Threading.Tasks.Task<int> AddPartDisturbanceAsync(string tokenId, string psiLabel, GWLogger.Inventory.DataField[] fields);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://inventory.psi.ch/DataAccess.asmx/DeletePartDisturbance", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        void DeletePartDisturbance(string tokenId, int disturbanceId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://inventory.psi.ch/DataAccess.asmx/DeletePartDisturbance", ReplyAction="*")]
        System.Threading.Tasks.Task DeletePartDisturbanceAsync(string tokenId, int disturbanceId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://inventory.psi.ch/DataAccess.asmx/GetPartDisturbanceFields", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        GWLogger.Inventory.DataField[] GetPartDisturbanceFields(string psiLabel);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://inventory.psi.ch/DataAccess.asmx/GetPartDisturbanceFields", ReplyAction="*")]
        System.Threading.Tasks.Task<GWLogger.Inventory.DataField[]> GetPartDisturbanceFieldsAsync(string psiLabel);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://inventory.psi.ch/DataAccess.asmx/GetUsers", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        GWLogger.Inventory.ShortUserInfo[] GetUsers();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://inventory.psi.ch/DataAccess.asmx/GetUsers", ReplyAction="*")]
        System.Threading.Tasks.Task<GWLogger.Inventory.ShortUserInfo[]> GetUsersAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://inventory.psi.ch/DataAccess.asmx/GetUsageTypes", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        GWLogger.Inventory.IdValuePair[] GetUsageTypes();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://inventory.psi.ch/DataAccess.asmx/GetUsageTypes", ReplyAction="*")]
        System.Threading.Tasks.Task<GWLogger.Inventory.IdValuePair[]> GetUsageTypesAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://inventory.psi.ch/DataAccess.asmx/GetPlanInformation", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        GWLogger.Inventory.PlanInformation GetPlanInformation(int locationId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://inventory.psi.ch/DataAccess.asmx/GetPlanInformation", ReplyAction="*")]
        System.Threading.Tasks.Task<GWLogger.Inventory.PlanInformation> GetPlanInformationAsync(int locationId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://inventory.psi.ch/DataAccess.asmx/GetPSPs", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        GWLogger.Inventory.PSP[] GetPSPs();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://inventory.psi.ch/DataAccess.asmx/GetPSPs", ReplyAction="*")]
        System.Threading.Tasks.Task<GWLogger.Inventory.PSP[]> GetPSPsAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://inventory.psi.ch/DataAccess.asmx/GetHwStatusTypes", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        GWLogger.Inventory.IdValuePair[] GetHwStatusTypes();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://inventory.psi.ch/DataAccess.asmx/GetHwStatusTypes", ReplyAction="*")]
        System.Threading.Tasks.Task<GWLogger.Inventory.IdValuePair[]> GetHwStatusTypesAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://inventory.psi.ch/DataAccess.asmx/ThrowGeneric", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        void ThrowGeneric();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://inventory.psi.ch/DataAccess.asmx/ThrowGeneric", ReplyAction="*")]
        System.Threading.Tasks.Task ThrowGenericAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://inventory.psi.ch/DataAccess.asmx/ThrowIvException", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        void ThrowIvException();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://inventory.psi.ch/DataAccess.asmx/ThrowIvException", ReplyAction="*")]
        System.Threading.Tasks.Task ThrowIvExceptionAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://inventory.psi.ch/DataAccess.asmx/AddBug", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        int AddBug(string title, string message);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://inventory.psi.ch/DataAccess.asmx/AddBug", ReplyAction="*")]
        System.Threading.Tasks.Task<int> AddBugAsync(string title, string message);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://inventory.psi.ch/DataAccess.asmx/AddBugInfo", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        void AddBugInfo(int bugId, string message);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://inventory.psi.ch/DataAccess.asmx/AddBugInfo", ReplyAction="*")]
        System.Threading.Tasks.Task AddBugInfoAsync(int bugId, string message);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://inventory.psi.ch/DataAccess.asmx/GetPartTypes", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        GWLogger.Inventory.SimpleNodeItem[] GetPartTypes();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://inventory.psi.ch/DataAccess.asmx/GetPartTypes", ReplyAction="*")]
        System.Threading.Tasks.Task<GWLogger.Inventory.SimpleNodeItem[]> GetPartTypesAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://inventory.psi.ch/DataAccess.asmx/GetClassTypes", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        GWLogger.Inventory.IdValuePair[] GetClassTypes();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://inventory.psi.ch/DataAccess.asmx/GetClassTypes", ReplyAction="*")]
        System.Threading.Tasks.Task<GWLogger.Inventory.IdValuePair[]> GetClassTypesAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://inventory.psi.ch/DataAccess.asmx/GetManagableClassTypes", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        GWLogger.Inventory.IdValuePair[] GetManagableClassTypes(string tokenId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://inventory.psi.ch/DataAccess.asmx/GetManagableClassTypes", ReplyAction="*")]
        System.Threading.Tasks.Task<GWLogger.Inventory.IdValuePair[]> GetManagableClassTypesAsync(string tokenId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://inventory.psi.ch/DataAccess.asmx/GetCompanies", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        GWLogger.Inventory.IdValuePair[] GetCompanies();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://inventory.psi.ch/DataAccess.asmx/GetCompanies", ReplyAction="*")]
        System.Threading.Tasks.Task<GWLogger.Inventory.IdValuePair[]> GetCompaniesAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://inventory.psi.ch/DataAccess.asmx/GetCompany", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        GWLogger.Inventory.Company GetCompany(int companyId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://inventory.psi.ch/DataAccess.asmx/GetCompany", ReplyAction="*")]
        System.Threading.Tasks.Task<GWLogger.Inventory.Company> GetCompanyAsync(int companyId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://inventory.psi.ch/DataAccess.asmx/GetPsiGroups", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        GWLogger.Inventory.IdValuePair[] GetPsiGroups();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://inventory.psi.ch/DataAccess.asmx/GetPsiGroups", ReplyAction="*")]
        System.Threading.Tasks.Task<GWLogger.Inventory.IdValuePair[]> GetPsiGroupsAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://inventory.psi.ch/DataAccess.asmx/GetPrefixes", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        GWLogger.Inventory.IdValuePair[] GetPrefixes();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://inventory.psi.ch/DataAccess.asmx/GetPrefixes", ReplyAction="*")]
        System.Threading.Tasks.Task<GWLogger.Inventory.IdValuePair[]> GetPrefixesAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://inventory.psi.ch/DataAccess.asmx/GetAllLocations", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        GWLogger.Inventory.SimpleNodeItem[] GetAllLocations();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://inventory.psi.ch/DataAccess.asmx/GetAllLocations", ReplyAction="*")]
        System.Threading.Tasks.Task<GWLogger.Inventory.SimpleNodeItem[]> GetAllLocationsAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://inventory.psi.ch/DataAccess.asmx/GetDisturbanceTypes", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        GWLogger.Inventory.IdValuePair[] GetDisturbanceTypes();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://inventory.psi.ch/DataAccess.asmx/GetDisturbanceTypes", ReplyAction="*")]
        System.Threading.Tasks.Task<GWLogger.Inventory.IdValuePair[]> GetDisturbanceTypesAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://inventory.psi.ch/DataAccess.asmx/GetPartTypeCategories", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        GWLogger.Inventory.IdValuePair[] GetPartTypeCategories();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://inventory.psi.ch/DataAccess.asmx/GetPartTypeCategories", ReplyAction="*")]
        System.Threading.Tasks.Task<GWLogger.Inventory.IdValuePair[]> GetPartTypeCategoriesAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://inventory.psi.ch/DataAccess.asmx/GetPartTypeConnectors", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        GWLogger.Inventory.PartTypeConnector[] GetPartTypeConnectors(int partType);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://inventory.psi.ch/DataAccess.asmx/GetPartTypeConnectors", ReplyAction="*")]
        System.Threading.Tasks.Task<GWLogger.Inventory.PartTypeConnector[]> GetPartTypeConnectorsAsync(int partType);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://inventory.psi.ch/DataAccess.asmx/GetConnectorTypes", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        GWLogger.Inventory.IdValuePair[] GetConnectorTypes();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://inventory.psi.ch/DataAccess.asmx/GetConnectorTypes", ReplyAction="*")]
        System.Threading.Tasks.Task<GWLogger.Inventory.IdValuePair[]> GetConnectorTypesAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://inventory.psi.ch/DataAccess.asmx/GetPartTypeConnector", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        GWLogger.Inventory.PartTypeConnector GetPartTypeConnector(int connectorId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://inventory.psi.ch/DataAccess.asmx/GetPartTypeConnector", ReplyAction="*")]
        System.Threading.Tasks.Task<GWLogger.Inventory.PartTypeConnector> GetPartTypeConnectorAsync(int connectorId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://inventory.psi.ch/DataAccess.asmx/GetPartTypeInformation", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        GWLogger.Inventory.PartTypeInfomation GetPartTypeInformation(int partTypeId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://inventory.psi.ch/DataAccess.asmx/GetPartTypeInformation", ReplyAction="*")]
        System.Threading.Tasks.Task<GWLogger.Inventory.PartTypeInfomation> GetPartTypeInformationAsync(int partTypeId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://inventory.psi.ch/DataAccess.asmx/GetPartTypeAttributes", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        GWLogger.Inventory.PartTypeAttribute[] GetPartTypeAttributes(int partType);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://inventory.psi.ch/DataAccess.asmx/GetPartTypeAttributes", ReplyAction="*")]
        System.Threading.Tasks.Task<GWLogger.Inventory.PartTypeAttribute[]> GetPartTypeAttributesAsync(int partType);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://inventory.psi.ch/DataAccess.asmx/GetPartTypeAttribute", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        GWLogger.Inventory.PartTypeAttribute GetPartTypeAttribute(int attributeId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://inventory.psi.ch/DataAccess.asmx/GetPartTypeAttribute", ReplyAction="*")]
        System.Threading.Tasks.Task<GWLogger.Inventory.PartTypeAttribute> GetPartTypeAttributeAsync(int attributeId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://inventory.psi.ch/DataAccess.asmx/GetDataClassFields", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        GWLogger.Inventory.DataClassField[] GetDataClassFields(int dataClass);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://inventory.psi.ch/DataAccess.asmx/GetDataClassFields", ReplyAction="*")]
        System.Threading.Tasks.Task<GWLogger.Inventory.DataClassField[]> GetDataClassFieldsAsync(int dataClass);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://inventory.psi.ch/DataAccess.asmx/GetDataClassAndParentFields", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        GWLogger.Inventory.DataClassField[] GetDataClassAndParentFields(int dataClass);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://inventory.psi.ch/DataAccess.asmx/GetDataClassAndParentFields", ReplyAction="*")]
        System.Threading.Tasks.Task<GWLogger.Inventory.DataClassField[]> GetDataClassAndParentFieldsAsync(int dataClass);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://inventory.psi.ch/DataAccess.asmx/GetDataClassField", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        GWLogger.Inventory.DataClassField GetDataClassField(int fieldId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://inventory.psi.ch/DataAccess.asmx/GetDataClassField", ReplyAction="*")]
        System.Threading.Tasks.Task<GWLogger.Inventory.DataClassField> GetDataClassFieldAsync(int fieldId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://inventory.psi.ch/DataAccess.asmx/GetDataFieldTypes", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        GWLogger.Inventory.IdValuePair[] GetDataFieldTypes();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://inventory.psi.ch/DataAccess.asmx/GetDataFieldTypes", ReplyAction="*")]
        System.Threading.Tasks.Task<GWLogger.Inventory.IdValuePair[]> GetDataFieldTypesAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://inventory.psi.ch/DataAccess.asmx/GetProvideConnectorTypes", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        GWLogger.Inventory.IdValuePair[] GetProvideConnectorTypes();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://inventory.psi.ch/DataAccess.asmx/GetProvideConnectorTypes", ReplyAction="*")]
        System.Threading.Tasks.Task<GWLogger.Inventory.IdValuePair[]> GetProvideConnectorTypesAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://inventory.psi.ch/DataAccess.asmx/GetRequireConnectorTypes", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        GWLogger.Inventory.IdValuePair[] GetRequireConnectorTypes();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://inventory.psi.ch/DataAccess.asmx/GetRequireConnectorTypes", ReplyAction="*")]
        System.Threading.Tasks.Task<GWLogger.Inventory.IdValuePair[]> GetRequireConnectorTypesAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://inventory.psi.ch/DataAccess.asmx/GetLinkedConnectorTypes", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        GWLogger.Inventory.IdValuePair[] GetLinkedConnectorTypes(int parentConnector);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://inventory.psi.ch/DataAccess.asmx/GetLinkedConnectorTypes", ReplyAction="*")]
        System.Threading.Tasks.Task<GWLogger.Inventory.IdValuePair[]> GetLinkedConnectorTypesAsync(int parentConnector);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://inventory.psi.ch/DataAccess.asmx/GetPrefix", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        GWLogger.Inventory.PrefixInformation GetPrefix(int prefixId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://inventory.psi.ch/DataAccess.asmx/GetPrefix", ReplyAction="*")]
        System.Threading.Tasks.Task<GWLogger.Inventory.PrefixInformation> GetPrefixAsync(int prefixId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://inventory.psi.ch/DataAccess.asmx/GetTags", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        string[] GetTags();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://inventory.psi.ch/DataAccess.asmx/GetTags", ReplyAction="*")]
        System.Threading.Tasks.Task<string[]> GetTagsAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://inventory.psi.ch/DataAccess.asmx/GetLocation", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        GWLogger.Inventory.LocationInformation GetLocation(int locationId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://inventory.psi.ch/DataAccess.asmx/GetLocation", ReplyAction="*")]
        System.Threading.Tasks.Task<GWLogger.Inventory.LocationInformation> GetLocationAsync(int locationId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://inventory.psi.ch/DataAccess.asmx/GetLocationCategories", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        GWLogger.Inventory.IdValuePair[] GetLocationCategories();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://inventory.psi.ch/DataAccess.asmx/GetLocationCategories", ReplyAction="*")]
        System.Threading.Tasks.Task<GWLogger.Inventory.IdValuePair[]> GetLocationCategoriesAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://inventory.psi.ch/DataAccess.asmx/StoreLastUrls", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        void StoreLastUrls(string username, string[] urls);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://inventory.psi.ch/DataAccess.asmx/StoreLastUrls", ReplyAction="*")]
        System.Threading.Tasks.Task StoreLastUrlsAsync(string username, string[] urls);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://inventory.psi.ch/DataAccess.asmx/GetPartTypeInformationList", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        GWLogger.Inventory.SearchResult GetPartTypeInformationList();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://inventory.psi.ch/DataAccess.asmx/GetPartTypeInformationList", ReplyAction="*")]
        System.Threading.Tasks.Task<GWLogger.Inventory.SearchResult> GetPartTypeInformationListAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://inventory.psi.ch/DataAccess.asmx/SearchHelpPages", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        string[] SearchHelpPages(string search);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://inventory.psi.ch/DataAccess.asmx/SearchHelpPages", ReplyAction="*")]
        System.Threading.Tasks.Task<string[]> SearchHelpPagesAsync(string search);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://inventory.psi.ch/DataAccess.asmx/GetRenderedWikiPage", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        GWLogger.Inventory.WikiPage GetRenderedWikiPage(string title);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://inventory.psi.ch/DataAccess.asmx/GetRenderedWikiPage", ReplyAction="*")]
        System.Threading.Tasks.Task<GWLogger.Inventory.WikiPage> GetRenderedWikiPageAsync(string title);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://inventory.psi.ch/DataAccess.asmx/GetWikiPage", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        GWLogger.Inventory.WikiPage GetWikiPage(string title);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://inventory.psi.ch/DataAccess.asmx/GetWikiPage", ReplyAction="*")]
        System.Threading.Tasks.Task<GWLogger.Inventory.WikiPage> GetWikiPageAsync(string title);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://inventory.psi.ch/DataAccess.asmx/UpdateWikiPage", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        void UpdateWikiPage(string tokenId, GWLogger.Inventory.WikiPage page);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://inventory.psi.ch/DataAccess.asmx/UpdateWikiPage", ReplyAction="*")]
        System.Threading.Tasks.Task UpdateWikiPageAsync(string tokenId, GWLogger.Inventory.WikiPage page);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://inventory.psi.ch/DataAccess.asmx/GetAllHostChecks", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        GWLogger.Inventory.HostCheckEntryInformation[] GetAllHostChecks();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://inventory.psi.ch/DataAccess.asmx/GetAllHostChecks", ReplyAction="*")]
        System.Threading.Tasks.Task<GWLogger.Inventory.HostCheckEntryInformation[]> GetAllHostChecksAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://inventory.psi.ch/DataAccess.asmx/GetNediSwitches", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        GWLogger.Inventory.IdValuePair[] GetNediSwitches();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://inventory.psi.ch/DataAccess.asmx/GetNediSwitches", ReplyAction="*")]
        System.Threading.Tasks.Task<GWLogger.Inventory.IdValuePair[]> GetNediSwitchesAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://inventory.psi.ch/DataAccess.asmx/GetNediSwitchPorts", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        GWLogger.Inventory.NediPort[] GetNediSwitchPorts(string name);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://inventory.psi.ch/DataAccess.asmx/GetNediSwitchPorts", ReplyAction="*")]
        System.Threading.Tasks.Task<GWLogger.Inventory.NediPort[]> GetNediSwitchPortsAsync(string name);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://inventory.psi.ch/DataAccess.asmx/GetSoftIocs", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        GWLogger.Inventory.SoftIocInformation[] GetSoftIocs();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://inventory.psi.ch/DataAccess.asmx/GetSoftIocs", ReplyAction="*")]
        System.Threading.Tasks.Task<GWLogger.Inventory.SoftIocInformation[]> GetSoftIocsAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://inventory.psi.ch/DataAccess.asmx/GetHostCheckTypes", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        GWLogger.Inventory.HostCheckTypeInformation[] GetHostCheckTypes();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://inventory.psi.ch/DataAccess.asmx/GetHostCheckTypes", ReplyAction="*")]
        System.Threading.Tasks.Task<GWLogger.Inventory.HostCheckTypeInformation[]> GetHostCheckTypesAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://inventory.psi.ch/DataAccess.asmx/UpdateHostCheck", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        void UpdateHostCheck(string tokenId, string hostname, int[] deletedChecks, GWLogger.Inventory.HostCheckEntryInformation[] changedChecks, GWLogger.Inventory.HostCheckEntryInformation[] newChecks);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://inventory.psi.ch/DataAccess.asmx/UpdateHostCheck", ReplyAction="*")]
        System.Threading.Tasks.Task UpdateHostCheckAsync(string tokenId, string hostname, int[] deletedChecks, GWLogger.Inventory.HostCheckEntryInformation[] changedChecks, GWLogger.Inventory.HostCheckEntryInformation[] newChecks);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://inventory.psi.ch/DataAccess.asmx/GetUserGroupMonitors", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        string[] GetUserGroupMonitors(string tokenId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://inventory.psi.ch/DataAccess.asmx/GetUserGroupMonitors", ReplyAction="*")]
        System.Threading.Tasks.Task<string[]> GetUserGroupMonitorsAsync(string tokenId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://inventory.psi.ch/DataAccess.asmx/SubscribeGroupHostCheck", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        void SubscribeGroupHostCheck(string tokenId, string groupname, string hostname);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://inventory.psi.ch/DataAccess.asmx/SubscribeGroupHostCheck", ReplyAction="*")]
        System.Threading.Tasks.Task SubscribeGroupHostCheckAsync(string tokenId, string groupname, string hostname);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://inventory.psi.ch/DataAccess.asmx/UnsubscribeGroupHostCheck", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        void UnsubscribeGroupHostCheck(string tokenId, string groupname, string hostname);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://inventory.psi.ch/DataAccess.asmx/UnsubscribeGroupHostCheck", ReplyAction="*")]
        System.Threading.Tasks.Task UnsubscribeGroupHostCheckAsync(string tokenId, string groupname, string hostname);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://inventory.psi.ch/DataAccess.asmx/SubscribeHostCheck", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        void SubscribeHostCheck(string tokenId, string hostname);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://inventory.psi.ch/DataAccess.asmx/SubscribeHostCheck", ReplyAction="*")]
        System.Threading.Tasks.Task SubscribeHostCheckAsync(string tokenId, string hostname);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://inventory.psi.ch/DataAccess.asmx/UnsubscribeHostCheck", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        void UnsubscribeHostCheck(string tokenId, string hostname);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://inventory.psi.ch/DataAccess.asmx/UnsubscribeHostCheck", ReplyAction="*")]
        System.Threading.Tasks.Task UnsubscribeHostCheckAsync(string tokenId, string hostname);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://inventory.psi.ch/DataAccess.asmx/GetHostChecks", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        GWLogger.Inventory.HostCheckInformation[] GetHostChecks(string[] hosts);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://inventory.psi.ch/DataAccess.asmx/GetHostChecks", ReplyAction="*")]
        System.Threading.Tasks.Task<GWLogger.Inventory.HostCheckInformation[]> GetHostChecksAsync(string[] hosts);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://inventory.psi.ch/DataAccess.asmx/GetPuppetAttributes", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        GWLogger.Inventory.HostPuppetAttributeInformation[] GetPuppetAttributes(string[] hosts);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://inventory.psi.ch/DataAccess.asmx/GetPuppetAttributes", ReplyAction="*")]
        System.Threading.Tasks.Task<GWLogger.Inventory.HostPuppetAttributeInformation[]> GetPuppetAttributesAsync(string[] hosts);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://inventory.psi.ch/DataAccess.asmx/UpdateHostFunctions", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        void UpdateHostFunctions(string tokenId, string hostname, int[] deletedFunctions, GWLogger.Inventory.PartHostFunction[] changedFunctions, GWLogger.Inventory.PartHostFunction[] newFunctions);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://inventory.psi.ch/DataAccess.asmx/UpdateHostFunctions", ReplyAction="*")]
        System.Threading.Tasks.Task UpdateHostFunctionsAsync(string tokenId, string hostname, int[] deletedFunctions, GWLogger.Inventory.PartHostFunction[] changedFunctions, GWLogger.Inventory.PartHostFunction[] newFunctions);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://inventory.psi.ch/DataAccess.asmx/UpdateHostRelations", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        void UpdateHostRelations(string tokenId, string hostname, int[] deletedRelations, GWLogger.Inventory.PartHostFunction[] changedRelations, GWLogger.Inventory.PartHostFunction[] newRelations);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://inventory.psi.ch/DataAccess.asmx/UpdateHostRelations", ReplyAction="*")]
        System.Threading.Tasks.Task UpdateHostRelationsAsync(string tokenId, string hostname, int[] deletedRelations, GWLogger.Inventory.PartHostFunction[] changedRelations, GWLogger.Inventory.PartHostFunction[] newRelations);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://inventory.psi.ch/DataAccess.asmx/GetLastBooted", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        GWLogger.Inventory.LastBootEntry[] GetLastBooted();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://inventory.psi.ch/DataAccess.asmx/GetLastBooted", ReplyAction="*")]
        System.Threading.Tasks.Task<GWLogger.Inventory.LastBootEntry[]> GetLastBootedAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://inventory.psi.ch/DataAccess.asmx/GetBootPcList", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        GWLogger.Inventory.HostRelation[] GetBootPcList();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://inventory.psi.ch/DataAccess.asmx/GetBootPcList", ReplyAction="*")]
        System.Threading.Tasks.Task<GWLogger.Inventory.HostRelation[]> GetBootPcListAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://inventory.psi.ch/DataAccess.asmx/GetPortServerList", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        GWLogger.Inventory.HostRelation[] GetPortServerList();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://inventory.psi.ch/DataAccess.asmx/GetPortServerList", ReplyAction="*")]
        System.Threading.Tasks.Task<GWLogger.Inventory.HostRelation[]> GetPortServerListAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://inventory.psi.ch/DataAccess.asmx/GetSwitchList", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        GWLogger.Inventory.HostRelation[] GetSwitchList();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://inventory.psi.ch/DataAccess.asmx/GetSwitchList", ReplyAction="*")]
        System.Threading.Tasks.Task<GWLogger.Inventory.HostRelation[]> GetSwitchListAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://inventory.psi.ch/DataAccess.asmx/GetPortServerMapDiagram", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        string GetPortServerMapDiagram(string portserver);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://inventory.psi.ch/DataAccess.asmx/GetPortServerMapDiagram", ReplyAction="*")]
        System.Threading.Tasks.Task<string> GetPortServerMapDiagramAsync(string portserver);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://inventory.psi.ch/DataAccess.asmx/GetSwitchMapDiagram", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        string GetSwitchMapDiagram(string switchName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://inventory.psi.ch/DataAccess.asmx/GetSwitchMapDiagram", ReplyAction="*")]
        System.Threading.Tasks.Task<string> GetSwitchMapDiagramAsync(string switchName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://inventory.psi.ch/DataAccess.asmx/GetEpicsGatewayLog", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        GWLogger.Inventory.EpicsGatewayActivity[] GetEpicsGatewayLog();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://inventory.psi.ch/DataAccess.asmx/GetEpicsGatewayLog", ReplyAction="*")]
        System.Threading.Tasks.Task<GWLogger.Inventory.EpicsGatewayActivity[]> GetEpicsGatewayLogAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://inventory.psi.ch/DataAccess.asmx/GetOs", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        GWLogger.Inventory.IdValuePair[] GetOs();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://inventory.psi.ch/DataAccess.asmx/GetOs", ReplyAction="*")]
        System.Threading.Tasks.Task<GWLogger.Inventory.IdValuePair[]> GetOsAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://inventory.psi.ch/DataAccess.asmx/GetPossibleSwitches", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        string[] GetPossibleSwitches();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://inventory.psi.ch/DataAccess.asmx/GetPossibleSwitches", ReplyAction="*")]
        System.Threading.Tasks.Task<string[]> GetPossibleSwitchesAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://inventory.psi.ch/DataAccess.asmx/AddHost", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        string AddHost(string tokenId, string pcNumber, string hostname, string model, string function, string os, int responsible, string owner, string description, int location, string warranty, string linkedToSwitch);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://inventory.psi.ch/DataAccess.asmx/AddHost", ReplyAction="*")]
        System.Threading.Tasks.Task<string> AddHostAsync(string tokenId, string pcNumber, string hostname, string model, string function, string os, int responsible, string owner, string description, int location, string warranty, string linkedToSwitch);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://inventory.psi.ch/DataAccess.asmx/TransferHost", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        void TransferHost(string tokenId, string source, string dest);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://inventory.psi.ch/DataAccess.asmx/TransferHost", ReplyAction="*")]
        System.Threading.Tasks.Task TransferHostAsync(string tokenId, string source, string dest);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://inventory.psi.ch/DataAccess.asmx/DeleteHost", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        void DeleteHost(string tokenId, string hostname);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://inventory.psi.ch/DataAccess.asmx/DeleteHost", ReplyAction="*")]
        System.Threading.Tasks.Task DeleteHostAsync(string tokenId, string hostname);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://inventory.psi.ch/DataAccess.asmx/GetPuppetConfig", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        GWLogger.Inventory.SearchResult GetPuppetConfig();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://inventory.psi.ch/DataAccess.asmx/GetPuppetConfig", ReplyAction="*")]
        System.Threading.Tasks.Task<GWLogger.Inventory.SearchResult> GetPuppetConfigAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://inventory.psi.ch/DataAccess.asmx/GetQipNetworks", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        GWLogger.Inventory.IdValuePair[] GetQipNetworks();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://inventory.psi.ch/DataAccess.asmx/GetQipNetworks", ReplyAction="*")]
        System.Threading.Tasks.Task<GWLogger.Inventory.IdValuePair[]> GetQipNetworksAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://inventory.psi.ch/DataAccess.asmx/GetQipList", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        GWLogger.Inventory.SearchResult GetQipList(string network, bool displayFree);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://inventory.psi.ch/DataAccess.asmx/GetQipList", ReplyAction="*")]
        System.Threading.Tasks.Task<GWLogger.Inventory.SearchResult> GetQipListAsync(string network, bool displayFree);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://inventory.psi.ch/DataAccess.asmx/UpdateVmStatusInformation", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        void UpdateVmStatusInformation(GWLogger.Inventory.VmStatusInformation[] vmInfo);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://inventory.psi.ch/DataAccess.asmx/UpdateVmStatusInformation", ReplyAction="*")]
        System.Threading.Tasks.Task UpdateVmStatusInformationAsync(GWLogger.Inventory.VmStatusInformation[] vmInfo);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://inventory.psi.ch/DataAccess.asmx/GetVmStatusInformation", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        GWLogger.Inventory.VmStatusInformation[] GetVmStatusInformation();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://inventory.psi.ch/DataAccess.asmx/GetVmStatusInformation", ReplyAction="*")]
        System.Threading.Tasks.Task<GWLogger.Inventory.VmStatusInformation[]> GetVmStatusInformationAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://inventory.psi.ch/DataAccess.asmx/Login", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        GWLogger.Inventory.AuthToken Login(string userName, string password);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://inventory.psi.ch/DataAccess.asmx/Login", ReplyAction="*")]
        System.Threading.Tasks.Task<GWLogger.Inventory.AuthToken> LoginAsync(string userName, string password);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://inventory.psi.ch/DataAccess.asmx/Impersonate", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        GWLogger.Inventory.AuthToken Impersonate(string tokenId, int userToImpersonate);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://inventory.psi.ch/DataAccess.asmx/Impersonate", ReplyAction="*")]
        System.Threading.Tasks.Task<GWLogger.Inventory.AuthToken> ImpersonateAsync(string tokenId, int userToImpersonate);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://inventory.psi.ch/DataAccess.asmx/Logout", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        void Logout(string tokenId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://inventory.psi.ch/DataAccess.asmx/Logout", ReplyAction="*")]
        System.Threading.Tasks.Task LogoutAsync(string tokenId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://inventory.psi.ch/DataAccess.asmx/RenewToken", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        void RenewToken(string tokenId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://inventory.psi.ch/DataAccess.asmx/RenewToken", ReplyAction="*")]
        System.Threading.Tasks.Task RenewTokenAsync(string tokenId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://inventory.psi.ch/DataAccess.asmx/CanEdit", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        bool CanEdit(string tokenId, string psiLabel);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://inventory.psi.ch/DataAccess.asmx/CanEdit", ReplyAction="*")]
        System.Threading.Tasks.Task<bool> CanEditAsync(string tokenId, string psiLabel);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://inventory.psi.ch/DataAccess.asmx/HasClassManager", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        bool HasClassManager(string tokenId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://inventory.psi.ch/DataAccess.asmx/HasClassManager", ReplyAction="*")]
        System.Threading.Tasks.Task<bool> HasClassManagerAsync(string tokenId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://inventory.psi.ch/DataAccess.asmx/IsClassManagerOfPart", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        bool IsClassManagerOfPart(string tokenId, string psiLabel);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://inventory.psi.ch/DataAccess.asmx/IsClassManagerOfPart", ReplyAction="*")]
        System.Threading.Tasks.Task<bool> IsClassManagerOfPartAsync(string tokenId, string psiLabel);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://inventory.psi.ch/DataAccess.asmx/IsClassManagerOfPartType", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        bool IsClassManagerOfPartType(string tokenId, int partType);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://inventory.psi.ch/DataAccess.asmx/IsClassManagerOfPartType", ReplyAction="*")]
        System.Threading.Tasks.Task<bool> IsClassManagerOfPartTypeAsync(string tokenId, int partType);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://inventory.psi.ch/DataAccess.asmx/HasStockManager", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        bool HasStockManager(string tokenId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://inventory.psi.ch/DataAccess.asmx/HasStockManager", ReplyAction="*")]
        System.Threading.Tasks.Task<bool> HasStockManagerAsync(string tokenId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://inventory.psi.ch/DataAccess.asmx/IsStockManagerOfPart", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        bool IsStockManagerOfPart(string tokenId, string psiLabel);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://inventory.psi.ch/DataAccess.asmx/IsStockManagerOfPart", ReplyAction="*")]
        System.Threading.Tasks.Task<bool> IsStockManagerOfPartAsync(string tokenId, string psiLabel);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://inventory.psi.ch/DataAccess.asmx/IsStockManagerOfPartType", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        bool IsStockManagerOfPartType(string tokenId, int partType);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://inventory.psi.ch/DataAccess.asmx/IsStockManagerOfPartType", ReplyAction="*")]
        System.Threading.Tasks.Task<bool> IsStockManagerOfPartTypeAsync(string tokenId, int partType);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://inventory.psi.ch/DataAccess.asmx/GetOpenOrders", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        GWLogger.Inventory.Order[] GetOpenOrders();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://inventory.psi.ch/DataAccess.asmx/GetOpenOrders", ReplyAction="*")]
        System.Threading.Tasks.Task<GWLogger.Inventory.Order[]> GetOpenOrdersAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://inventory.psi.ch/DataAccess.asmx/GetClosedOrders", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        GWLogger.Inventory.Order[] GetClosedOrders();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://inventory.psi.ch/DataAccess.asmx/GetClosedOrders", ReplyAction="*")]
        System.Threading.Tasks.Task<GWLogger.Inventory.Order[]> GetClosedOrdersAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://inventory.psi.ch/DataAccess.asmx/GetOrder", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        GWLogger.Inventory.Order GetOrder(int orderId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://inventory.psi.ch/DataAccess.asmx/GetOrder", ReplyAction="*")]
        System.Threading.Tasks.Task<GWLogger.Inventory.Order> GetOrderAsync(int orderId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://inventory.psi.ch/DataAccess.asmx/DeleteOrder", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        void DeleteOrder(string tokenId, int orderId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://inventory.psi.ch/DataAccess.asmx/DeleteOrder", ReplyAction="*")]
        System.Threading.Tasks.Task DeleteOrderAsync(string tokenId, int orderId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://inventory.psi.ch/DataAccess.asmx/UpdateOrder", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        void UpdateOrder(string tokenId, GWLogger.Inventory.Order order);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://inventory.psi.ch/DataAccess.asmx/UpdateOrder", ReplyAction="*")]
        System.Threading.Tasks.Task UpdateOrderAsync(string tokenId, GWLogger.Inventory.Order order);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://inventory.psi.ch/DataAccess.asmx/AddOrder", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        int AddOrder(string tokenId, GWLogger.Inventory.Order order);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://inventory.psi.ch/DataAccess.asmx/AddOrder", ReplyAction="*")]
        System.Threading.Tasks.Task<int> AddOrderAsync(string tokenId, GWLogger.Inventory.Order order);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://inventory.psi.ch/DataAccess.asmx/GetOrderNonDeliveredParts", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        GWLogger.Inventory.OrderItem[] GetOrderNonDeliveredParts(int orderId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://inventory.psi.ch/DataAccess.asmx/GetOrderNonDeliveredParts", ReplyAction="*")]
        System.Threading.Tasks.Task<GWLogger.Inventory.OrderItem[]> GetOrderNonDeliveredPartsAsync(int orderId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://inventory.psi.ch/DataAccess.asmx/GetOrderDeliveredParts", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        GWLogger.Inventory.OrderItem[] GetOrderDeliveredParts(int orderId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://inventory.psi.ch/DataAccess.asmx/GetOrderDeliveredParts", ReplyAction="*")]
        System.Threading.Tasks.Task<GWLogger.Inventory.OrderItem[]> GetOrderDeliveredPartsAsync(int orderId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://inventory.psi.ch/DataAccess.asmx/DeleteOrderItem", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        void DeleteOrderItem(string tokenId, int orderItemId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://inventory.psi.ch/DataAccess.asmx/DeleteOrderItem", ReplyAction="*")]
        System.Threading.Tasks.Task DeleteOrderItemAsync(string tokenId, int orderItemId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://inventory.psi.ch/DataAccess.asmx/UpdateOrderItem", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        void UpdateOrderItem(string tokenId, GWLogger.Inventory.OrderItem orderItem);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://inventory.psi.ch/DataAccess.asmx/UpdateOrderItem", ReplyAction="*")]
        System.Threading.Tasks.Task UpdateOrderItemAsync(string tokenId, GWLogger.Inventory.OrderItem orderItem);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://inventory.psi.ch/DataAccess.asmx/AddOrderItem", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        int AddOrderItem(string tokenId, GWLogger.Inventory.OrderItem orderItem, int orderId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://inventory.psi.ch/DataAccess.asmx/AddOrderItem", ReplyAction="*")]
        System.Threading.Tasks.Task<int> AddOrderItemAsync(string tokenId, GWLogger.Inventory.OrderItem orderItem, int orderId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://inventory.psi.ch/DataAccess.asmx/GetOrderPart", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        GWLogger.Inventory.OrderItem GetOrderPart(int orderItemId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://inventory.psi.ch/DataAccess.asmx/GetOrderPart", ReplyAction="*")]
        System.Threading.Tasks.Task<GWLogger.Inventory.OrderItem> GetOrderPartAsync(int orderItemId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://inventory.psi.ch/DataAccess.asmx/DeliverOrderItem", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        void DeliverOrderItem(string tokenId, int orderItemId, int defaultResponsible, int defaultHwStatus, string defaultUsageType, System.DateTime defaultLastTested, string defaultFwVersion, string defaultHwRevision, GWLogger.Inventory.DeliverDetail[] deliverDetails, bool needToPrint);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://inventory.psi.ch/DataAccess.asmx/DeliverOrderItem", ReplyAction="*")]
        System.Threading.Tasks.Task DeliverOrderItemAsync(string tokenId, int orderItemId, int defaultResponsible, int defaultHwStatus, string defaultUsageType, System.DateTime defaultLastTested, string defaultFwVersion, string defaultHwRevision, GWLogger.Inventory.DeliverDetail[] deliverDetails, bool needToPrint);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://inventory.psi.ch/DataAccess.asmx/GetPart", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        GWLogger.Inventory.PartInformation GetPart(string psiLabel);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://inventory.psi.ch/DataAccess.asmx/GetPart", ReplyAction="*")]
        System.Threading.Tasks.Task<GWLogger.Inventory.PartInformation> GetPartAsync(string psiLabel);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://inventory.psi.ch/DataAccess.asmx/GetPartAttributes", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        GWLogger.Inventory.DataField[] GetPartAttributes(string psiLabel);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://inventory.psi.ch/DataAccess.asmx/GetPartAttributes", ReplyAction="*")]
        System.Threading.Tasks.Task<GWLogger.Inventory.DataField[]> GetPartAttributesAsync(string psiLabel);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://inventory.psi.ch/DataAccess.asmx/RemovePartTag", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        void RemovePartTag(string tokenId, string psiLabel, string tag);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://inventory.psi.ch/DataAccess.asmx/RemovePartTag", ReplyAction="*")]
        System.Threading.Tasks.Task RemovePartTagAsync(string tokenId, string psiLabel, string tag);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://inventory.psi.ch/DataAccess.asmx/AddPartTag", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        void AddPartTag(string tokenId, string psiLabel, string tag);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://inventory.psi.ch/DataAccess.asmx/AddPartTag", ReplyAction="*")]
        System.Threading.Tasks.Task AddPartTagAsync(string tokenId, string psiLabel, string tag);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://inventory.psi.ch/DataAccess.asmx/GetPartSpecialEditor", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        string GetPartSpecialEditor(string psiLabel);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://inventory.psi.ch/DataAccess.asmx/GetPartSpecialEditor", ReplyAction="*")]
        System.Threading.Tasks.Task<string> GetPartSpecialEditorAsync(string psiLabel);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://inventory.psi.ch/DataAccess.asmx/GetPartialHierarchy", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        GWLogger.Inventory.PartPartialHierarchy GetPartialHierarchy(string psiLabel, int nbParents, int nbChildren);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://inventory.psi.ch/DataAccess.asmx/GetPartialHierarchy", ReplyAction="*")]
        System.Threading.Tasks.Task<GWLogger.Inventory.PartPartialHierarchy> GetPartialHierarchyAsync(string psiLabel, int nbParents, int nbChildren);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://inventory.psi.ch/DataAccess.asmx/GetPartAttribute", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        string GetPartAttribute(string psiLabel, string attributeName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://inventory.psi.ch/DataAccess.asmx/GetPartAttribute", ReplyAction="*")]
        System.Threading.Tasks.Task<string> GetPartAttributeAsync(string psiLabel, string attributeName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://inventory.psi.ch/DataAccess.asmx/GetCableData", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        GWLogger.Inventory.DataField[] GetCableData(string psiLabel, string connector);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://inventory.psi.ch/DataAccess.asmx/GetCableData", ReplyAction="*")]
        System.Threading.Tasks.Task<GWLogger.Inventory.DataField[]> GetCableDataAsync(string psiLabel, string connector);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://inventory.psi.ch/DataAccess.asmx/UpdateCableData", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        void UpdateCableData(string tokenId, string psiLabel, string connector, GWLogger.Inventory.AttributeField[] values);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://inventory.psi.ch/DataAccess.asmx/UpdateCableData", ReplyAction="*")]
        System.Threading.Tasks.Task UpdateCableDataAsync(string tokenId, string psiLabel, string connector, GWLogger.Inventory.AttributeField[] values);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://inventory.psi.ch/DataAccess.asmx/GetPartParents", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        string[] GetPartParents(string psiLabel);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://inventory.psi.ch/DataAccess.asmx/GetPartParents", ReplyAction="*")]
        System.Threading.Tasks.Task<string[]> GetPartParentsAsync(string psiLabel);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://inventory.psi.ch/DataAccess.asmx/CanMultiConnect", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        bool CanMultiConnect(string parentLabel, string childLabel);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://inventory.psi.ch/DataAccess.asmx/CanMultiConnect", ReplyAction="*")]
        System.Threading.Tasks.Task<bool> CanMultiConnectAsync(string parentLabel, string childLabel);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://inventory.psi.ch/DataAccess.asmx/GetMultiConnection", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        GWLogger.Inventory.MultiConnection GetMultiConnection(string parentLabel, string childLabel);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://inventory.psi.ch/DataAccess.asmx/GetMultiConnection", ReplyAction="*")]
        System.Threading.Tasks.Task<GWLogger.Inventory.MultiConnection> GetMultiConnectionAsync(string parentLabel, string childLabel);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://inventory.psi.ch/DataAccess.asmx/UpdateMultiConnection", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        void UpdateMultiConnection(string parentLabel, string childLabel, GWLogger.Inventory.MultiConnectionEntry[] connections, string tokenId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://inventory.psi.ch/DataAccess.asmx/UpdateMultiConnection", ReplyAction="*")]
        System.Threading.Tasks.Task UpdateMultiConnectionAsync(string parentLabel, string childLabel, GWLogger.Inventory.MultiConnectionEntry[] connections, string tokenId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://inventory.psi.ch/DataAccess.asmx/PartRelationImageMap", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        string PartRelationImageMap(string[] systems);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://inventory.psi.ch/DataAccess.asmx/PartRelationImageMap", ReplyAction="*")]
        System.Threading.Tasks.Task<string> PartRelationImageMapAsync(string[] systems);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://inventory.psi.ch/DataAccess.asmx/GetPartBySystem", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        GWLogger.Inventory.PartInformation GetPartBySystem(string systemName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://inventory.psi.ch/DataAccess.asmx/GetPartBySystem", ReplyAction="*")]
        System.Threading.Tasks.Task<GWLogger.Inventory.PartInformation> GetPartBySystemAsync(string systemName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://inventory.psi.ch/DataAccess.asmx/GetHostInformation", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        GWLogger.Inventory.HostInformation[] GetHostInformation(string[] hosts);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://inventory.psi.ch/DataAccess.asmx/GetHostInformation", ReplyAction="*")]
        System.Threading.Tasks.Task<GWLogger.Inventory.HostInformation[]> GetHostInformationAsync(string[] hosts);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://inventory.psi.ch/DataAccess.asmx/GetPiquetInformation", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        GWLogger.Inventory.HostPiquetInformation[] GetPiquetInformation(string[] hosts);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://inventory.psi.ch/DataAccess.asmx/GetPiquetInformation", ReplyAction="*")]
        System.Threading.Tasks.Task<GWLogger.Inventory.HostPiquetInformation[]> GetPiquetInformationAsync(string[] hosts);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://inventory.psi.ch/DataAccess.asmx/UpdateHostPiquetInformation", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        void UpdateHostPiquetInformation(string tokenId, GWLogger.Inventory.HostPiquetInformation info);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://inventory.psi.ch/DataAccess.asmx/UpdateHostPiquetInformation", ReplyAction="*")]
        System.Threading.Tasks.Task UpdateHostPiquetInformationAsync(string tokenId, GWLogger.Inventory.HostPiquetInformation info);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://inventory.psi.ch/DataAccess.asmx/GetLastBoot", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        GWLogger.Inventory.LastBootInformation[] GetLastBoot(string[] hosts);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://inventory.psi.ch/DataAccess.asmx/GetLastBoot", ReplyAction="*")]
        System.Threading.Tasks.Task<GWLogger.Inventory.LastBootInformation[]> GetLastBootAsync(string[] hosts);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://inventory.psi.ch/DataAccess.asmx/GetPartHistory", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        GWLogger.Inventory.PartHistoryInformation[] GetPartHistory(string psiLabel);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://inventory.psi.ch/DataAccess.asmx/GetPartHistory", ReplyAction="*")]
        System.Threading.Tasks.Task<GWLogger.Inventory.PartHistoryInformation[]> GetPartHistoryAsync(string psiLabel);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://inventory.psi.ch/DataAccess.asmx/GetPartNotes", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        GWLogger.Inventory.PartNoteInformation[] GetPartNotes(string psiLabel);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://inventory.psi.ch/DataAccess.asmx/GetPartNotes", ReplyAction="*")]
        System.Threading.Tasks.Task<GWLogger.Inventory.PartNoteInformation[]> GetPartNotesAsync(string psiLabel);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://inventory.psi.ch/DataAccess.asmx/AddPartNote", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        int AddPartNote(string tokenId, string psiLabel, string title, string description);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://inventory.psi.ch/DataAccess.asmx/AddPartNote", ReplyAction="*")]
        System.Threading.Tasks.Task<int> AddPartNoteAsync(string tokenId, string psiLabel, string title, string description);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://inventory.psi.ch/DataAccess.asmx/DeletePartNote", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        void DeletePartNote(string tokenId, int nodeId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://inventory.psi.ch/DataAccess.asmx/DeletePartNote", ReplyAction="*")]
        System.Threading.Tasks.Task DeletePartNoteAsync(string tokenId, int nodeId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://inventory.psi.ch/DataAccess.asmx/UpdatePartNote", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        void UpdatePartNote(string tokenId, int noteId, string title, string description);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://inventory.psi.ch/DataAccess.asmx/UpdatePartNote", ReplyAction="*")]
        System.Threading.Tasks.Task UpdatePartNoteAsync(string tokenId, int noteId, string title, string description);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://inventory.psi.ch/DataAccess.asmx/GetPartDocuments", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        GWLogger.Inventory.PartDocumentInformation[] GetPartDocuments(string psiLabel);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://inventory.psi.ch/DataAccess.asmx/GetPartDocuments", ReplyAction="*")]
        System.Threading.Tasks.Task<GWLogger.Inventory.PartDocumentInformation[]> GetPartDocumentsAsync(string psiLabel);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://inventory.psi.ch/DataAccess.asmx/GetMainNode", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        string GetMainNode();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://inventory.psi.ch/DataAccess.asmx/GetMainNode", ReplyAction="*")]
        System.Threading.Tasks.Task<string> GetMainNodeAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://inventory.psi.ch/DataAccess.asmx/ForceCacheReload", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        void ForceCacheReload();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://inventory.psi.ch/DataAccess.asmx/ForceCacheReload", ReplyAction="*")]
        System.Threading.Tasks.Task ForceCacheReloadAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://inventory.psi.ch/DataAccess.asmx/ForceActionLogInit", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        void ForceActionLogInit();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://inventory.psi.ch/DataAccess.asmx/ForceActionLogInit", ReplyAction="*")]
        System.Threading.Tasks.Task ForceActionLogInitAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://inventory.psi.ch/DataAccess.asmx/ServerName", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        string ServerName();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://inventory.psi.ch/DataAccess.asmx/ServerName", ReplyAction="*")]
        System.Threading.Tasks.Task<string> ServerNameAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://inventory.psi.ch/DataAccess.asmx/DatabaseName", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        string DatabaseName();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://inventory.psi.ch/DataAccess.asmx/DatabaseName", ReplyAction="*")]
        System.Threading.Tasks.Task<string> DatabaseNameAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://inventory.psi.ch/DataAccess.asmx/UnlockTfsConfigs", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        void UnlockTfsConfigs(string tokenId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://inventory.psi.ch/DataAccess.asmx/UnlockTfsConfigs", ReplyAction="*")]
        System.Threading.Tasks.Task UnlockTfsConfigsAsync(string tokenId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://inventory.psi.ch/DataAccess.asmx/LockTfsConfigs", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        void LockTfsConfigs(string tokenId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://inventory.psi.ch/DataAccess.asmx/LockTfsConfigs", ReplyAction="*")]
        System.Threading.Tasks.Task LockTfsConfigsAsync(string tokenId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://inventory.psi.ch/DataAccess.asmx/InterfaceTimeStamp", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        long InterfaceTimeStamp();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://inventory.psi.ch/DataAccess.asmx/InterfaceTimeStamp", ReplyAction="*")]
        System.Threading.Tasks.Task<long> InterfaceTimeStampAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://inventory.psi.ch/DataAccess.asmx/GetManagablePartTypes", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        GWLogger.Inventory.PartTypeShort[] GetManagablePartTypes(string tokenId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://inventory.psi.ch/DataAccess.asmx/GetManagablePartTypes", ReplyAction="*")]
        System.Threading.Tasks.Task<GWLogger.Inventory.PartTypeShort[]> GetManagablePartTypesAsync(string tokenId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://inventory.psi.ch/DataAccess.asmx/GetPartTypePossibleAttributes", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        GWLogger.Inventory.DataField[] GetPartTypePossibleAttributes(int partType);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://inventory.psi.ch/DataAccess.asmx/GetPartTypePossibleAttributes", ReplyAction="*")]
        System.Threading.Tasks.Task<GWLogger.Inventory.DataField[]> GetPartTypePossibleAttributesAsync(int partType);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://inventory.psi.ch/DataAccess.asmx/UpdatePartType", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        void UpdatePartType(string tokenId, GWLogger.Inventory.PartTypeInfomation partType);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://inventory.psi.ch/DataAccess.asmx/UpdatePartType", ReplyAction="*")]
        System.Threading.Tasks.Task UpdatePartTypeAsync(string tokenId, GWLogger.Inventory.PartTypeInfomation partType);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://inventory.psi.ch/DataAccess.asmx/AddPartType", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        int AddPartType(string tokenId, GWLogger.Inventory.PartTypeInfomation partType);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://inventory.psi.ch/DataAccess.asmx/AddPartType", ReplyAction="*")]
        System.Threading.Tasks.Task<int> AddPartTypeAsync(string tokenId, GWLogger.Inventory.PartTypeInfomation partType);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://inventory.psi.ch/DataAccess.asmx/DeletePartType", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        void DeletePartType(string tokenId, int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://inventory.psi.ch/DataAccess.asmx/DeletePartType", ReplyAction="*")]
        System.Threading.Tasks.Task DeletePartTypeAsync(string tokenId, int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://inventory.psi.ch/DataAccess.asmx/UpdatePartTypeConnector", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        void UpdatePartTypeConnector(string tokenId, GWLogger.Inventory.PartTypeConnector connector);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://inventory.psi.ch/DataAccess.asmx/UpdatePartTypeConnector", ReplyAction="*")]
        System.Threading.Tasks.Task UpdatePartTypeConnectorAsync(string tokenId, GWLogger.Inventory.PartTypeConnector connector);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://inventory.psi.ch/DataAccess.asmx/DeletePartTypeConnector", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        void DeletePartTypeConnector(string tokenId, int connectorId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://inventory.psi.ch/DataAccess.asmx/DeletePartTypeConnector", ReplyAction="*")]
        System.Threading.Tasks.Task DeletePartTypeConnectorAsync(string tokenId, int connectorId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://inventory.psi.ch/DataAccess.asmx/AddPartTypeConnector", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        int AddPartTypeConnector(string tokenId, int partTypeId, GWLogger.Inventory.PartTypeConnector connector);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://inventory.psi.ch/DataAccess.asmx/AddPartTypeConnector", ReplyAction="*")]
        System.Threading.Tasks.Task<int> AddPartTypeConnectorAsync(string tokenId, int partTypeId, GWLogger.Inventory.PartTypeConnector connector);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://inventory.psi.ch/DataAccess.asmx/UpdatePartTypeAttribute", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        void UpdatePartTypeAttribute(string tokenId, GWLogger.Inventory.PartTypeAttribute attribute);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://inventory.psi.ch/DataAccess.asmx/UpdatePartTypeAttribute", ReplyAction="*")]
        System.Threading.Tasks.Task UpdatePartTypeAttributeAsync(string tokenId, GWLogger.Inventory.PartTypeAttribute attribute);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://inventory.psi.ch/DataAccess.asmx/DeletePartTypeAttribute", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        void DeletePartTypeAttribute(string tokenId, int attributeId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://inventory.psi.ch/DataAccess.asmx/DeletePartTypeAttribute", ReplyAction="*")]
        System.Threading.Tasks.Task DeletePartTypeAttributeAsync(string tokenId, int attributeId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://inventory.psi.ch/DataAccess.asmx/AddPartTypeAttribute", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        int AddPartTypeAttribute(string tokenId, int partTypeId, GWLogger.Inventory.PartTypeAttribute attribute);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://inventory.psi.ch/DataAccess.asmx/AddPartTypeAttribute", ReplyAction="*")]
        System.Threading.Tasks.Task<int> AddPartTypeAttributeAsync(string tokenId, int partTypeId, GWLogger.Inventory.PartTypeAttribute attribute);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://inventory.psi.ch/DataAccess.asmx/GetManagableDataClass", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        GWLogger.Inventory.DataClass[] GetManagableDataClass(string tokenId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://inventory.psi.ch/DataAccess.asmx/GetManagableDataClass", ReplyAction="*")]
        System.Threading.Tasks.Task<GWLogger.Inventory.DataClass[]> GetManagableDataClassAsync(string tokenId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://inventory.psi.ch/DataAccess.asmx/GetDataClassInformation", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        GWLogger.Inventory.DataClass GetDataClassInformation(int dataClassId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://inventory.psi.ch/DataAccess.asmx/GetDataClassInformation", ReplyAction="*")]
        System.Threading.Tasks.Task<GWLogger.Inventory.DataClass> GetDataClassInformationAsync(int dataClassId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://inventory.psi.ch/DataAccess.asmx/UpdateDataClass", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        void UpdateDataClass(string tokenId, GWLogger.Inventory.DataClass dataClass);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://inventory.psi.ch/DataAccess.asmx/UpdateDataClass", ReplyAction="*")]
        System.Threading.Tasks.Task UpdateDataClassAsync(string tokenId, GWLogger.Inventory.DataClass dataClass);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://inventory.psi.ch/DataAccess.asmx/AddDataClass", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        int AddDataClass(string tokenId, GWLogger.Inventory.DataClass dataClass);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://inventory.psi.ch/DataAccess.asmx/AddDataClass", ReplyAction="*")]
        System.Threading.Tasks.Task<int> AddDataClassAsync(string tokenId, GWLogger.Inventory.DataClass dataClass);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://inventory.psi.ch/DataAccess.asmx/DeleteDataClass", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        void DeleteDataClass(string tokenId, int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://inventory.psi.ch/DataAccess.asmx/DeleteDataClass", ReplyAction="*")]
        System.Threading.Tasks.Task DeleteDataClassAsync(string tokenId, int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://inventory.psi.ch/DataAccess.asmx/UpdateDataClassField", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        void UpdateDataClassField(string tokenId, GWLogger.Inventory.DataClassField classField);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://inventory.psi.ch/DataAccess.asmx/UpdateDataClassField", ReplyAction="*")]
        System.Threading.Tasks.Task UpdateDataClassFieldAsync(string tokenId, GWLogger.Inventory.DataClassField classField);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://inventory.psi.ch/DataAccess.asmx/DeleteDataClassField", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        void DeleteDataClassField(string tokenId, int fieldId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://inventory.psi.ch/DataAccess.asmx/DeleteDataClassField", ReplyAction="*")]
        System.Threading.Tasks.Task DeleteDataClassFieldAsync(string tokenId, int fieldId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://inventory.psi.ch/DataAccess.asmx/AddDataClassField", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        int AddDataClassField(string tokenId, int dataClassId, GWLogger.Inventory.DataClassField classField);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://inventory.psi.ch/DataAccess.asmx/AddDataClassField", ReplyAction="*")]
        System.Threading.Tasks.Task<int> AddDataClassFieldAsync(string tokenId, int dataClassId, GWLogger.Inventory.DataClassField classField);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://inventory.psi.ch/DataAccess.asmx/SaveDataClassSpecialEditor", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        void SaveDataClassSpecialEditor(string tokenId, int dataClassId, string specialEditor);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://inventory.psi.ch/DataAccess.asmx/SaveDataClassSpecialEditor", ReplyAction="*")]
        System.Threading.Tasks.Task SaveDataClassSpecialEditorAsync(string tokenId, int dataClassId, string specialEditor);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://inventory.psi.ch/DataAccess.asmx/GetDataClassSpecialEditor", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        string GetDataClassSpecialEditor(int dataClassId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://inventory.psi.ch/DataAccess.asmx/GetDataClassSpecialEditor", ReplyAction="*")]
        System.Threading.Tasks.Task<string> GetDataClassSpecialEditorAsync(int dataClassId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://inventory.psi.ch/DataAccess.asmx/AdminGetConnectorTypes", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        GWLogger.Inventory.ConnectorType[] AdminGetConnectorTypes();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://inventory.psi.ch/DataAccess.asmx/AdminGetConnectorTypes", ReplyAction="*")]
        System.Threading.Tasks.Task<GWLogger.Inventory.ConnectorType[]> AdminGetConnectorTypesAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://inventory.psi.ch/DataAccess.asmx/GetConnectorType", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        GWLogger.Inventory.ConnectorType GetConnectorType(int connectorId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://inventory.psi.ch/DataAccess.asmx/GetConnectorType", ReplyAction="*")]
        System.Threading.Tasks.Task<GWLogger.Inventory.ConnectorType> GetConnectorTypeAsync(int connectorId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://inventory.psi.ch/DataAccess.asmx/UpdateConnectorType", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        void UpdateConnectorType(string tokenId, GWLogger.Inventory.ConnectorType connectorType);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://inventory.psi.ch/DataAccess.asmx/UpdateConnectorType", ReplyAction="*")]
        System.Threading.Tasks.Task UpdateConnectorTypeAsync(string tokenId, GWLogger.Inventory.ConnectorType connectorType);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://inventory.psi.ch/DataAccess.asmx/AddConnectorType", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        int AddConnectorType(string tokenId, GWLogger.Inventory.ConnectorType connectorType);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://inventory.psi.ch/DataAccess.asmx/AddConnectorType", ReplyAction="*")]
        System.Threading.Tasks.Task<int> AddConnectorTypeAsync(string tokenId, GWLogger.Inventory.ConnectorType connectorType);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://inventory.psi.ch/DataAccess.asmx/DeleteConnectorType", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        void DeleteConnectorType(string tokenId, int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://inventory.psi.ch/DataAccess.asmx/DeleteConnectorType", ReplyAction="*")]
        System.Threading.Tasks.Task DeleteConnectorTypeAsync(string tokenId, int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://inventory.psi.ch/DataAccess.asmx/LinkConnectors", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        void LinkConnectors(string tokenId, int provideConnector, int requireConnector);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://inventory.psi.ch/DataAccess.asmx/LinkConnectors", ReplyAction="*")]
        System.Threading.Tasks.Task LinkConnectorsAsync(string tokenId, int provideConnector, int requireConnector);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://inventory.psi.ch/DataAccess.asmx/UnlinkConnectors", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        void UnlinkConnectors(string tokenId, int provideConnector, int requireConnector);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://inventory.psi.ch/DataAccess.asmx/UnlinkConnectors", ReplyAction="*")]
        System.Threading.Tasks.Task UnlinkConnectorsAsync(string tokenId, int provideConnector, int requireConnector);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://inventory.psi.ch/DataAccess.asmx/UpdatePrefix", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        void UpdatePrefix(string tokenId, GWLogger.Inventory.PrefixInformation prefix);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://inventory.psi.ch/DataAccess.asmx/UpdatePrefix", ReplyAction="*")]
        System.Threading.Tasks.Task UpdatePrefixAsync(string tokenId, GWLogger.Inventory.PrefixInformation prefix);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://inventory.psi.ch/DataAccess.asmx/AddPrefix", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        int AddPrefix(string tokenId, GWLogger.Inventory.PrefixInformation prefix);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://inventory.psi.ch/DataAccess.asmx/AddPrefix", ReplyAction="*")]
        System.Threading.Tasks.Task<int> AddPrefixAsync(string tokenId, GWLogger.Inventory.PrefixInformation prefix);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://inventory.psi.ch/DataAccess.asmx/DeletePrefix", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        void DeletePrefix(string tokenId, int prefixId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://inventory.psi.ch/DataAccess.asmx/DeletePrefix", ReplyAction="*")]
        System.Threading.Tasks.Task DeletePrefixAsync(string tokenId, int prefixId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://inventory.psi.ch/DataAccess.asmx/UpdateCompany", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        void UpdateCompany(string tokenId, GWLogger.Inventory.Company company);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://inventory.psi.ch/DataAccess.asmx/UpdateCompany", ReplyAction="*")]
        System.Threading.Tasks.Task UpdateCompanyAsync(string tokenId, GWLogger.Inventory.Company company);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://inventory.psi.ch/DataAccess.asmx/AddCompany", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        int AddCompany(string tokenId, GWLogger.Inventory.Company company);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://inventory.psi.ch/DataAccess.asmx/AddCompany", ReplyAction="*")]
        System.Threading.Tasks.Task<int> AddCompanyAsync(string tokenId, GWLogger.Inventory.Company company);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://inventory.psi.ch/DataAccess.asmx/DeleteCompany", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        void DeleteCompany(string tokenId, int companyId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://inventory.psi.ch/DataAccess.asmx/DeleteCompany", ReplyAction="*")]
        System.Threading.Tasks.Task DeleteCompanyAsync(string tokenId, int companyId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://inventory.psi.ch/DataAccess.asmx/GetRoleTypes", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        GWLogger.Inventory.RoleType[] GetRoleTypes();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://inventory.psi.ch/DataAccess.asmx/GetRoleTypes", ReplyAction="*")]
        System.Threading.Tasks.Task<GWLogger.Inventory.RoleType[]> GetRoleTypesAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://inventory.psi.ch/DataAccess.asmx/UserRoles", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        GWLogger.Inventory.UserRole[] UserRoles(int userId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://inventory.psi.ch/DataAccess.asmx/UserRoles", ReplyAction="*")]
        System.Threading.Tasks.Task<GWLogger.Inventory.UserRole[]> UserRolesAsync(int userId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://inventory.psi.ch/DataAccess.asmx/AddUserRole", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        int AddUserRole(string tokenId, int userId, GWLogger.Inventory.UserRole role);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://inventory.psi.ch/DataAccess.asmx/AddUserRole", ReplyAction="*")]
        System.Threading.Tasks.Task<int> AddUserRoleAsync(string tokenId, int userId, GWLogger.Inventory.UserRole role);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://inventory.psi.ch/DataAccess.asmx/RemoveUserRole", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        void RemoveUserRole(string tokenId, int roleId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://inventory.psi.ch/DataAccess.asmx/RemoveUserRole", ReplyAction="*")]
        System.Threading.Tasks.Task RemoveUserRoleAsync(string tokenId, int roleId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://inventory.psi.ch/DataAccess.asmx/AddTag", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        void AddTag(string tokenId, string tag);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://inventory.psi.ch/DataAccess.asmx/AddTag", ReplyAction="*")]
        System.Threading.Tasks.Task AddTagAsync(string tokenId, string tag);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://inventory.psi.ch/DataAccess.asmx/RemoveTag", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        void RemoveTag(string tokenId, string tag);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://inventory.psi.ch/DataAccess.asmx/RemoveTag", ReplyAction="*")]
        System.Threading.Tasks.Task RemoveTagAsync(string tokenId, string tag);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://inventory.psi.ch/DataAccess.asmx/AddLocation", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        int AddLocation(string tokenId, int parentId, GWLogger.Inventory.LocationInformation location);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://inventory.psi.ch/DataAccess.asmx/AddLocation", ReplyAction="*")]
        System.Threading.Tasks.Task<int> AddLocationAsync(string tokenId, int parentId, GWLogger.Inventory.LocationInformation location);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://inventory.psi.ch/DataAccess.asmx/UpdateLocation", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        void UpdateLocation(string tokenId, GWLogger.Inventory.LocationInformation location);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://inventory.psi.ch/DataAccess.asmx/UpdateLocation", ReplyAction="*")]
        System.Threading.Tasks.Task UpdateLocationAsync(string tokenId, GWLogger.Inventory.LocationInformation location);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://inventory.psi.ch/DataAccess.asmx/DeleteLocation", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        void DeleteLocation(string tokenId, int locationId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://inventory.psi.ch/DataAccess.asmx/DeleteLocation", ReplyAction="*")]
        System.Threading.Tasks.Task DeleteLocationAsync(string tokenId, int locationId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://inventory.psi.ch/DataAccess.asmx/MergeLocation", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        void MergeLocation(string tokenId, int locationToKeep, int locationToMerge);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://inventory.psi.ch/DataAccess.asmx/MergeLocation", ReplyAction="*")]
        System.Threading.Tasks.Task MergeLocationAsync(string tokenId, int locationToKeep, int locationToMerge);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://inventory.psi.ch/DataAccess.asmx/MoveLocation", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        void MoveLocation(string tokenId, int parentLocation, int childLocation);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://inventory.psi.ch/DataAccess.asmx/MoveLocation", ReplyAction="*")]
        System.Threading.Tasks.Task MoveLocationAsync(string tokenId, int parentLocation, int childLocation);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://inventory.psi.ch/DataAccess.asmx/SendMailing", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        void SendMailing(string tokenId, string subject, string content);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://inventory.psi.ch/DataAccess.asmx/SendMailing", ReplyAction="*")]
        System.Threading.Tasks.Task SendMailingAsync(string tokenId, string subject, string content);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://inventory.psi.ch/DataAccess.asmx/GetPsiGroup", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        GWLogger.Inventory.PsiGroup GetPsiGroup(int groupId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://inventory.psi.ch/DataAccess.asmx/GetPsiGroup", ReplyAction="*")]
        System.Threading.Tasks.Task<GWLogger.Inventory.PsiGroup> GetPsiGroupAsync(int groupId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://inventory.psi.ch/DataAccess.asmx/UpdatePsiGroup", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        void UpdatePsiGroup(string tokenId, GWLogger.Inventory.PsiGroup psiGroup);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://inventory.psi.ch/DataAccess.asmx/UpdatePsiGroup", ReplyAction="*")]
        System.Threading.Tasks.Task UpdatePsiGroupAsync(string tokenId, GWLogger.Inventory.PsiGroup psiGroup);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://inventory.psi.ch/DataAccess.asmx/AddPsiGroup", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        int AddPsiGroup(string tokenId, GWLogger.Inventory.PsiGroup psiGroup);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://inventory.psi.ch/DataAccess.asmx/AddPsiGroup", ReplyAction="*")]
        System.Threading.Tasks.Task<int> AddPsiGroupAsync(string tokenId, GWLogger.Inventory.PsiGroup psiGroup);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://inventory.psi.ch/DataAccess.asmx/DeletePsiGroup", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        void DeletePsiGroup(string tokenId, int psiGroupId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://inventory.psi.ch/DataAccess.asmx/DeletePsiGroup", ReplyAction="*")]
        System.Threading.Tasks.Task DeletePsiGroupAsync(string tokenId, int psiGroupId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://inventory.psi.ch/DataAccess.asmx/GetDisturbance", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        GWLogger.Inventory.Disturbance GetDisturbance(int disturbanceId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://inventory.psi.ch/DataAccess.asmx/GetDisturbance", ReplyAction="*")]
        System.Threading.Tasks.Task<GWLogger.Inventory.Disturbance> GetDisturbanceAsync(int disturbanceId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://inventory.psi.ch/DataAccess.asmx/GetDisturbanceFields", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        GWLogger.Inventory.DisturbanceField[] GetDisturbanceFields(int disturbanceId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://inventory.psi.ch/DataAccess.asmx/GetDisturbanceFields", ReplyAction="*")]
        System.Threading.Tasks.Task<GWLogger.Inventory.DisturbanceField[]> GetDisturbanceFieldsAsync(int disturbanceId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://inventory.psi.ch/DataAccess.asmx/GetDisturbanceField", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        GWLogger.Inventory.DisturbanceField GetDisturbanceField(int fieldId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://inventory.psi.ch/DataAccess.asmx/GetDisturbanceField", ReplyAction="*")]
        System.Threading.Tasks.Task<GWLogger.Inventory.DisturbanceField> GetDisturbanceFieldAsync(int fieldId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://inventory.psi.ch/DataAccess.asmx/UpdateDisturbance", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        void UpdateDisturbance(string tokenId, GWLogger.Inventory.Disturbance disturbance);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://inventory.psi.ch/DataAccess.asmx/UpdateDisturbance", ReplyAction="*")]
        System.Threading.Tasks.Task UpdateDisturbanceAsync(string tokenId, GWLogger.Inventory.Disturbance disturbance);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://inventory.psi.ch/DataAccess.asmx/AddDisturbance", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        int AddDisturbance(string tokenId, GWLogger.Inventory.Disturbance disturbance);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://inventory.psi.ch/DataAccess.asmx/AddDisturbance", ReplyAction="*")]
        System.Threading.Tasks.Task<int> AddDisturbanceAsync(string tokenId, GWLogger.Inventory.Disturbance disturbance);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://inventory.psi.ch/DataAccess.asmx/DeleteDisturbance", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        void DeleteDisturbance(string tokenId, int disturbanceId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://inventory.psi.ch/DataAccess.asmx/DeleteDisturbance", ReplyAction="*")]
        System.Threading.Tasks.Task DeleteDisturbanceAsync(string tokenId, int disturbanceId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://inventory.psi.ch/DataAccess.asmx/UpdateDisturbanceField", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        void UpdateDisturbanceField(string tokenId, GWLogger.Inventory.DisturbanceField disturbanceField);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://inventory.psi.ch/DataAccess.asmx/UpdateDisturbanceField", ReplyAction="*")]
        System.Threading.Tasks.Task UpdateDisturbanceFieldAsync(string tokenId, GWLogger.Inventory.DisturbanceField disturbanceField);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://inventory.psi.ch/DataAccess.asmx/AddDisturbanceField", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        int AddDisturbanceField(string tokenId, int disturbanceId, GWLogger.Inventory.DisturbanceField disturbanceField);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://inventory.psi.ch/DataAccess.asmx/AddDisturbanceField", ReplyAction="*")]
        System.Threading.Tasks.Task<int> AddDisturbanceFieldAsync(string tokenId, int disturbanceId, GWLogger.Inventory.DisturbanceField disturbanceField);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://inventory.psi.ch/DataAccess.asmx/DeleteDisturbanceField", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        void DeleteDisturbanceField(string tokenId, int disturbanceFieldId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://inventory.psi.ch/DataAccess.asmx/DeleteDisturbanceField", ReplyAction="*")]
        System.Threading.Tasks.Task DeleteDisturbanceFieldAsync(string tokenId, int disturbanceFieldId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://inventory.psi.ch/DataAccess.asmx/GetPsErrorCodes", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        GWLogger.Inventory.PsErrorCodeInformation[] GetPsErrorCodes();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://inventory.psi.ch/DataAccess.asmx/GetPsErrorCodes", ReplyAction="*")]
        System.Threading.Tasks.Task<GWLogger.Inventory.PsErrorCodeInformation[]> GetPsErrorCodesAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://inventory.psi.ch/DataAccess.asmx/GetPsErrorCode", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        GWLogger.Inventory.PsErrorCodeInformation GetPsErrorCode(string errorId, string applicationId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://inventory.psi.ch/DataAccess.asmx/GetPsErrorCode", ReplyAction="*")]
        System.Threading.Tasks.Task<GWLogger.Inventory.PsErrorCodeInformation> GetPsErrorCodeAsync(string errorId, string applicationId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://inventory.psi.ch/DataAccess.asmx/UpdatePsErrorCode", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        void UpdatePsErrorCode(string tokenId, GWLogger.Inventory.PsErrorCodeInformation psErrorCode);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://inventory.psi.ch/DataAccess.asmx/UpdatePsErrorCode", ReplyAction="*")]
        System.Threading.Tasks.Task UpdatePsErrorCodeAsync(string tokenId, GWLogger.Inventory.PsErrorCodeInformation psErrorCode);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://inventory.psi.ch/DataAccess.asmx/AddPsErrorCode", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        void AddPsErrorCode(string tokenId, GWLogger.Inventory.PsErrorCodeInformation psErrorCode);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://inventory.psi.ch/DataAccess.asmx/AddPsErrorCode", ReplyAction="*")]
        System.Threading.Tasks.Task AddPsErrorCodeAsync(string tokenId, GWLogger.Inventory.PsErrorCodeInformation psErrorCode);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://inventory.psi.ch/DataAccess.asmx/DeletePsErrorCode", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        void DeletePsErrorCode(string tokenId, string psErrorCodeId, string applicationId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://inventory.psi.ch/DataAccess.asmx/DeletePsErrorCode", ReplyAction="*")]
        System.Threading.Tasks.Task DeletePsErrorCodeAsync(string tokenId, string psErrorCodeId, string applicationId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://inventory.psi.ch/DataAccess.asmx/MassEditorCommonAttributes", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        GWLogger.Inventory.DataField[] MassEditorCommonAttributes(string[] labels);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://inventory.psi.ch/DataAccess.asmx/MassEditorCommonAttributes", ReplyAction="*")]
        System.Threading.Tasks.Task<GWLogger.Inventory.DataField[]> MassEditorCommonAttributesAsync(string[] labels);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://inventory.psi.ch/DataAccess.asmx/MassEdit", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        void MassEdit(string tokenId, string[] labels, GWLogger.Inventory.AttributeField[] fields);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://inventory.psi.ch/DataAccess.asmx/MassEdit", ReplyAction="*")]
        System.Threading.Tasks.Task MassEditAsync(string tokenId, string[] labels, GWLogger.Inventory.AttributeField[] fields);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://inventory.psi.ch/DataAccess.asmx/PrintLabel", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        void PrintLabel(string tokenId, string[] labels);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://inventory.psi.ch/DataAccess.asmx/PrintLabel", ReplyAction="*")]
        System.Threading.Tasks.Task PrintLabelAsync(string tokenId, string[] labels);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://inventory.psi.ch/DataAccess.asmx/ChangePartType", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        void ChangePartType(string tokenId, string psiLabel, int newPartType);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://inventory.psi.ch/DataAccess.asmx/ChangePartType", ReplyAction="*")]
        System.Threading.Tasks.Task ChangePartTypeAsync(string tokenId, string psiLabel, int newPartType);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://inventory.psi.ch/DataAccess.asmx/DeleteParts", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        void DeleteParts(string tokenId, string[] psiLabels);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://inventory.psi.ch/DataAccess.asmx/DeleteParts", ReplyAction="*")]
        System.Threading.Tasks.Task DeletePartsAsync(string tokenId, string[] psiLabels);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://inventory.psi.ch/DataAccess.asmx/GetPartTypeDataClass", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        GWLogger.Inventory.DataClass GetPartTypeDataClass(int partType);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://inventory.psi.ch/DataAccess.asmx/GetPartTypeDataClass", ReplyAction="*")]
        System.Threading.Tasks.Task<GWLogger.Inventory.DataClass> GetPartTypeDataClassAsync(int partType);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://inventory.psi.ch/DataAccess.asmx/SwitchDataClassEffect", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        GWLogger.Inventory.SwitchEffect SwitchDataClassEffect(int partTypeId, int newDataClassId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://inventory.psi.ch/DataAccess.asmx/SwitchDataClassEffect", ReplyAction="*")]
        System.Threading.Tasks.Task<GWLogger.Inventory.SwitchEffect> SwitchDataClassEffectAsync(int partTypeId, int newDataClassId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://inventory.psi.ch/DataAccess.asmx/SwitchDataClass", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        void SwitchDataClass(string tokenId, int partTypeId, int newDataClassId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://inventory.psi.ch/DataAccess.asmx/SwitchDataClass", ReplyAction="*")]
        System.Threading.Tasks.Task SwitchDataClassAsync(string tokenId, int partTypeId, int newDataClassId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://inventory.psi.ch/DataAccess.asmx/GetPartTypesWithDisturbance", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        GWLogger.Inventory.IdValuePair[] GetPartTypesWithDisturbance();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://inventory.psi.ch/DataAccess.asmx/GetPartTypesWithDisturbance", ReplyAction="*")]
        System.Threading.Tasks.Task<GWLogger.Inventory.IdValuePair[]> GetPartTypesWithDisturbanceAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://inventory.psi.ch/DataAccess.asmx/GetPartTypeDisturbance", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        GWLogger.Inventory.Disturbance GetPartTypeDisturbance(int partType);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://inventory.psi.ch/DataAccess.asmx/GetPartTypeDisturbance", ReplyAction="*")]
        System.Threading.Tasks.Task<GWLogger.Inventory.Disturbance> GetPartTypeDisturbanceAsync(int partType);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://inventory.psi.ch/DataAccess.asmx/SwitchDisturbanceEffect", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        GWLogger.Inventory.SwitchEffect SwitchDisturbanceEffect(int partTypeId, int newDisturbanceId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://inventory.psi.ch/DataAccess.asmx/SwitchDisturbanceEffect", ReplyAction="*")]
        System.Threading.Tasks.Task<GWLogger.Inventory.SwitchEffect> SwitchDisturbanceEffectAsync(int partTypeId, int newDisturbanceId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://inventory.psi.ch/DataAccess.asmx/SwitchDisturbance", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        void SwitchDisturbance(string tokenId, int partTypeId, int newDisturbanceId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://inventory.psi.ch/DataAccess.asmx/SwitchDisturbance", ReplyAction="*")]
        System.Threading.Tasks.Task SwitchDisturbanceAsync(string tokenId, int partTypeId, int newDisturbanceId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://inventory.psi.ch/DataAccess.asmx/DuplicateDisturbance", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        int DuplicateDisturbance(string tokenId, int sourceDisturbance, string newName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://inventory.psi.ch/DataAccess.asmx/DuplicateDisturbance", ReplyAction="*")]
        System.Threading.Tasks.Task<int> DuplicateDisturbanceAsync(string tokenId, int sourceDisturbance, string newName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://inventory.psi.ch/DataAccess.asmx/BatchUpdateAttributes", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        void BatchUpdateAttributes(string tokenId, GWLogger.Inventory.PartUpdate[] updates);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://inventory.psi.ch/DataAccess.asmx/BatchUpdateAttributes", ReplyAction="*")]
        System.Threading.Tasks.Task BatchUpdateAttributesAsync(string tokenId, GWLogger.Inventory.PartUpdate[] updates);
        
        // CODEGEN: Parameter 'price' requires additional schema information that cannot be captured using the parameter mode. The specific attribute is 'System.Xml.Serialization.XmlElementAttribute'.
        [System.ServiceModel.OperationContractAttribute(Action="http://inventory.psi.ch/DataAccess.asmx/AddPart", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        GWLogger.Inventory.AddPartResponse AddPart(GWLogger.Inventory.AddPartRequest request);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://inventory.psi.ch/DataAccess.asmx/AddPart", ReplyAction="*")]
        System.Threading.Tasks.Task<GWLogger.Inventory.AddPartResponse> AddPartAsync(GWLogger.Inventory.AddPartRequest request);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://inventory.psi.ch/DataAccess.asmx/PartNextPrefixValue", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        int PartNextPrefixValue(int partType);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://inventory.psi.ch/DataAccess.asmx/PartNextPrefixValue", ReplyAction="*")]
        System.Threading.Tasks.Task<int> PartNextPrefixValueAsync(int partType);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://inventory.psi.ch/DataAccess.asmx/GetStockItems", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        GWLogger.Inventory.ShortPart[] GetStockItems(int partType);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://inventory.psi.ch/DataAccess.asmx/GetStockItems", ReplyAction="*")]
        System.Threading.Tasks.Task<GWLogger.Inventory.ShortPart[]> GetStockItemsAsync(int partType);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://inventory.psi.ch/DataAccess.asmx/PartTypePrefix", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        GWLogger.Inventory.PrefixInformation PartTypePrefix(int partType);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://inventory.psi.ch/DataAccess.asmx/PartTypePrefix", ReplyAction="*")]
        System.Threading.Tasks.Task<GWLogger.Inventory.PrefixInformation> PartTypePrefixAsync(int partType);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://inventory.psi.ch/DataAccess.asmx/GetUserRoles", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        GWLogger.Inventory.UserRoleSummary[] GetUserRoles();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://inventory.psi.ch/DataAccess.asmx/GetUserRoles", ReplyAction="*")]
        System.Threading.Tasks.Task<GWLogger.Inventory.UserRoleSummary[]> GetUserRolesAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://inventory.psi.ch/DataAccess.asmx/GetUserActionLog", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        GWLogger.Inventory.UserAction[] GetUserActionLog(string tokenId, int userToCheck);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://inventory.psi.ch/DataAccess.asmx/GetUserActionLog", ReplyAction="*")]
        System.Threading.Tasks.Task<GWLogger.Inventory.UserAction[]> GetUserActionLogAsync(string tokenId, int userToCheck);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://inventory.psi.ch/DataAccess.asmx/GetLinuxGroups", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        GWLogger.Inventory.ActiveDirectoryGroup[] GetLinuxGroups();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://inventory.psi.ch/DataAccess.asmx/GetLinuxGroups", ReplyAction="*")]
        System.Threading.Tasks.Task<GWLogger.Inventory.ActiveDirectoryGroup[]> GetLinuxGroupsAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://inventory.psi.ch/DataAccess.asmx/GetEditableLinuxGroups", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        string[] GetEditableLinuxGroups(string tokenId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://inventory.psi.ch/DataAccess.asmx/GetEditableLinuxGroups", ReplyAction="*")]
        System.Threading.Tasks.Task<string[]> GetEditableLinuxGroupsAsync(string tokenId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://inventory.psi.ch/DataAccess.asmx/GetLinuxUsers", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        GWLogger.Inventory.ActiveDirectoryUser[] GetLinuxUsers();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://inventory.psi.ch/DataAccess.asmx/GetLinuxUsers", ReplyAction="*")]
        System.Threading.Tasks.Task<GWLogger.Inventory.ActiveDirectoryUser[]> GetLinuxUsersAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://inventory.psi.ch/DataAccess.asmx/GetLinuxGroupMembers", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        GWLogger.Inventory.ActiveDirectoryUser[] GetLinuxGroupMembers(string groupName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://inventory.psi.ch/DataAccess.asmx/GetLinuxGroupMembers", ReplyAction="*")]
        System.Threading.Tasks.Task<GWLogger.Inventory.ActiveDirectoryUser[]> GetLinuxGroupMembersAsync(string groupName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://inventory.psi.ch/DataAccess.asmx/AddLinuxGroupMember", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        void AddLinuxGroupMember(string tokenId, string groupName, string accountName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://inventory.psi.ch/DataAccess.asmx/AddLinuxGroupMember", ReplyAction="*")]
        System.Threading.Tasks.Task AddLinuxGroupMemberAsync(string tokenId, string groupName, string accountName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://inventory.psi.ch/DataAccess.asmx/RemoveLinuxGroupMember", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        void RemoveLinuxGroupMember(string tokenId, string groupName, string accountName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://inventory.psi.ch/DataAccess.asmx/RemoveLinuxGroupMember", ReplyAction="*")]
        System.Threading.Tasks.Task RemoveLinuxGroupMemberAsync(string tokenId, string groupName, string accountName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://inventory.psi.ch/DataAccess.asmx/RestoreUIDb", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        void RestoreUIDb();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://inventory.psi.ch/DataAccess.asmx/RestoreUIDb", ReplyAction="*")]
        System.Threading.Tasks.Task RestoreUIDbAsync();
        
        // CODEGEN: Parameter 'limit' requires additional schema information that cannot be captured using the parameter mode. The specific attribute is 'System.Xml.Serialization.XmlElementAttribute'.
        [System.ServiceModel.OperationContractAttribute(Action="http://inventory.psi.ch/DataAccess.asmx/GetEpicsBootInfoServiceLogs", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        GWLogger.Inventory.GetEpicsBootInfoServiceLogsResponse GetEpicsBootInfoServiceLogs(GWLogger.Inventory.GetEpicsBootInfoServiceLogsRequest request);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://inventory.psi.ch/DataAccess.asmx/GetEpicsBootInfoServiceLogs", ReplyAction="*")]
        System.Threading.Tasks.Task<GWLogger.Inventory.GetEpicsBootInfoServiceLogsResponse> GetEpicsBootInfoServiceLogsAsync(GWLogger.Inventory.GetEpicsBootInfoServiceLogsRequest request);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://inventory.psi.ch/DataAccess.asmx/DeleteEpicsBootInfoServiceLogs", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        void DeleteEpicsBootInfoServiceLogs(string tokenId, int daysToKeep);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://inventory.psi.ch/DataAccess.asmx/DeleteEpicsBootInfoServiceLogs", ReplyAction="*")]
        System.Threading.Tasks.Task DeleteEpicsBootInfoServiceLogsAsync(string tokenId, int daysToKeep);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://inventory.psi.ch/DataAccess.asmx/GetEpicsBootInfoIocList", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        GWLogger.Inventory.EpicsBootInfoIocInfo[] GetEpicsBootInfoIocList();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://inventory.psi.ch/DataAccess.asmx/GetEpicsBootInfoIocList", ReplyAction="*")]
        System.Threading.Tasks.Task<GWLogger.Inventory.EpicsBootInfoIocInfo[]> GetEpicsBootInfoIocListAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://inventory.psi.ch/DataAccess.asmx/DeleteEpicsBootInfoIocRecords", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        void DeleteEpicsBootInfoIocRecords(string tokenId, string ioc, string facility);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://inventory.psi.ch/DataAccess.asmx/DeleteEpicsBootInfoIocRecords", ReplyAction="*")]
        System.Threading.Tasks.Task DeleteEpicsBootInfoIocRecordsAsync(string tokenId, string ioc, string facility);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://inventory.psi.ch/DataAccess.asmx/EraseEpicsBootInfoIoc", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        void EraseEpicsBootInfoIoc(string tokenId, string ioc, string facility);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://inventory.psi.ch/DataAccess.asmx/EraseEpicsBootInfoIoc", ReplyAction="*")]
        System.Threading.Tasks.Task EraseEpicsBootInfoIocAsync(string tokenId, string ioc, string facility);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://inventory.psi.ch/DataAccess.asmx/GetEpicsBootInfoStatusInfo", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        GWLogger.Inventory.EpicsBootInfoStatusInfo GetEpicsBootInfoStatusInfo();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://inventory.psi.ch/DataAccess.asmx/GetEpicsBootInfoStatusInfo", ReplyAction="*")]
        System.Threading.Tasks.Task<GWLogger.Inventory.EpicsBootInfoStatusInfo> GetEpicsBootInfoStatusInfoAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://inventory.psi.ch/DataAccess.asmx/RefreshEpicsBootInfoCache", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        void RefreshEpicsBootInfoCache(string tokenId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://inventory.psi.ch/DataAccess.asmx/RefreshEpicsBootInfoCache", ReplyAction="*")]
        System.Threading.Tasks.Task RefreshEpicsBootInfoCacheAsync(string tokenId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://inventory.psi.ch/DataAccess.asmx/DeleteAllEpicsBootInfoRecordsForFacility", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        void DeleteAllEpicsBootInfoRecordsForFacility(string tokenId, string facility);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://inventory.psi.ch/DataAccess.asmx/DeleteAllEpicsBootInfoRecordsForFacility", ReplyAction="*")]
        System.Threading.Tasks.Task DeleteAllEpicsBootInfoRecordsForFacilityAsync(string tokenId, string facility);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://inventory.psi.ch/DataAccess.asmx/GetEpicsBootInfoFacilityList", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        string[] GetEpicsBootInfoFacilityList();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://inventory.psi.ch/DataAccess.asmx/GetEpicsBootInfoFacilityList", ReplyAction="*")]
        System.Threading.Tasks.Task<string[]> GetEpicsBootInfoFacilityListAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://inventory.psi.ch/DataAccess.asmx/GetMaintenanceSheetList", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        GWLogger.Inventory.SearchResult GetMaintenanceSheetList(string tokenId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://inventory.psi.ch/DataAccess.asmx/GetMaintenanceSheetList", ReplyAction="*")]
        System.Threading.Tasks.Task<GWLogger.Inventory.SearchResult> GetMaintenanceSheetListAsync(string tokenId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://inventory.psi.ch/DataAccess.asmx/GetMaintenanceSheet", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        GWLogger.Inventory.MaintenanceSheet GetMaintenanceSheet(int sheetId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://inventory.psi.ch/DataAccess.asmx/GetMaintenanceSheet", ReplyAction="*")]
        System.Threading.Tasks.Task<GWLogger.Inventory.MaintenanceSheet> GetMaintenanceSheetAsync(int sheetId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://inventory.psi.ch/DataAccess.asmx/AddMaintenanceSheet", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        int AddMaintenanceSheet(string tokenId, GWLogger.Inventory.MaintenanceSheet sheet);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://inventory.psi.ch/DataAccess.asmx/AddMaintenanceSheet", ReplyAction="*")]
        System.Threading.Tasks.Task<int> AddMaintenanceSheetAsync(string tokenId, GWLogger.Inventory.MaintenanceSheet sheet);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://inventory.psi.ch/DataAccess.asmx/DeleteMaintenanceSheet", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        void DeleteMaintenanceSheet(string tokenId, int sheetId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://inventory.psi.ch/DataAccess.asmx/DeleteMaintenanceSheet", ReplyAction="*")]
        System.Threading.Tasks.Task DeleteMaintenanceSheetAsync(string tokenId, int sheetId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://inventory.psi.ch/DataAccess.asmx/UpdateMaintenanceSheet", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        void UpdateMaintenanceSheet(string tokenId, GWLogger.Inventory.MaintenanceSheet sheet);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://inventory.psi.ch/DataAccess.asmx/UpdateMaintenanceSheet", ReplyAction="*")]
        System.Threading.Tasks.Task UpdateMaintenanceSheetAsync(string tokenId, GWLogger.Inventory.MaintenanceSheet sheet);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://inventory.psi.ch/DataAccess.asmx/GetMaintenancePartList", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        GWLogger.Inventory.SearchResult GetMaintenancePartList(int sheetId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://inventory.psi.ch/DataAccess.asmx/GetMaintenancePartList", ReplyAction="*")]
        System.Threading.Tasks.Task<GWLogger.Inventory.SearchResult> GetMaintenancePartListAsync(int sheetId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://inventory.psi.ch/DataAccess.asmx/GetMaintenancePart", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        GWLogger.Inventory.MaintenancePart GetMaintenancePart(int sheetId, string psiLabel);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://inventory.psi.ch/DataAccess.asmx/GetMaintenancePart", ReplyAction="*")]
        System.Threading.Tasks.Task<GWLogger.Inventory.MaintenancePart> GetMaintenancePartAsync(int sheetId, string psiLabel);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://inventory.psi.ch/DataAccess.asmx/AddMaintenancePart", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        void AddMaintenancePart(string tokenId, GWLogger.Inventory.MaintenancePart maintenancePart);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://inventory.psi.ch/DataAccess.asmx/AddMaintenancePart", ReplyAction="*")]
        System.Threading.Tasks.Task AddMaintenancePartAsync(string tokenId, GWLogger.Inventory.MaintenancePart maintenancePart);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://inventory.psi.ch/DataAccess.asmx/UpdateMaintenancePart", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        void UpdateMaintenancePart(string tokenId, GWLogger.Inventory.MaintenancePart maintenancePart);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://inventory.psi.ch/DataAccess.asmx/UpdateMaintenancePart", ReplyAction="*")]
        System.Threading.Tasks.Task UpdateMaintenancePartAsync(string tokenId, GWLogger.Inventory.MaintenancePart maintenancePart);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://inventory.psi.ch/DataAccess.asmx/DeleteMaintenancePart", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        void DeleteMaintenancePart(string tokenId, int sheetId, string psiLabel);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://inventory.psi.ch/DataAccess.asmx/DeleteMaintenancePart", ReplyAction="*")]
        System.Threading.Tasks.Task DeleteMaintenancePartAsync(string tokenId, int sheetId, string psiLabel);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://inventory.psi.ch/DataAccess.asmx/GetWebIocHost", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        string GetWebIocHost();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://inventory.psi.ch/DataAccess.asmx/GetWebIocHost", ReplyAction="*")]
        System.Threading.Tasks.Task<string> GetWebIocHostAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://inventory.psi.ch/DataAccess.asmx/GetPortserverOfNetwork", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        string[] GetPortserverOfNetwork();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://inventory.psi.ch/DataAccess.asmx/GetPortserverOfNetwork", ReplyAction="*")]
        System.Threading.Tasks.Task<string[]> GetPortserverOfNetworkAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://inventory.psi.ch/DataAccess.asmx/GetIocsOfPortserver", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        GWLogger.Inventory.PortserverIoc[] GetIocsOfPortserver(string portserver);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://inventory.psi.ch/DataAccess.asmx/GetIocsOfPortserver", ReplyAction="*")]
        System.Threading.Tasks.Task<GWLogger.Inventory.PortserverIoc[]> GetIocsOfPortserverAsync(string portserver);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://inventory.psi.ch/DataAccess.asmx/GetConnectorMatrixReport", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        GWLogger.Inventory.ConnectorMatrixInformation[] GetConnectorMatrixReport();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://inventory.psi.ch/DataAccess.asmx/GetConnectorMatrixReport", ReplyAction="*")]
        System.Threading.Tasks.Task<GWLogger.Inventory.ConnectorMatrixInformation[]> GetConnectorMatrixReportAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://inventory.psi.ch/DataAccess.asmx/GetDatabaseList", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        GWLogger.Inventory.TableInformation[] GetDatabaseList();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://inventory.psi.ch/DataAccess.asmx/GetDatabaseList", ReplyAction="*")]
        System.Threading.Tasks.Task<GWLogger.Inventory.TableInformation[]> GetDatabaseListAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://inventory.psi.ch/DataAccess.asmx/GetTableFields", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        GWLogger.Inventory.TableDetails GetTableFields(string tableName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://inventory.psi.ch/DataAccess.asmx/GetTableFields", ReplyAction="*")]
        System.Threading.Tasks.Task<GWLogger.Inventory.TableDetails> GetTableFieldsAsync(string tableName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://inventory.psi.ch/DataAccess.asmx/ExecutePublicQuery", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        GWLogger.Inventory.SearchResult ExecutePublicQuery(string query);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://inventory.psi.ch/DataAccess.asmx/ExecutePublicQuery", ReplyAction="*")]
        System.Threading.Tasks.Task<GWLogger.Inventory.SearchResult> ExecutePublicQueryAsync(string query);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://inventory.psi.ch/DataAccess.asmx/GetDisturbanceList", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        GWLogger.Inventory.SearchResult GetDisturbanceList(string search);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://inventory.psi.ch/DataAccess.asmx/GetDisturbanceList", ReplyAction="*")]
        System.Threading.Tasks.Task<GWLogger.Inventory.SearchResult> GetDisturbanceListAsync(string search);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://inventory.psi.ch/DataAccess.asmx/GetPartDisturbances", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        GWLogger.Inventory.SearchResult GetPartDisturbances(string psiLabel);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://inventory.psi.ch/DataAccess.asmx/GetPartDisturbances", ReplyAction="*")]
        System.Threading.Tasks.Task<GWLogger.Inventory.SearchResult> GetPartDisturbancesAsync(string psiLabel);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://inventory.psi.ch/DataAccess.asmx/GetPartDisturbance", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        GWLogger.Inventory.PartDisturbance GetPartDisturbance(int disturbanceId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://inventory.psi.ch/DataAccess.asmx/GetPartDisturbance", ReplyAction="*")]
        System.Threading.Tasks.Task<GWLogger.Inventory.PartDisturbance> GetPartDisturbanceAsync(int disturbanceId);
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(WrapperName="UploadPartDocument", WrapperNamespace="http://inventory.psi.ch/DataAccess.asmx", IsWrapped=true)]
    public partial class UploadPartDocumentRequest {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://inventory.psi.ch/DataAccess.asmx", Order=0)]
        public string tokenId;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://inventory.psi.ch/DataAccess.asmx", Order=1)]
        public string psiLabel;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://inventory.psi.ch/DataAccess.asmx", Order=2)]
        public string comment;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://inventory.psi.ch/DataAccess.asmx", Order=3)]
        public string filename;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://inventory.psi.ch/DataAccess.asmx", Order=4)]
        [System.Xml.Serialization.XmlElementAttribute(DataType="base64Binary")]
        public byte[] fileContent;
        
        public UploadPartDocumentRequest() {
        }
        
        public UploadPartDocumentRequest(string tokenId, string psiLabel, string comment, string filename, byte[] fileContent) {
            this.tokenId = tokenId;
            this.psiLabel = psiLabel;
            this.comment = comment;
            this.filename = filename;
            this.fileContent = fileContent;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(WrapperName="UploadPartDocumentResponse", WrapperNamespace="http://inventory.psi.ch/DataAccess.asmx", IsWrapped=true)]
    public partial class UploadPartDocumentResponse {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://inventory.psi.ch/DataAccess.asmx", Order=0)]
        public string UploadPartDocumentResult;
        
        public UploadPartDocumentResponse() {
        }
        
        public UploadPartDocumentResponse(string UploadPartDocumentResult) {
            this.UploadPartDocumentResult = UploadPartDocumentResult;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(WrapperName="UploadPartTypeDocument", WrapperNamespace="http://inventory.psi.ch/DataAccess.asmx", IsWrapped=true)]
    public partial class UploadPartTypeDocumentRequest {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://inventory.psi.ch/DataAccess.asmx", Order=0)]
        public string tokenId;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://inventory.psi.ch/DataAccess.asmx", Order=1)]
        public string psiLabel;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://inventory.psi.ch/DataAccess.asmx", Order=2)]
        public string comment;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://inventory.psi.ch/DataAccess.asmx", Order=3)]
        public string filename;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://inventory.psi.ch/DataAccess.asmx", Order=4)]
        [System.Xml.Serialization.XmlElementAttribute(DataType="base64Binary")]
        public byte[] fileContent;
        
        public UploadPartTypeDocumentRequest() {
        }
        
        public UploadPartTypeDocumentRequest(string tokenId, string psiLabel, string comment, string filename, byte[] fileContent) {
            this.tokenId = tokenId;
            this.psiLabel = psiLabel;
            this.comment = comment;
            this.filename = filename;
            this.fileContent = fileContent;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(WrapperName="UploadPartTypeDocumentResponse", WrapperNamespace="http://inventory.psi.ch/DataAccess.asmx", IsWrapped=true)]
    public partial class UploadPartTypeDocumentResponse {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://inventory.psi.ch/DataAccess.asmx", Order=0)]
        public string UploadPartTypeDocumentResult;
        
        public UploadPartTypeDocumentResponse() {
        }
        
        public UploadPartTypeDocumentResponse(string UploadPartTypeDocumentResult) {
            this.UploadPartTypeDocumentResult = UploadPartTypeDocumentResult;
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.3163.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://inventory.psi.ch/DataAccess.asmx")]
    public partial class AttributeField : object, System.ComponentModel.INotifyPropertyChanged {
        
        private string nameField;
        
        private string valueField;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=0)]
        public string Name {
            get {
                return this.nameField;
            }
            set {
                this.nameField = value;
                this.RaisePropertyChanged("Name");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=1)]
        public string Value {
            get {
                return this.valueField;
            }
            set {
                this.valueField = value;
                this.RaisePropertyChanged("Value");
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.3163.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://inventory.psi.ch/DataAccess.asmx")]
    public partial class PartDisturbance : object, System.ComponentModel.INotifyPropertyChanged {
        
        private int idField;
        
        private int authorField;
        
        private string authorNameField;
        
        private System.DateTime reportedOnField;
        
        private DataField[] fieldsField;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=0)]
        public int Id {
            get {
                return this.idField;
            }
            set {
                this.idField = value;
                this.RaisePropertyChanged("Id");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=1)]
        public int Author {
            get {
                return this.authorField;
            }
            set {
                this.authorField = value;
                this.RaisePropertyChanged("Author");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=2)]
        public string AuthorName {
            get {
                return this.authorNameField;
            }
            set {
                this.authorNameField = value;
                this.RaisePropertyChanged("AuthorName");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=3)]
        public System.DateTime ReportedOn {
            get {
                return this.reportedOnField;
            }
            set {
                this.reportedOnField = value;
                this.RaisePropertyChanged("ReportedOn");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlArrayAttribute(Order=4)]
        public DataField[] Fields {
            get {
                return this.fieldsField;
            }
            set {
                this.fieldsField = value;
                this.RaisePropertyChanged("Fields");
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.3163.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://inventory.psi.ch/DataAccess.asmx")]
    public partial class DataField : object, System.ComponentModel.INotifyPropertyChanged {
        
        private int idField;
        
        private string nameField;
        
        private string typeNameField;
        
        private IdValuePair[] typeParamField;
        
        private string valueField;
        
        private bool readOnlyField;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=0)]
        public int Id {
            get {
                return this.idField;
            }
            set {
                this.idField = value;
                this.RaisePropertyChanged("Id");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=1)]
        public string Name {
            get {
                return this.nameField;
            }
            set {
                this.nameField = value;
                this.RaisePropertyChanged("Name");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=2)]
        public string TypeName {
            get {
                return this.typeNameField;
            }
            set {
                this.typeNameField = value;
                this.RaisePropertyChanged("TypeName");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlArrayAttribute(Order=3)]
        public IdValuePair[] TypeParam {
            get {
                return this.typeParamField;
            }
            set {
                this.typeParamField = value;
                this.RaisePropertyChanged("TypeParam");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=4)]
        public string Value {
            get {
                return this.valueField;
            }
            set {
                this.valueField = value;
                this.RaisePropertyChanged("Value");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=5)]
        public bool ReadOnly {
            get {
                return this.readOnlyField;
            }
            set {
                this.readOnlyField = value;
                this.RaisePropertyChanged("ReadOnly");
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.3163.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://inventory.psi.ch/DataAccess.asmx")]
    public partial class IdValuePair : object, System.ComponentModel.INotifyPropertyChanged {
        
        private string idField;
        
        private string valueField;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=0)]
        public string Id {
            get {
                return this.idField;
            }
            set {
                this.idField = value;
                this.RaisePropertyChanged("Id");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=1)]
        public string Value {
            get {
                return this.valueField;
            }
            set {
                this.valueField = value;
                this.RaisePropertyChanged("Value");
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.3163.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://inventory.psi.ch/DataAccess.asmx")]
    public partial class TableForeignKey : object, System.ComponentModel.INotifyPropertyChanged {
        
        private string columnField;
        
        private string foreignTableField;
        
        private string foreignColumnField;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=0)]
        public string Column {
            get {
                return this.columnField;
            }
            set {
                this.columnField = value;
                this.RaisePropertyChanged("Column");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=1)]
        public string ForeignTable {
            get {
                return this.foreignTableField;
            }
            set {
                this.foreignTableField = value;
                this.RaisePropertyChanged("ForeignTable");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=2)]
        public string ForeignColumn {
            get {
                return this.foreignColumnField;
            }
            set {
                this.foreignColumnField = value;
                this.RaisePropertyChanged("ForeignColumn");
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.3163.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://inventory.psi.ch/DataAccess.asmx")]
    public partial class TableField : object, System.ComponentModel.INotifyPropertyChanged {
        
        private string nameField;
        
        private string dataTypeField;
        
        private System.Nullable<int> lengthField;
        
        private string nullableField;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=0)]
        public string Name {
            get {
                return this.nameField;
            }
            set {
                this.nameField = value;
                this.RaisePropertyChanged("Name");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=1)]
        public string DataType {
            get {
                return this.dataTypeField;
            }
            set {
                this.dataTypeField = value;
                this.RaisePropertyChanged("DataType");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true, Order=2)]
        public System.Nullable<int> Length {
            get {
                return this.lengthField;
            }
            set {
                this.lengthField = value;
                this.RaisePropertyChanged("Length");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=3)]
        public string Nullable {
            get {
                return this.nullableField;
            }
            set {
                this.nullableField = value;
                this.RaisePropertyChanged("Nullable");
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.3163.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://inventory.psi.ch/DataAccess.asmx")]
    public partial class TableDetails : object, System.ComponentModel.INotifyPropertyChanged {
        
        private TableField[] fieldsField;
        
        private TableForeignKey[] foreignKeysField;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlArrayAttribute(Order=0)]
        public TableField[] Fields {
            get {
                return this.fieldsField;
            }
            set {
                this.fieldsField = value;
                this.RaisePropertyChanged("Fields");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlArrayAttribute(Order=1)]
        public TableForeignKey[] ForeignKeys {
            get {
                return this.foreignKeysField;
            }
            set {
                this.foreignKeysField = value;
                this.RaisePropertyChanged("ForeignKeys");
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.3163.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://inventory.psi.ch/DataAccess.asmx")]
    public partial class TableInformation : object, System.ComponentModel.INotifyPropertyChanged {
        
        private string nameField;
        
        private string typeField;
        
        private string descriptionField;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=0)]
        public string Name {
            get {
                return this.nameField;
            }
            set {
                this.nameField = value;
                this.RaisePropertyChanged("Name");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=1)]
        public string Type {
            get {
                return this.typeField;
            }
            set {
                this.typeField = value;
                this.RaisePropertyChanged("Type");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=2)]
        public string Description {
            get {
                return this.descriptionField;
            }
            set {
                this.descriptionField = value;
                this.RaisePropertyChanged("Description");
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.3163.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://inventory.psi.ch/DataAccess.asmx")]
    public partial class ConnectorMatrixInformation : object, System.ComponentModel.INotifyPropertyChanged {
        
        private int idField;
        
        private string nameField;
        
        private IdValuePair[] usedByField;
        
        private IdValuePair[] childConnectorsField;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=0)]
        public int Id {
            get {
                return this.idField;
            }
            set {
                this.idField = value;
                this.RaisePropertyChanged("Id");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=1)]
        public string Name {
            get {
                return this.nameField;
            }
            set {
                this.nameField = value;
                this.RaisePropertyChanged("Name");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlArrayAttribute(Order=2)]
        public IdValuePair[] UsedBy {
            get {
                return this.usedByField;
            }
            set {
                this.usedByField = value;
                this.RaisePropertyChanged("UsedBy");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlArrayAttribute(Order=3)]
        public IdValuePair[] ChildConnectors {
            get {
                return this.childConnectorsField;
            }
            set {
                this.childConnectorsField = value;
                this.RaisePropertyChanged("ChildConnectors");
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.3163.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://inventory.psi.ch/DataAccess.asmx")]
    public partial class PortserverIoc : object, System.ComponentModel.INotifyPropertyChanged {
        
        private int portField;
        
        private string iocField;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=0)]
        public int Port {
            get {
                return this.portField;
            }
            set {
                this.portField = value;
                this.RaisePropertyChanged("Port");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=1)]
        public string Ioc {
            get {
                return this.iocField;
            }
            set {
                this.iocField = value;
                this.RaisePropertyChanged("Ioc");
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.3163.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://inventory.psi.ch/DataAccess.asmx")]
    public partial class MaintenancePart : object, System.ComponentModel.INotifyPropertyChanged {
        
        private string psiLabelField;
        
        private int sheetIdField;
        
        private int quantityField;
        
        private string descriptionField;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=0)]
        public string PsiLabel {
            get {
                return this.psiLabelField;
            }
            set {
                this.psiLabelField = value;
                this.RaisePropertyChanged("PsiLabel");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=1)]
        public int SheetId {
            get {
                return this.sheetIdField;
            }
            set {
                this.sheetIdField = value;
                this.RaisePropertyChanged("SheetId");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=2)]
        public int Quantity {
            get {
                return this.quantityField;
            }
            set {
                this.quantityField = value;
                this.RaisePropertyChanged("Quantity");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=3)]
        public string Description {
            get {
                return this.descriptionField;
            }
            set {
                this.descriptionField = value;
                this.RaisePropertyChanged("Description");
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.3163.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://inventory.psi.ch/DataAccess.asmx")]
    public partial class MaintenanceSheet : object, System.ComponentModel.INotifyPropertyChanged {
        
        private int idField;
        
        private System.Nullable<int> objectTypeField;
        
        private int frequenceField;
        
        private string nameField;
        
        private string descriptionField;
        
        private string alertEmailField;
        
        private string onlyOnInstalledField;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=0)]
        public int Id {
            get {
                return this.idField;
            }
            set {
                this.idField = value;
                this.RaisePropertyChanged("Id");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true, Order=1)]
        public System.Nullable<int> ObjectType {
            get {
                return this.objectTypeField;
            }
            set {
                this.objectTypeField = value;
                this.RaisePropertyChanged("ObjectType");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=2)]
        public int Frequence {
            get {
                return this.frequenceField;
            }
            set {
                this.frequenceField = value;
                this.RaisePropertyChanged("Frequence");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=3)]
        public string Name {
            get {
                return this.nameField;
            }
            set {
                this.nameField = value;
                this.RaisePropertyChanged("Name");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=4)]
        public string Description {
            get {
                return this.descriptionField;
            }
            set {
                this.descriptionField = value;
                this.RaisePropertyChanged("Description");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=5)]
        public string AlertEmail {
            get {
                return this.alertEmailField;
            }
            set {
                this.alertEmailField = value;
                this.RaisePropertyChanged("AlertEmail");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=6)]
        public string OnlyOnInstalled {
            get {
                return this.onlyOnInstalledField;
            }
            set {
                this.onlyOnInstalledField = value;
                this.RaisePropertyChanged("OnlyOnInstalled");
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.3163.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://inventory.psi.ch/DataAccess.asmx")]
    public partial class EpicsBootInfoStatusInfo : object, System.ComponentModel.INotifyPropertyChanged {
        
        private string managementUrlField;
        
        private string buildVersionField;
        
        private System.DateTime buildTimeField;
        
        private System.DateTime applicationStartupField;
        
        private int channelCacheEntriesCountField;
        
        private System.DateTime channelCacheRefreshTimeField;
        
        private System.DateTime channelCacheLastUpdateField;
        
        private string clusterMainNodeField;
        
        private System.DateTime statusTimeStampField;
        
        private ulong uptimeSecondsField;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=0)]
        public string ManagementUrl {
            get {
                return this.managementUrlField;
            }
            set {
                this.managementUrlField = value;
                this.RaisePropertyChanged("ManagementUrl");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=1)]
        public string BuildVersion {
            get {
                return this.buildVersionField;
            }
            set {
                this.buildVersionField = value;
                this.RaisePropertyChanged("BuildVersion");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=2)]
        public System.DateTime BuildTime {
            get {
                return this.buildTimeField;
            }
            set {
                this.buildTimeField = value;
                this.RaisePropertyChanged("BuildTime");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=3)]
        public System.DateTime ApplicationStartup {
            get {
                return this.applicationStartupField;
            }
            set {
                this.applicationStartupField = value;
                this.RaisePropertyChanged("ApplicationStartup");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=4)]
        public int ChannelCacheEntriesCount {
            get {
                return this.channelCacheEntriesCountField;
            }
            set {
                this.channelCacheEntriesCountField = value;
                this.RaisePropertyChanged("ChannelCacheEntriesCount");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=5)]
        public System.DateTime ChannelCacheRefreshTime {
            get {
                return this.channelCacheRefreshTimeField;
            }
            set {
                this.channelCacheRefreshTimeField = value;
                this.RaisePropertyChanged("ChannelCacheRefreshTime");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=6)]
        public System.DateTime ChannelCacheLastUpdate {
            get {
                return this.channelCacheLastUpdateField;
            }
            set {
                this.channelCacheLastUpdateField = value;
                this.RaisePropertyChanged("ChannelCacheLastUpdate");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=7)]
        public string ClusterMainNode {
            get {
                return this.clusterMainNodeField;
            }
            set {
                this.clusterMainNodeField = value;
                this.RaisePropertyChanged("ClusterMainNode");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=8)]
        public System.DateTime StatusTimeStamp {
            get {
                return this.statusTimeStampField;
            }
            set {
                this.statusTimeStampField = value;
                this.RaisePropertyChanged("StatusTimeStamp");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=9)]
        public ulong UptimeSeconds {
            get {
                return this.uptimeSecondsField;
            }
            set {
                this.uptimeSecondsField = value;
                this.RaisePropertyChanged("UptimeSeconds");
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.3163.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://inventory.psi.ch/DataAccess.asmx")]
    public partial class EpicsBootInfoIocInfo : object, System.ComponentModel.INotifyPropertyChanged {
        
        private string iocField;
        
        private string facilityField;
        
        private System.Nullable<System.DateTime> lastBootedField;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=0)]
        public string Ioc {
            get {
                return this.iocField;
            }
            set {
                this.iocField = value;
                this.RaisePropertyChanged("Ioc");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=1)]
        public string Facility {
            get {
                return this.facilityField;
            }
            set {
                this.facilityField = value;
                this.RaisePropertyChanged("Facility");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true, Order=2)]
        public System.Nullable<System.DateTime> LastBooted {
            get {
                return this.lastBootedField;
            }
            set {
                this.lastBootedField = value;
                this.RaisePropertyChanged("LastBooted");
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.3163.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://inventory.psi.ch/DataAccess.asmx")]
    public partial class EpicsBootInfoServiceLogEntry : object, System.ComponentModel.INotifyPropertyChanged {
        
        private int idField;
        
        private System.DateTime timeStampField;
        
        private string sourceField;
        
        private string eventTypeField;
        
        private string eventIdField;
        
        private string messageField;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=0)]
        public int Id {
            get {
                return this.idField;
            }
            set {
                this.idField = value;
                this.RaisePropertyChanged("Id");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=1)]
        public System.DateTime TimeStamp {
            get {
                return this.timeStampField;
            }
            set {
                this.timeStampField = value;
                this.RaisePropertyChanged("TimeStamp");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=2)]
        public string Source {
            get {
                return this.sourceField;
            }
            set {
                this.sourceField = value;
                this.RaisePropertyChanged("Source");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=3)]
        public string EventType {
            get {
                return this.eventTypeField;
            }
            set {
                this.eventTypeField = value;
                this.RaisePropertyChanged("EventType");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=4)]
        public string EventId {
            get {
                return this.eventIdField;
            }
            set {
                this.eventIdField = value;
                this.RaisePropertyChanged("EventId");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=5)]
        public string Message {
            get {
                return this.messageField;
            }
            set {
                this.messageField = value;
                this.RaisePropertyChanged("Message");
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.3163.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://inventory.psi.ch/DataAccess.asmx")]
    public partial class ActiveDirectoryUser : object, System.ComponentModel.INotifyPropertyChanged {
        
        private string samAccountNameField;
        
        private string surnameField;
        
        private string givenNameField;
        
        private string emailField;
        
        private string departmentField;
        
        private string unixUidField;
        
        private string unixGidField;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=0)]
        public string SamAccountName {
            get {
                return this.samAccountNameField;
            }
            set {
                this.samAccountNameField = value;
                this.RaisePropertyChanged("SamAccountName");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=1)]
        public string Surname {
            get {
                return this.surnameField;
            }
            set {
                this.surnameField = value;
                this.RaisePropertyChanged("Surname");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=2)]
        public string GivenName {
            get {
                return this.givenNameField;
            }
            set {
                this.givenNameField = value;
                this.RaisePropertyChanged("GivenName");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=3)]
        public string Email {
            get {
                return this.emailField;
            }
            set {
                this.emailField = value;
                this.RaisePropertyChanged("Email");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=4)]
        public string Department {
            get {
                return this.departmentField;
            }
            set {
                this.departmentField = value;
                this.RaisePropertyChanged("Department");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=5)]
        public string UnixUid {
            get {
                return this.unixUidField;
            }
            set {
                this.unixUidField = value;
                this.RaisePropertyChanged("UnixUid");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=6)]
        public string UnixGid {
            get {
                return this.unixGidField;
            }
            set {
                this.unixGidField = value;
                this.RaisePropertyChanged("UnixGid");
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.3163.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://inventory.psi.ch/DataAccess.asmx")]
    public partial class ActiveDirectoryGroup : object, System.ComponentModel.INotifyPropertyChanged {
        
        private string samAccountNameField;
        
        private string unixGidField;
        
        private string descriptionField;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=0)]
        public string SamAccountName {
            get {
                return this.samAccountNameField;
            }
            set {
                this.samAccountNameField = value;
                this.RaisePropertyChanged("SamAccountName");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=1)]
        public string UnixGid {
            get {
                return this.unixGidField;
            }
            set {
                this.unixGidField = value;
                this.RaisePropertyChanged("UnixGid");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=2)]
        public string Description {
            get {
                return this.descriptionField;
            }
            set {
                this.descriptionField = value;
                this.RaisePropertyChanged("Description");
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.3163.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://inventory.psi.ch/DataAccess.asmx")]
    public partial class UserAction : object, System.ComponentModel.INotifyPropertyChanged {
        
        private int idField;
        
        private string userField;
        
        private System.Nullable<System.DateTime> doneOnField;
        
        private string actionField;
        
        private IdValuePair[] parametersField;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=0)]
        public int Id {
            get {
                return this.idField;
            }
            set {
                this.idField = value;
                this.RaisePropertyChanged("Id");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=1)]
        public string User {
            get {
                return this.userField;
            }
            set {
                this.userField = value;
                this.RaisePropertyChanged("User");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true, Order=2)]
        public System.Nullable<System.DateTime> DoneOn {
            get {
                return this.doneOnField;
            }
            set {
                this.doneOnField = value;
                this.RaisePropertyChanged("DoneOn");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=3)]
        public string Action {
            get {
                return this.actionField;
            }
            set {
                this.actionField = value;
                this.RaisePropertyChanged("Action");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlArrayAttribute(Order=4)]
        public IdValuePair[] Parameters {
            get {
                return this.parametersField;
            }
            set {
                this.parametersField = value;
                this.RaisePropertyChanged("Parameters");
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.3163.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://inventory.psi.ch/DataAccess.asmx")]
    public partial class UserRoleSummary : object, System.ComponentModel.INotifyPropertyChanged {
        
        private string userField;
        
        private string accessField;
        
        private string parameterField;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=0)]
        public string User {
            get {
                return this.userField;
            }
            set {
                this.userField = value;
                this.RaisePropertyChanged("User");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=1)]
        public string Access {
            get {
                return this.accessField;
            }
            set {
                this.accessField = value;
                this.RaisePropertyChanged("Access");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=2)]
        public string Parameter {
            get {
                return this.parameterField;
            }
            set {
                this.parameterField = value;
                this.RaisePropertyChanged("Parameter");
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.3163.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://inventory.psi.ch/DataAccess.asmx")]
    public partial class ShortPart : object, System.ComponentModel.INotifyPropertyChanged {
        
        private string psiLabelField;
        
        private int partTypeField;
        
        private string partTypeNameField;
        
        private System.Nullable<int> responsibleField;
        
        private string responsibleNameField;
        
        private System.Nullable<int> locationField;
        
        private string locationPathField;
        
        private string usageTypeField;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=0)]
        public string PsiLabel {
            get {
                return this.psiLabelField;
            }
            set {
                this.psiLabelField = value;
                this.RaisePropertyChanged("PsiLabel");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=1)]
        public int PartType {
            get {
                return this.partTypeField;
            }
            set {
                this.partTypeField = value;
                this.RaisePropertyChanged("PartType");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=2)]
        public string PartTypeName {
            get {
                return this.partTypeNameField;
            }
            set {
                this.partTypeNameField = value;
                this.RaisePropertyChanged("PartTypeName");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true, Order=3)]
        public System.Nullable<int> Responsible {
            get {
                return this.responsibleField;
            }
            set {
                this.responsibleField = value;
                this.RaisePropertyChanged("Responsible");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=4)]
        public string ResponsibleName {
            get {
                return this.responsibleNameField;
            }
            set {
                this.responsibleNameField = value;
                this.RaisePropertyChanged("ResponsibleName");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true, Order=5)]
        public System.Nullable<int> Location {
            get {
                return this.locationField;
            }
            set {
                this.locationField = value;
                this.RaisePropertyChanged("Location");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=6)]
        public string LocationPath {
            get {
                return this.locationPathField;
            }
            set {
                this.locationPathField = value;
                this.RaisePropertyChanged("LocationPath");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=7)]
        public string UsageType {
            get {
                return this.usageTypeField;
            }
            set {
                this.usageTypeField = value;
                this.RaisePropertyChanged("UsageType");
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.3163.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://inventory.psi.ch/DataAccess.asmx")]
    public partial class PartUpdate : object, System.ComponentModel.INotifyPropertyChanged {
        
        private AttributeField[] fieldsField;
        
        private string psiLabelField;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlArrayAttribute(Order=0)]
        public AttributeField[] Fields {
            get {
                return this.fieldsField;
            }
            set {
                this.fieldsField = value;
                this.RaisePropertyChanged("Fields");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=1)]
        public string PsiLabel {
            get {
                return this.psiLabelField;
            }
            set {
                this.psiLabelField = value;
                this.RaisePropertyChanged("PsiLabel");
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.3163.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://inventory.psi.ch/DataAccess.asmx")]
    public partial class SwitchEffect : object, System.ComponentModel.INotifyPropertyChanged {
        
        private string[] droppedField;
        
        private string[] keptField;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlArrayAttribute(Order=0)]
        public string[] Dropped {
            get {
                return this.droppedField;
            }
            set {
                this.droppedField = value;
                this.RaisePropertyChanged("Dropped");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlArrayAttribute(Order=1)]
        public string[] Kept {
            get {
                return this.keptField;
            }
            set {
                this.keptField = value;
                this.RaisePropertyChanged("Kept");
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.3163.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://inventory.psi.ch/DataAccess.asmx")]
    public partial class PsErrorCodeInformation : object, System.ComponentModel.INotifyPropertyChanged {
        
        private string idField;
        
        private string valueField;
        
        private string applicationField;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=0)]
        public string Id {
            get {
                return this.idField;
            }
            set {
                this.idField = value;
                this.RaisePropertyChanged("Id");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=1)]
        public string Value {
            get {
                return this.valueField;
            }
            set {
                this.valueField = value;
                this.RaisePropertyChanged("Value");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=2)]
        public string Application {
            get {
                return this.applicationField;
            }
            set {
                this.applicationField = value;
                this.RaisePropertyChanged("Application");
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.3163.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://inventory.psi.ch/DataAccess.asmx")]
    public partial class DisturbanceField : object, System.ComponentModel.INotifyPropertyChanged {
        
        private int idField;
        
        private string nameField;
        
        private int dataTypeField;
        
        private string paramField;
        
        private string visibleOnListField;
        
        private string helpTextField;
        
        private System.Nullable<int> positionField;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=0)]
        public int Id {
            get {
                return this.idField;
            }
            set {
                this.idField = value;
                this.RaisePropertyChanged("Id");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=1)]
        public string Name {
            get {
                return this.nameField;
            }
            set {
                this.nameField = value;
                this.RaisePropertyChanged("Name");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=2)]
        public int DataType {
            get {
                return this.dataTypeField;
            }
            set {
                this.dataTypeField = value;
                this.RaisePropertyChanged("DataType");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=3)]
        public string Param {
            get {
                return this.paramField;
            }
            set {
                this.paramField = value;
                this.RaisePropertyChanged("Param");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=4)]
        public string VisibleOnList {
            get {
                return this.visibleOnListField;
            }
            set {
                this.visibleOnListField = value;
                this.RaisePropertyChanged("VisibleOnList");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=5)]
        public string HelpText {
            get {
                return this.helpTextField;
            }
            set {
                this.helpTextField = value;
                this.RaisePropertyChanged("HelpText");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true, Order=6)]
        public System.Nullable<int> Position {
            get {
                return this.positionField;
            }
            set {
                this.positionField = value;
                this.RaisePropertyChanged("Position");
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.3163.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://inventory.psi.ch/DataAccess.asmx")]
    public partial class Disturbance : object, System.ComponentModel.INotifyPropertyChanged {
        
        private int idField;
        
        private string nameField;
        
        private string emailField;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=0)]
        public int Id {
            get {
                return this.idField;
            }
            set {
                this.idField = value;
                this.RaisePropertyChanged("Id");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=1)]
        public string Name {
            get {
                return this.nameField;
            }
            set {
                this.nameField = value;
                this.RaisePropertyChanged("Name");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=2)]
        public string Email {
            get {
                return this.emailField;
            }
            set {
                this.emailField = value;
                this.RaisePropertyChanged("Email");
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.3163.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://inventory.psi.ch/DataAccess.asmx")]
    public partial class PsiGroup : object, System.ComponentModel.INotifyPropertyChanged {
        
        private int idField;
        
        private string nameField;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=0)]
        public int Id {
            get {
                return this.idField;
            }
            set {
                this.idField = value;
                this.RaisePropertyChanged("Id");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=1)]
        public string Name {
            get {
                return this.nameField;
            }
            set {
                this.nameField = value;
                this.RaisePropertyChanged("Name");
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.3163.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://inventory.psi.ch/DataAccess.asmx")]
    public partial class RoleType : object, System.ComponentModel.INotifyPropertyChanged {
        
        private int idField;
        
        private string labelField;
        
        private string nameField;
        
        private IdValuePair[] parametersField;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=0)]
        public int Id {
            get {
                return this.idField;
            }
            set {
                this.idField = value;
                this.RaisePropertyChanged("Id");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=1)]
        public string Label {
            get {
                return this.labelField;
            }
            set {
                this.labelField = value;
                this.RaisePropertyChanged("Label");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=2)]
        public string Name {
            get {
                return this.nameField;
            }
            set {
                this.nameField = value;
                this.RaisePropertyChanged("Name");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlArrayAttribute(Order=3)]
        public IdValuePair[] Parameters {
            get {
                return this.parametersField;
            }
            set {
                this.parametersField = value;
                this.RaisePropertyChanged("Parameters");
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.3163.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://inventory.psi.ch/DataAccess.asmx")]
    public partial class ConnectorType : object, System.ComponentModel.INotifyPropertyChanged {
        
        private int idField;
        
        private string nameField;
        
        private string commentsField;
        
        private string roleField;
        
        private System.Nullable<int> cableDataField;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=0)]
        public int Id {
            get {
                return this.idField;
            }
            set {
                this.idField = value;
                this.RaisePropertyChanged("Id");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=1)]
        public string Name {
            get {
                return this.nameField;
            }
            set {
                this.nameField = value;
                this.RaisePropertyChanged("Name");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=2)]
        public string Comments {
            get {
                return this.commentsField;
            }
            set {
                this.commentsField = value;
                this.RaisePropertyChanged("Comments");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=3)]
        public string Role {
            get {
                return this.roleField;
            }
            set {
                this.roleField = value;
                this.RaisePropertyChanged("Role");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true, Order=4)]
        public System.Nullable<int> CableData {
            get {
                return this.cableDataField;
            }
            set {
                this.cableDataField = value;
                this.RaisePropertyChanged("CableData");
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.3163.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://inventory.psi.ch/DataAccess.asmx")]
    public partial class DataClass : object, System.ComponentModel.INotifyPropertyChanged {
        
        private int idField;
        
        private string nameField;
        
        private System.Nullable<int> parentField;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=0)]
        public int Id {
            get {
                return this.idField;
            }
            set {
                this.idField = value;
                this.RaisePropertyChanged("Id");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=1)]
        public string Name {
            get {
                return this.nameField;
            }
            set {
                this.nameField = value;
                this.RaisePropertyChanged("Name");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true, Order=2)]
        public System.Nullable<int> Parent {
            get {
                return this.parentField;
            }
            set {
                this.parentField = value;
                this.RaisePropertyChanged("Parent");
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.3163.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://inventory.psi.ch/DataAccess.asmx")]
    public partial class PartTypeShort : object, System.ComponentModel.INotifyPropertyChanged {
        
        private int idField;
        
        private string nameField;
        
        private string commentsField;
        
        private System.Nullable<int> dataClassField;
        
        private System.Nullable<int> companyField;
        
        private int prefixField;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=0)]
        public int Id {
            get {
                return this.idField;
            }
            set {
                this.idField = value;
                this.RaisePropertyChanged("Id");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=1)]
        public string Name {
            get {
                return this.nameField;
            }
            set {
                this.nameField = value;
                this.RaisePropertyChanged("Name");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=2)]
        public string Comments {
            get {
                return this.commentsField;
            }
            set {
                this.commentsField = value;
                this.RaisePropertyChanged("Comments");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true, Order=3)]
        public System.Nullable<int> DataClass {
            get {
                return this.dataClassField;
            }
            set {
                this.dataClassField = value;
                this.RaisePropertyChanged("DataClass");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true, Order=4)]
        public System.Nullable<int> Company {
            get {
                return this.companyField;
            }
            set {
                this.companyField = value;
                this.RaisePropertyChanged("Company");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=5)]
        public int Prefix {
            get {
                return this.prefixField;
            }
            set {
                this.prefixField = value;
                this.RaisePropertyChanged("Prefix");
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.3163.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://inventory.psi.ch/DataAccess.asmx")]
    public partial class PartDocumentInformation : object, System.ComponentModel.INotifyPropertyChanged {
        
        private string linkField;
        
        private string descriptionField;
        
        private System.Nullable<System.DateTime> linkedOnField;
        
        private string authorField;
        
        private string linkTypeField;
        
        private string filenameField;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=0)]
        public string Link {
            get {
                return this.linkField;
            }
            set {
                this.linkField = value;
                this.RaisePropertyChanged("Link");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=1)]
        public string Description {
            get {
                return this.descriptionField;
            }
            set {
                this.descriptionField = value;
                this.RaisePropertyChanged("Description");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true, Order=2)]
        public System.Nullable<System.DateTime> LinkedOn {
            get {
                return this.linkedOnField;
            }
            set {
                this.linkedOnField = value;
                this.RaisePropertyChanged("LinkedOn");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=3)]
        public string Author {
            get {
                return this.authorField;
            }
            set {
                this.authorField = value;
                this.RaisePropertyChanged("Author");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=4)]
        public string LinkType {
            get {
                return this.linkTypeField;
            }
            set {
                this.linkTypeField = value;
                this.RaisePropertyChanged("LinkType");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=5)]
        public string Filename {
            get {
                return this.filenameField;
            }
            set {
                this.filenameField = value;
                this.RaisePropertyChanged("Filename");
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.3163.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://inventory.psi.ch/DataAccess.asmx")]
    public partial class PartNoteInformation : object, System.ComponentModel.INotifyPropertyChanged {
        
        private int idField;
        
        private string authorField;
        
        private System.DateTime createdOnField;
        
        private string pSILabelField;
        
        private string titleField;
        
        private string descriptionField;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=0)]
        public int Id {
            get {
                return this.idField;
            }
            set {
                this.idField = value;
                this.RaisePropertyChanged("Id");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=1)]
        public string Author {
            get {
                return this.authorField;
            }
            set {
                this.authorField = value;
                this.RaisePropertyChanged("Author");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=2)]
        public System.DateTime CreatedOn {
            get {
                return this.createdOnField;
            }
            set {
                this.createdOnField = value;
                this.RaisePropertyChanged("CreatedOn");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=3)]
        public string PSILabel {
            get {
                return this.pSILabelField;
            }
            set {
                this.pSILabelField = value;
                this.RaisePropertyChanged("PSILabel");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=4)]
        public string Title {
            get {
                return this.titleField;
            }
            set {
                this.titleField = value;
                this.RaisePropertyChanged("Title");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=5)]
        public string Description {
            get {
                return this.descriptionField;
            }
            set {
                this.descriptionField = value;
                this.RaisePropertyChanged("Description");
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.3163.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://inventory.psi.ch/DataAccess.asmx")]
    public partial class PartHistoryInformation : object, System.ComponentModel.INotifyPropertyChanged {
        
        private string pSILabelField;
        
        private string authorField;
        
        private System.Nullable<System.DateTime> dateStartField;
        
        private System.Nullable<System.DateTime> dateEndField;
        
        private string displayField;
        
        private string[] valuesField;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=0)]
        public string PSILabel {
            get {
                return this.pSILabelField;
            }
            set {
                this.pSILabelField = value;
                this.RaisePropertyChanged("PSILabel");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=1)]
        public string Author {
            get {
                return this.authorField;
            }
            set {
                this.authorField = value;
                this.RaisePropertyChanged("Author");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true, Order=2)]
        public System.Nullable<System.DateTime> DateStart {
            get {
                return this.dateStartField;
            }
            set {
                this.dateStartField = value;
                this.RaisePropertyChanged("DateStart");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true, Order=3)]
        public System.Nullable<System.DateTime> DateEnd {
            get {
                return this.dateEndField;
            }
            set {
                this.dateEndField = value;
                this.RaisePropertyChanged("DateEnd");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=4)]
        public string Display {
            get {
                return this.displayField;
            }
            set {
                this.displayField = value;
                this.RaisePropertyChanged("Display");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlArrayAttribute(Order=5)]
        public string[] Values {
            get {
                return this.valuesField;
            }
            set {
                this.valuesField = value;
                this.RaisePropertyChanged("Values");
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.3163.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://inventory.psi.ch/DataAccess.asmx")]
    public partial class LastBootInformation : object, System.ComponentModel.INotifyPropertyChanged {
        
        private string hostnameField;
        
        private LastBootEntry[] listField;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=0)]
        public string Hostname {
            get {
                return this.hostnameField;
            }
            set {
                this.hostnameField = value;
                this.RaisePropertyChanged("Hostname");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlArrayAttribute(Order=1)]
        public LastBootEntry[] List {
            get {
                return this.listField;
            }
            set {
                this.listField = value;
                this.RaisePropertyChanged("List");
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.3163.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://inventory.psi.ch/DataAccess.asmx")]
    public partial class LastBootEntry : object, System.ComponentModel.INotifyPropertyChanged {
        
        private string iOCField;
        
        private string bootPCField;
        
        private string baseDirectoryField;
        
        private string bootFileField;
        
        private string startupScriptField;
        
        private string epicsVersionField;
        
        private string oSVersionField;
        
        private System.DateTime dateField;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=0)]
        public string IOC {
            get {
                return this.iOCField;
            }
            set {
                this.iOCField = value;
                this.RaisePropertyChanged("IOC");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=1)]
        public string BootPC {
            get {
                return this.bootPCField;
            }
            set {
                this.bootPCField = value;
                this.RaisePropertyChanged("BootPC");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=2)]
        public string BaseDirectory {
            get {
                return this.baseDirectoryField;
            }
            set {
                this.baseDirectoryField = value;
                this.RaisePropertyChanged("BaseDirectory");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=3)]
        public string BootFile {
            get {
                return this.bootFileField;
            }
            set {
                this.bootFileField = value;
                this.RaisePropertyChanged("BootFile");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=4)]
        public string StartupScript {
            get {
                return this.startupScriptField;
            }
            set {
                this.startupScriptField = value;
                this.RaisePropertyChanged("StartupScript");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=5)]
        public string EpicsVersion {
            get {
                return this.epicsVersionField;
            }
            set {
                this.epicsVersionField = value;
                this.RaisePropertyChanged("EpicsVersion");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=6)]
        public string OSVersion {
            get {
                return this.oSVersionField;
            }
            set {
                this.oSVersionField = value;
                this.RaisePropertyChanged("OSVersion");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=7)]
        public System.DateTime Date {
            get {
                return this.dateField;
            }
            set {
                this.dateField = value;
                this.RaisePropertyChanged("Date");
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.3163.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://inventory.psi.ch/DataAccess.asmx")]
    public partial class HostPiquetInformation : object, System.ComponentModel.INotifyPropertyChanged {
        
        private string hostnameField;
        
        private string precautionsField;
        
        private string consequencesField;
        
        private string errsIgnoreField;
        
        private string disconnChansField;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=0)]
        public string Hostname {
            get {
                return this.hostnameField;
            }
            set {
                this.hostnameField = value;
                this.RaisePropertyChanged("Hostname");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=1)]
        public string Precautions {
            get {
                return this.precautionsField;
            }
            set {
                this.precautionsField = value;
                this.RaisePropertyChanged("Precautions");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=2)]
        public string Consequences {
            get {
                return this.consequencesField;
            }
            set {
                this.consequencesField = value;
                this.RaisePropertyChanged("Consequences");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=3)]
        public string ErrsIgnore {
            get {
                return this.errsIgnoreField;
            }
            set {
                this.errsIgnoreField = value;
                this.RaisePropertyChanged("ErrsIgnore");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=4)]
        public string DisconnChans {
            get {
                return this.disconnChansField;
            }
            set {
                this.disconnChansField = value;
                this.RaisePropertyChanged("DisconnChans");
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.3163.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://inventory.psi.ch/DataAccess.asmx")]
    public partial class HostFunctionField : object, System.ComponentModel.INotifyPropertyChanged {
        
        private string titleField;
        
        private IdValuePair[] optionsField;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=0)]
        public string Title {
            get {
                return this.titleField;
            }
            set {
                this.titleField = value;
                this.RaisePropertyChanged("Title");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlArrayAttribute(Order=1)]
        public IdValuePair[] Options {
            get {
                return this.optionsField;
            }
            set {
                this.optionsField = value;
                this.RaisePropertyChanged("Options");
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.3163.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://inventory.psi.ch/DataAccess.asmx")]
    public partial class PartHostFunctionType : object, System.ComponentModel.INotifyPropertyChanged {
        
        private int idField;
        
        private string nameField;
        
        private HostFunctionField[] fieldsField;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=0)]
        public int Id {
            get {
                return this.idField;
            }
            set {
                this.idField = value;
                this.RaisePropertyChanged("Id");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=1)]
        public string Name {
            get {
                return this.nameField;
            }
            set {
                this.nameField = value;
                this.RaisePropertyChanged("Name");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlArrayAttribute(Order=2)]
        public HostFunctionField[] Fields {
            get {
                return this.fieldsField;
            }
            set {
                this.fieldsField = value;
                this.RaisePropertyChanged("Fields");
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.3163.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://inventory.psi.ch/DataAccess.asmx")]
    public partial class IpConnection : object, System.ComponentModel.INotifyPropertyChanged {
        
        private string aliasField;
        
        private string ipField;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=0)]
        public string Alias {
            get {
                return this.aliasField;
            }
            set {
                this.aliasField = value;
                this.RaisePropertyChanged("Alias");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=1)]
        public string Ip {
            get {
                return this.ipField;
            }
            set {
                this.ipField = value;
                this.RaisePropertyChanged("Ip");
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.3163.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://inventory.psi.ch/DataAccess.asmx")]
    public partial class QipInformation : object, System.ComponentModel.INotifyPropertyChanged {
        
        private string ipField;
        
        private string typeField;
        
        private string mACField;
        
        private string portField;
        
        private string switchField;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=0)]
        public string Ip {
            get {
                return this.ipField;
            }
            set {
                this.ipField = value;
                this.RaisePropertyChanged("Ip");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=1)]
        public string Type {
            get {
                return this.typeField;
            }
            set {
                this.typeField = value;
                this.RaisePropertyChanged("Type");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=2)]
        public string MAC {
            get {
                return this.mACField;
            }
            set {
                this.mACField = value;
                this.RaisePropertyChanged("MAC");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=3)]
        public string Port {
            get {
                return this.portField;
            }
            set {
                this.portField = value;
                this.RaisePropertyChanged("Port");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=4)]
        public string Switch {
            get {
                return this.switchField;
            }
            set {
                this.switchField = value;
                this.RaisePropertyChanged("Switch");
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.3163.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://inventory.psi.ch/DataAccess.asmx")]
    public partial class HostInformation : object, System.ComponentModel.INotifyPropertyChanged {
        
        private string hostnameField;
        
        private string[] cvsProjectsField;
        
        private PartHostFunction[] functionsField;
        
        private PartHostFunction[] relationsField;
        
        private QipInformation[] qipInformationField;
        
        private IpConnection[] ipConnectionsField;
        
        private PartHostFunctionType[] possibleFunctionsField;
        
        private PartHostFunctionType[] possibleRelationsField;
        
        private SoftIocInformation[] softIocField;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=0)]
        public string Hostname {
            get {
                return this.hostnameField;
            }
            set {
                this.hostnameField = value;
                this.RaisePropertyChanged("Hostname");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlArrayAttribute(Order=1)]
        public string[] CvsProjects {
            get {
                return this.cvsProjectsField;
            }
            set {
                this.cvsProjectsField = value;
                this.RaisePropertyChanged("CvsProjects");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlArrayAttribute(Order=2)]
        public PartHostFunction[] Functions {
            get {
                return this.functionsField;
            }
            set {
                this.functionsField = value;
                this.RaisePropertyChanged("Functions");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlArrayAttribute(Order=3)]
        public PartHostFunction[] Relations {
            get {
                return this.relationsField;
            }
            set {
                this.relationsField = value;
                this.RaisePropertyChanged("Relations");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlArrayAttribute(Order=4)]
        public QipInformation[] QipInformation {
            get {
                return this.qipInformationField;
            }
            set {
                this.qipInformationField = value;
                this.RaisePropertyChanged("QipInformation");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlArrayAttribute(Order=5)]
        public IpConnection[] IpConnections {
            get {
                return this.ipConnectionsField;
            }
            set {
                this.ipConnectionsField = value;
                this.RaisePropertyChanged("IpConnections");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlArrayAttribute(Order=6)]
        public PartHostFunctionType[] PossibleFunctions {
            get {
                return this.possibleFunctionsField;
            }
            set {
                this.possibleFunctionsField = value;
                this.RaisePropertyChanged("PossibleFunctions");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlArrayAttribute(Order=7)]
        public PartHostFunctionType[] PossibleRelations {
            get {
                return this.possibleRelationsField;
            }
            set {
                this.possibleRelationsField = value;
                this.RaisePropertyChanged("PossibleRelations");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlArrayAttribute(Order=8)]
        public SoftIocInformation[] SoftIoc {
            get {
                return this.softIocField;
            }
            set {
                this.softIocField = value;
                this.RaisePropertyChanged("SoftIoc");
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.3163.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://inventory.psi.ch/DataAccess.asmx")]
    public partial class PartHostFunction : object, System.ComponentModel.INotifyPropertyChanged {
        
        private int idField;
        
        private string nameField;
        
        private string[] valuesField;
        
        private System.Nullable<int> typeIdField;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=0)]
        public int Id {
            get {
                return this.idField;
            }
            set {
                this.idField = value;
                this.RaisePropertyChanged("Id");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=1)]
        public string Name {
            get {
                return this.nameField;
            }
            set {
                this.nameField = value;
                this.RaisePropertyChanged("Name");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlArrayAttribute(Order=2)]
        public string[] Values {
            get {
                return this.valuesField;
            }
            set {
                this.valuesField = value;
                this.RaisePropertyChanged("Values");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true, Order=3)]
        public System.Nullable<int> TypeId {
            get {
                return this.typeIdField;
            }
            set {
                this.typeIdField = value;
                this.RaisePropertyChanged("TypeId");
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.3163.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://inventory.psi.ch/DataAccess.asmx")]
    public partial class SoftIocInformation : object, System.ComponentModel.INotifyPropertyChanged {
        
        private string nameField;
        
        private string portField;
        
        private string directoryField;
        
        private string userField;
        
        private string versionField;
        
        private string commentField;
        
        private string serverField;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=0)]
        public string Name {
            get {
                return this.nameField;
            }
            set {
                this.nameField = value;
                this.RaisePropertyChanged("Name");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=1)]
        public string Port {
            get {
                return this.portField;
            }
            set {
                this.portField = value;
                this.RaisePropertyChanged("Port");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=2)]
        public string Directory {
            get {
                return this.directoryField;
            }
            set {
                this.directoryField = value;
                this.RaisePropertyChanged("Directory");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=3)]
        public string User {
            get {
                return this.userField;
            }
            set {
                this.userField = value;
                this.RaisePropertyChanged("User");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=4)]
        public string Version {
            get {
                return this.versionField;
            }
            set {
                this.versionField = value;
                this.RaisePropertyChanged("Version");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=5)]
        public string Comment {
            get {
                return this.commentField;
            }
            set {
                this.commentField = value;
                this.RaisePropertyChanged("Comment");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=6)]
        public string Server {
            get {
                return this.serverField;
            }
            set {
                this.serverField = value;
                this.RaisePropertyChanged("Server");
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.3163.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://inventory.psi.ch/DataAccess.asmx")]
    public partial class MultiConnectionEntry : object, System.ComponentModel.INotifyPropertyChanged {
        
        private string childConnectorField;
        
        private string childObjectField;
        
        private string childRequestTypeField;
        
        private string parentConnectorField;
        
        private string parentObjectField;
        
        private string parentRequestTypeField;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=0)]
        public string ChildConnector {
            get {
                return this.childConnectorField;
            }
            set {
                this.childConnectorField = value;
                this.RaisePropertyChanged("ChildConnector");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=1)]
        public string ChildObject {
            get {
                return this.childObjectField;
            }
            set {
                this.childObjectField = value;
                this.RaisePropertyChanged("ChildObject");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=2)]
        public string ChildRequestType {
            get {
                return this.childRequestTypeField;
            }
            set {
                this.childRequestTypeField = value;
                this.RaisePropertyChanged("ChildRequestType");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=3)]
        public string ParentConnector {
            get {
                return this.parentConnectorField;
            }
            set {
                this.parentConnectorField = value;
                this.RaisePropertyChanged("ParentConnector");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=4)]
        public string ParentObject {
            get {
                return this.parentObjectField;
            }
            set {
                this.parentObjectField = value;
                this.RaisePropertyChanged("ParentObject");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=5)]
        public string ParentRequestType {
            get {
                return this.parentRequestTypeField;
            }
            set {
                this.parentRequestTypeField = value;
                this.RaisePropertyChanged("ParentRequestType");
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.3163.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://inventory.psi.ch/DataAccess.asmx")]
    public partial class MultiConnection : object, System.ComponentModel.INotifyPropertyChanged {
        
        private string childField;
        
        private string[] childConnectorsField;
        
        private MultiConnectionEntry[] connectionsField;
        
        private string parentField;
        
        private string[] parentConnectorsField;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=0)]
        public string Child {
            get {
                return this.childField;
            }
            set {
                this.childField = value;
                this.RaisePropertyChanged("Child");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlArrayAttribute(Order=1)]
        public string[] ChildConnectors {
            get {
                return this.childConnectorsField;
            }
            set {
                this.childConnectorsField = value;
                this.RaisePropertyChanged("ChildConnectors");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlArrayAttribute(Order=2)]
        public MultiConnectionEntry[] Connections {
            get {
                return this.connectionsField;
            }
            set {
                this.connectionsField = value;
                this.RaisePropertyChanged("Connections");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=3)]
        public string Parent {
            get {
                return this.parentField;
            }
            set {
                this.parentField = value;
                this.RaisePropertyChanged("Parent");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlArrayAttribute(Order=4)]
        public string[] ParentConnectors {
            get {
                return this.parentConnectorsField;
            }
            set {
                this.parentConnectorsField = value;
                this.RaisePropertyChanged("ParentConnectors");
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.3163.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://inventory.psi.ch/DataAccess.asmx")]
    public partial class PartPartialKid : object, System.ComponentModel.INotifyPropertyChanged {
        
        private string connectorField;
        
        private PartPartialHierarchy partField;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=0)]
        public string Connector {
            get {
                return this.connectorField;
            }
            set {
                this.connectorField = value;
                this.RaisePropertyChanged("Connector");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=1)]
        public PartPartialHierarchy Part {
            get {
                return this.partField;
            }
            set {
                this.partField = value;
                this.RaisePropertyChanged("Part");
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.3163.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://inventory.psi.ch/DataAccess.asmx")]
    public partial class PartPartialHierarchy : object, System.ComponentModel.INotifyPropertyChanged {
        
        private string labelField;
        
        private string partTypeField;
        
        private PartPartialKid[] chidrenField;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=0)]
        public string Label {
            get {
                return this.labelField;
            }
            set {
                this.labelField = value;
                this.RaisePropertyChanged("Label");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=1)]
        public string PartType {
            get {
                return this.partTypeField;
            }
            set {
                this.partTypeField = value;
                this.RaisePropertyChanged("PartType");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlArrayAttribute(Order=2)]
        public PartPartialKid[] Chidren {
            get {
                return this.chidrenField;
            }
            set {
                this.chidrenField = value;
                this.RaisePropertyChanged("Chidren");
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.3163.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://inventory.psi.ch/DataAccess.asmx")]
    public partial class PartConnector : object, System.ComponentModel.INotifyPropertyChanged {
        
        private int idField;
        
        private string locationField;
        
        private System.Nullable<int> positionField;
        
        private string nameField;
        
        private PartInformation connectToField;
        
        private bool isParentConnectionField;
        
        private string requestField;
        
        private string toConnectorField;
        
        private bool canHaveDataField;
        
        private DataField[] cableDataField;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=0)]
        public int Id {
            get {
                return this.idField;
            }
            set {
                this.idField = value;
                this.RaisePropertyChanged("Id");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=1)]
        public string Location {
            get {
                return this.locationField;
            }
            set {
                this.locationField = value;
                this.RaisePropertyChanged("Location");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true, Order=2)]
        public System.Nullable<int> Position {
            get {
                return this.positionField;
            }
            set {
                this.positionField = value;
                this.RaisePropertyChanged("Position");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=3)]
        public string Name {
            get {
                return this.nameField;
            }
            set {
                this.nameField = value;
                this.RaisePropertyChanged("Name");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=4)]
        public PartInformation ConnectTo {
            get {
                return this.connectToField;
            }
            set {
                this.connectToField = value;
                this.RaisePropertyChanged("ConnectTo");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=5)]
        public bool IsParentConnection {
            get {
                return this.isParentConnectionField;
            }
            set {
                this.isParentConnectionField = value;
                this.RaisePropertyChanged("IsParentConnection");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=6)]
        public string Request {
            get {
                return this.requestField;
            }
            set {
                this.requestField = value;
                this.RaisePropertyChanged("Request");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=7)]
        public string ToConnector {
            get {
                return this.toConnectorField;
            }
            set {
                this.toConnectorField = value;
                this.RaisePropertyChanged("ToConnector");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=8)]
        public bool CanHaveData {
            get {
                return this.canHaveDataField;
            }
            set {
                this.canHaveDataField = value;
                this.RaisePropertyChanged("CanHaveData");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlArrayAttribute(Order=9)]
        public DataField[] CableData {
            get {
                return this.cableDataField;
            }
            set {
                this.cableDataField = value;
                this.RaisePropertyChanged("CableData");
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.3163.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://inventory.psi.ch/DataAccess.asmx")]
    public partial class PartInformation : object, System.ComponentModel.INotifyPropertyChanged {
        
        private string pSILabelField;
        
        private int partTypeIdField;
        
        private string partTypeField;
        
        private PartConnector[] connectorsField;
        
        private string typeDescriptionField;
        
        private string displayField;
        
        private string[] systemNamesField;
        
        private bool isUnderPuppetField;
        
        private string requestTypeField;
        
        private bool canHaveDisturbancesField;
        
        private string[] tagsField;
        
        private string commentField;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=0)]
        public string PSILabel {
            get {
                return this.pSILabelField;
            }
            set {
                this.pSILabelField = value;
                this.RaisePropertyChanged("PSILabel");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=1)]
        public int PartTypeId {
            get {
                return this.partTypeIdField;
            }
            set {
                this.partTypeIdField = value;
                this.RaisePropertyChanged("PartTypeId");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=2)]
        public string PartType {
            get {
                return this.partTypeField;
            }
            set {
                this.partTypeField = value;
                this.RaisePropertyChanged("PartType");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlArrayAttribute(Order=3)]
        public PartConnector[] Connectors {
            get {
                return this.connectorsField;
            }
            set {
                this.connectorsField = value;
                this.RaisePropertyChanged("Connectors");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=4)]
        public string TypeDescription {
            get {
                return this.typeDescriptionField;
            }
            set {
                this.typeDescriptionField = value;
                this.RaisePropertyChanged("TypeDescription");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=5)]
        public string Display {
            get {
                return this.displayField;
            }
            set {
                this.displayField = value;
                this.RaisePropertyChanged("Display");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlArrayAttribute(Order=6)]
        public string[] SystemNames {
            get {
                return this.systemNamesField;
            }
            set {
                this.systemNamesField = value;
                this.RaisePropertyChanged("SystemNames");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=7)]
        public bool IsUnderPuppet {
            get {
                return this.isUnderPuppetField;
            }
            set {
                this.isUnderPuppetField = value;
                this.RaisePropertyChanged("IsUnderPuppet");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=8)]
        public string RequestType {
            get {
                return this.requestTypeField;
            }
            set {
                this.requestTypeField = value;
                this.RaisePropertyChanged("RequestType");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=9)]
        public bool CanHaveDisturbances {
            get {
                return this.canHaveDisturbancesField;
            }
            set {
                this.canHaveDisturbancesField = value;
                this.RaisePropertyChanged("CanHaveDisturbances");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlArrayAttribute(Order=10)]
        public string[] Tags {
            get {
                return this.tagsField;
            }
            set {
                this.tagsField = value;
                this.RaisePropertyChanged("Tags");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=11)]
        public string Comment {
            get {
                return this.commentField;
            }
            set {
                this.commentField = value;
                this.RaisePropertyChanged("Comment");
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.3163.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://inventory.psi.ch/DataAccess.asmx")]
    public partial class DeliverDetail : object, System.ComponentModel.INotifyPropertyChanged {
        
        private string psiLabelField;
        
        private string serialField;
        
        private System.Nullable<int> locationField;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=0)]
        public string PsiLabel {
            get {
                return this.psiLabelField;
            }
            set {
                this.psiLabelField = value;
                this.RaisePropertyChanged("PsiLabel");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=1)]
        public string Serial {
            get {
                return this.serialField;
            }
            set {
                this.serialField = value;
                this.RaisePropertyChanged("Serial");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true, Order=2)]
        public System.Nullable<int> Location {
            get {
                return this.locationField;
            }
            set {
                this.locationField = value;
                this.RaisePropertyChanged("Location");
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.3163.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://inventory.psi.ch/DataAccess.asmx")]
    public partial class OrderItem : object, System.ComponentModel.INotifyPropertyChanged {
        
        private int idField;
        
        private int partTypeField;
        
        private string partTypeNameField;
        
        private decimal priceField;
        
        private decimal foreignPriceField;
        
        private System.Nullable<System.DateTime> requestedDateField;
        
        private System.Nullable<System.DateTime> deliveryDateField;
        
        private int quantityOrderedField;
        
        private int quantityToDeliverField;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=0)]
        public int Id {
            get {
                return this.idField;
            }
            set {
                this.idField = value;
                this.RaisePropertyChanged("Id");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=1)]
        public int PartType {
            get {
                return this.partTypeField;
            }
            set {
                this.partTypeField = value;
                this.RaisePropertyChanged("PartType");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=2)]
        public string PartTypeName {
            get {
                return this.partTypeNameField;
            }
            set {
                this.partTypeNameField = value;
                this.RaisePropertyChanged("PartTypeName");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=3)]
        public decimal Price {
            get {
                return this.priceField;
            }
            set {
                this.priceField = value;
                this.RaisePropertyChanged("Price");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=4)]
        public decimal ForeignPrice {
            get {
                return this.foreignPriceField;
            }
            set {
                this.foreignPriceField = value;
                this.RaisePropertyChanged("ForeignPrice");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true, Order=5)]
        public System.Nullable<System.DateTime> RequestedDate {
            get {
                return this.requestedDateField;
            }
            set {
                this.requestedDateField = value;
                this.RaisePropertyChanged("RequestedDate");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true, Order=6)]
        public System.Nullable<System.DateTime> DeliveryDate {
            get {
                return this.deliveryDateField;
            }
            set {
                this.deliveryDateField = value;
                this.RaisePropertyChanged("DeliveryDate");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=7)]
        public int QuantityOrdered {
            get {
                return this.quantityOrderedField;
            }
            set {
                this.quantityOrderedField = value;
                this.RaisePropertyChanged("QuantityOrdered");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=8)]
        public int QuantityToDeliver {
            get {
                return this.quantityToDeliverField;
            }
            set {
                this.quantityToDeliverField = value;
                this.RaisePropertyChanged("QuantityToDeliver");
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.3163.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://inventory.psi.ch/DataAccess.asmx")]
    public partial class Order : object, System.ComponentModel.INotifyPropertyChanged {
        
        private int idField;
        
        private string pSIOrderField;
        
        private int authorField;
        
        private string authorNameField;
        
        private string authorEmailField;
        
        private string authorPhoneField;
        
        private int companyField;
        
        private string companyNameField;
        
        private string pSPNumberField;
        
        private System.DateTime orderDateField;
        
        private bool isOpenField;
        
        private System.DateTime offerDateField;
        
        private string currencyField;
        
        private string offerReferenceField;
        
        private string remarksField;
        
        private System.DateTime expectedDeliveryDateField;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=0)]
        public int Id {
            get {
                return this.idField;
            }
            set {
                this.idField = value;
                this.RaisePropertyChanged("Id");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=1)]
        public string PSIOrder {
            get {
                return this.pSIOrderField;
            }
            set {
                this.pSIOrderField = value;
                this.RaisePropertyChanged("PSIOrder");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=2)]
        public int Author {
            get {
                return this.authorField;
            }
            set {
                this.authorField = value;
                this.RaisePropertyChanged("Author");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=3)]
        public string AuthorName {
            get {
                return this.authorNameField;
            }
            set {
                this.authorNameField = value;
                this.RaisePropertyChanged("AuthorName");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=4)]
        public string AuthorEmail {
            get {
                return this.authorEmailField;
            }
            set {
                this.authorEmailField = value;
                this.RaisePropertyChanged("AuthorEmail");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=5)]
        public string AuthorPhone {
            get {
                return this.authorPhoneField;
            }
            set {
                this.authorPhoneField = value;
                this.RaisePropertyChanged("AuthorPhone");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=6)]
        public int Company {
            get {
                return this.companyField;
            }
            set {
                this.companyField = value;
                this.RaisePropertyChanged("Company");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=7)]
        public string CompanyName {
            get {
                return this.companyNameField;
            }
            set {
                this.companyNameField = value;
                this.RaisePropertyChanged("CompanyName");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=8)]
        public string PSPNumber {
            get {
                return this.pSPNumberField;
            }
            set {
                this.pSPNumberField = value;
                this.RaisePropertyChanged("PSPNumber");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=9)]
        public System.DateTime OrderDate {
            get {
                return this.orderDateField;
            }
            set {
                this.orderDateField = value;
                this.RaisePropertyChanged("OrderDate");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=10)]
        public bool IsOpen {
            get {
                return this.isOpenField;
            }
            set {
                this.isOpenField = value;
                this.RaisePropertyChanged("IsOpen");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=11)]
        public System.DateTime OfferDate {
            get {
                return this.offerDateField;
            }
            set {
                this.offerDateField = value;
                this.RaisePropertyChanged("OfferDate");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=12)]
        public string Currency {
            get {
                return this.currencyField;
            }
            set {
                this.currencyField = value;
                this.RaisePropertyChanged("Currency");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=13)]
        public string OfferReference {
            get {
                return this.offerReferenceField;
            }
            set {
                this.offerReferenceField = value;
                this.RaisePropertyChanged("OfferReference");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=14)]
        public string Remarks {
            get {
                return this.remarksField;
            }
            set {
                this.remarksField = value;
                this.RaisePropertyChanged("Remarks");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=15)]
        public System.DateTime ExpectedDeliveryDate {
            get {
                return this.expectedDeliveryDateField;
            }
            set {
                this.expectedDeliveryDateField = value;
                this.RaisePropertyChanged("ExpectedDeliveryDate");
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.3163.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://inventory.psi.ch/DataAccess.asmx")]
    public partial class UserRole : object, System.ComponentModel.INotifyPropertyChanged {
        
        private int idField;
        
        private string nameField;
        
        private string parameterField;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=0)]
        public int Id {
            get {
                return this.idField;
            }
            set {
                this.idField = value;
                this.RaisePropertyChanged("Id");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=1)]
        public string Name {
            get {
                return this.nameField;
            }
            set {
                this.nameField = value;
                this.RaisePropertyChanged("Name");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=2)]
        public string Parameter {
            get {
                return this.parameterField;
            }
            set {
                this.parameterField = value;
                this.RaisePropertyChanged("Parameter");
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.3163.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://inventory.psi.ch/DataAccess.asmx")]
    public partial class AuthToken : object, System.ComponentModel.INotifyPropertyChanged {
        
        private string idField;
        
        private int userIdField;
        
        private string loginField;
        
        private string firstNameField;
        
        private string lastNameField;
        
        private string emailField;
        
        private System.DateTime createdOnField;
        
        private System.DateTime expiresOnField;
        
        private string remoteAddressField;
        
        private UserRole[] rolesField;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=0)]
        public string Id {
            get {
                return this.idField;
            }
            set {
                this.idField = value;
                this.RaisePropertyChanged("Id");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=1)]
        public int UserId {
            get {
                return this.userIdField;
            }
            set {
                this.userIdField = value;
                this.RaisePropertyChanged("UserId");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=2)]
        public string Login {
            get {
                return this.loginField;
            }
            set {
                this.loginField = value;
                this.RaisePropertyChanged("Login");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=3)]
        public string FirstName {
            get {
                return this.firstNameField;
            }
            set {
                this.firstNameField = value;
                this.RaisePropertyChanged("FirstName");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=4)]
        public string LastName {
            get {
                return this.lastNameField;
            }
            set {
                this.lastNameField = value;
                this.RaisePropertyChanged("LastName");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=5)]
        public string Email {
            get {
                return this.emailField;
            }
            set {
                this.emailField = value;
                this.RaisePropertyChanged("Email");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=6)]
        public System.DateTime CreatedOn {
            get {
                return this.createdOnField;
            }
            set {
                this.createdOnField = value;
                this.RaisePropertyChanged("CreatedOn");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=7)]
        public System.DateTime ExpiresOn {
            get {
                return this.expiresOnField;
            }
            set {
                this.expiresOnField = value;
                this.RaisePropertyChanged("ExpiresOn");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=8)]
        public string RemoteAddress {
            get {
                return this.remoteAddressField;
            }
            set {
                this.remoteAddressField = value;
                this.RaisePropertyChanged("RemoteAddress");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlArrayAttribute(Order=9)]
        public UserRole[] Roles {
            get {
                return this.rolesField;
            }
            set {
                this.rolesField = value;
                this.RaisePropertyChanged("Roles");
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.3163.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://inventory.psi.ch/DataAccess.asmx")]
    public partial class VmStatusInformation : object, System.ComponentModel.INotifyPropertyChanged {
        
        private string nameField;
        
        private string powerStateField;
        
        private string descriptionField;
        
        private System.DateTime lastUpdatedField;
        
        private string network1Field;
        
        private string network2Field;
        
        private string network3Field;
        
        private string network4Field;
        
        private bool existsOnVmHostField;
        
        private bool existsInInventoryField;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=0)]
        public string Name {
            get {
                return this.nameField;
            }
            set {
                this.nameField = value;
                this.RaisePropertyChanged("Name");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=1)]
        public string PowerState {
            get {
                return this.powerStateField;
            }
            set {
                this.powerStateField = value;
                this.RaisePropertyChanged("PowerState");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=2)]
        public string Description {
            get {
                return this.descriptionField;
            }
            set {
                this.descriptionField = value;
                this.RaisePropertyChanged("Description");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=3)]
        public System.DateTime LastUpdated {
            get {
                return this.lastUpdatedField;
            }
            set {
                this.lastUpdatedField = value;
                this.RaisePropertyChanged("LastUpdated");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=4)]
        public string Network1 {
            get {
                return this.network1Field;
            }
            set {
                this.network1Field = value;
                this.RaisePropertyChanged("Network1");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=5)]
        public string Network2 {
            get {
                return this.network2Field;
            }
            set {
                this.network2Field = value;
                this.RaisePropertyChanged("Network2");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=6)]
        public string Network3 {
            get {
                return this.network3Field;
            }
            set {
                this.network3Field = value;
                this.RaisePropertyChanged("Network3");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=7)]
        public string Network4 {
            get {
                return this.network4Field;
            }
            set {
                this.network4Field = value;
                this.RaisePropertyChanged("Network4");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=8)]
        public bool ExistsOnVmHost {
            get {
                return this.existsOnVmHostField;
            }
            set {
                this.existsOnVmHostField = value;
                this.RaisePropertyChanged("ExistsOnVmHost");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=9)]
        public bool ExistsInInventory {
            get {
                return this.existsInInventoryField;
            }
            set {
                this.existsInInventoryField = value;
                this.RaisePropertyChanged("ExistsInInventory");
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.3163.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://inventory.psi.ch/DataAccess.asmx")]
    public partial class EpicsGatewayActivity : object, System.ComponentModel.INotifyPropertyChanged {
        
        private string nameField;
        
        private System.Nullable<System.DateTime> dateField;
        
        private string actionField;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=0)]
        public string Name {
            get {
                return this.nameField;
            }
            set {
                this.nameField = value;
                this.RaisePropertyChanged("Name");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true, Order=1)]
        public System.Nullable<System.DateTime> Date {
            get {
                return this.dateField;
            }
            set {
                this.dateField = value;
                this.RaisePropertyChanged("Date");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=2)]
        public string Action {
            get {
                return this.actionField;
            }
            set {
                this.actionField = value;
                this.RaisePropertyChanged("Action");
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.3163.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://inventory.psi.ch/DataAccess.asmx")]
    public partial class HostRelation : object, System.ComponentModel.INotifyPropertyChanged {
        
        private string hostnameField;
        
        private string descriptionField;
        
        private string locationField;
        
        private string[] hostsField;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=0)]
        public string Hostname {
            get {
                return this.hostnameField;
            }
            set {
                this.hostnameField = value;
                this.RaisePropertyChanged("Hostname");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=1)]
        public string Description {
            get {
                return this.descriptionField;
            }
            set {
                this.descriptionField = value;
                this.RaisePropertyChanged("Description");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=2)]
        public string Location {
            get {
                return this.locationField;
            }
            set {
                this.locationField = value;
                this.RaisePropertyChanged("Location");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlArrayAttribute(Order=3)]
        public string[] Hosts {
            get {
                return this.hostsField;
            }
            set {
                this.hostsField = value;
                this.RaisePropertyChanged("Hosts");
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.3163.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://inventory.psi.ch/DataAccess.asmx")]
    public partial class HostPuppetAttributeInformation : object, System.ComponentModel.INotifyPropertyChanged {
        
        private string attributeField;
        
        private System.Nullable<System.DateTime> createdOnField;
        
        private string hostnameField;
        
        private string valueField;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=0)]
        public string Attribute {
            get {
                return this.attributeField;
            }
            set {
                this.attributeField = value;
                this.RaisePropertyChanged("Attribute");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true, Order=1)]
        public System.Nullable<System.DateTime> CreatedOn {
            get {
                return this.createdOnField;
            }
            set {
                this.createdOnField = value;
                this.RaisePropertyChanged("CreatedOn");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=2)]
        public string Hostname {
            get {
                return this.hostnameField;
            }
            set {
                this.hostnameField = value;
                this.RaisePropertyChanged("Hostname");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=3)]
        public string Value {
            get {
                return this.valueField;
            }
            set {
                this.valueField = value;
                this.RaisePropertyChanged("Value");
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.3163.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://inventory.psi.ch/DataAccess.asmx")]
    public partial class HostCheckInformation : object, System.ComponentModel.INotifyPropertyChanged {
        
        private string hostnameField;
        
        private HostCheckEntryInformation[] listField;
        
        private int[] subscribedField;
        
        private string[] subscribedGroupsField;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=0)]
        public string Hostname {
            get {
                return this.hostnameField;
            }
            set {
                this.hostnameField = value;
                this.RaisePropertyChanged("Hostname");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlArrayAttribute(Order=1)]
        public HostCheckEntryInformation[] List {
            get {
                return this.listField;
            }
            set {
                this.listField = value;
                this.RaisePropertyChanged("List");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlArrayAttribute(Order=2)]
        public int[] Subscribed {
            get {
                return this.subscribedField;
            }
            set {
                this.subscribedField = value;
                this.RaisePropertyChanged("Subscribed");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlArrayAttribute(Order=3)]
        public string[] SubscribedGroups {
            get {
                return this.subscribedGroupsField;
            }
            set {
                this.subscribedGroupsField = value;
                this.RaisePropertyChanged("SubscribedGroups");
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.3163.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://inventory.psi.ch/DataAccess.asmx")]
    public partial class HostCheckEntryInformation : object, System.ComponentModel.INotifyPropertyChanged {
        
        private int idField;
        
        private string hostnameField;
        
        private System.Nullable<System.DateTime> lastCheckField;
        
        private System.Nullable<System.DateTime> lastControlField;
        
        private string lastMessageField;
        
        private bool onErrorField;
        
        private string titleField;
        
        private System.Nullable<int> checkTypeField;
        
        private string descriptionField;
        
        private bool enabledField;
        
        private HostCheckValueEntry[] valuesField;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=0)]
        public int Id {
            get {
                return this.idField;
            }
            set {
                this.idField = value;
                this.RaisePropertyChanged("Id");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=1)]
        public string Hostname {
            get {
                return this.hostnameField;
            }
            set {
                this.hostnameField = value;
                this.RaisePropertyChanged("Hostname");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true, Order=2)]
        public System.Nullable<System.DateTime> LastCheck {
            get {
                return this.lastCheckField;
            }
            set {
                this.lastCheckField = value;
                this.RaisePropertyChanged("LastCheck");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true, Order=3)]
        public System.Nullable<System.DateTime> LastControl {
            get {
                return this.lastControlField;
            }
            set {
                this.lastControlField = value;
                this.RaisePropertyChanged("LastControl");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=4)]
        public string LastMessage {
            get {
                return this.lastMessageField;
            }
            set {
                this.lastMessageField = value;
                this.RaisePropertyChanged("LastMessage");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=5)]
        public bool OnError {
            get {
                return this.onErrorField;
            }
            set {
                this.onErrorField = value;
                this.RaisePropertyChanged("OnError");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=6)]
        public string Title {
            get {
                return this.titleField;
            }
            set {
                this.titleField = value;
                this.RaisePropertyChanged("Title");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true, Order=7)]
        public System.Nullable<int> CheckType {
            get {
                return this.checkTypeField;
            }
            set {
                this.checkTypeField = value;
                this.RaisePropertyChanged("CheckType");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=8)]
        public string Description {
            get {
                return this.descriptionField;
            }
            set {
                this.descriptionField = value;
                this.RaisePropertyChanged("Description");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=9)]
        public bool Enabled {
            get {
                return this.enabledField;
            }
            set {
                this.enabledField = value;
                this.RaisePropertyChanged("Enabled");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlArrayAttribute(Order=10)]
        public HostCheckValueEntry[] Values {
            get {
                return this.valuesField;
            }
            set {
                this.valuesField = value;
                this.RaisePropertyChanged("Values");
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.3163.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://inventory.psi.ch/DataAccess.asmx")]
    public partial class HostCheckValueEntry : object, System.ComponentModel.INotifyPropertyChanged {
        
        private System.Nullable<int> idField;
        
        private string valueField;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true, Order=0)]
        public System.Nullable<int> Id {
            get {
                return this.idField;
            }
            set {
                this.idField = value;
                this.RaisePropertyChanged("Id");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=1)]
        public string Value {
            get {
                return this.valueField;
            }
            set {
                this.valueField = value;
                this.RaisePropertyChanged("Value");
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.3163.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://inventory.psi.ch/DataAccess.asmx")]
    public partial class HostCheckTypeAttributeInformation : object, System.ComponentModel.INotifyPropertyChanged {
        
        private string typeField;
        
        private string labelField;
        
        private int idField;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=0)]
        public string Type {
            get {
                return this.typeField;
            }
            set {
                this.typeField = value;
                this.RaisePropertyChanged("Type");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=1)]
        public string Label {
            get {
                return this.labelField;
            }
            set {
                this.labelField = value;
                this.RaisePropertyChanged("Label");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=2)]
        public int Id {
            get {
                return this.idField;
            }
            set {
                this.idField = value;
                this.RaisePropertyChanged("Id");
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.3163.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://inventory.psi.ch/DataAccess.asmx")]
    public partial class HostCheckTypeInformation : object, System.ComponentModel.INotifyPropertyChanged {
        
        private int idField;
        
        private string nameField;
        
        private HostCheckTypeAttributeInformation[] attributesField;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=0)]
        public int Id {
            get {
                return this.idField;
            }
            set {
                this.idField = value;
                this.RaisePropertyChanged("Id");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=1)]
        public string Name {
            get {
                return this.nameField;
            }
            set {
                this.nameField = value;
                this.RaisePropertyChanged("Name");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlArrayAttribute(Order=2)]
        public HostCheckTypeAttributeInformation[] Attributes {
            get {
                return this.attributesField;
            }
            set {
                this.attributesField = value;
                this.RaisePropertyChanged("Attributes");
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.3163.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://inventory.psi.ch/DataAccess.asmx")]
    public partial class NediPort : object, System.ComponentModel.INotifyPropertyChanged {
        
        private string portField;
        
        private string fullNameField;
        
        private string speedField;
        
        private bool fullDuplexField;
        
        private string[] hostsField;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=0)]
        public string Port {
            get {
                return this.portField;
            }
            set {
                this.portField = value;
                this.RaisePropertyChanged("Port");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=1)]
        public string FullName {
            get {
                return this.fullNameField;
            }
            set {
                this.fullNameField = value;
                this.RaisePropertyChanged("FullName");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=2)]
        public string Speed {
            get {
                return this.speedField;
            }
            set {
                this.speedField = value;
                this.RaisePropertyChanged("Speed");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=3)]
        public bool FullDuplex {
            get {
                return this.fullDuplexField;
            }
            set {
                this.fullDuplexField = value;
                this.RaisePropertyChanged("FullDuplex");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlArrayAttribute(Order=4)]
        public string[] Hosts {
            get {
                return this.hostsField;
            }
            set {
                this.hostsField = value;
                this.RaisePropertyChanged("Hosts");
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.3163.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://inventory.psi.ch/DataAccess.asmx")]
    public partial class WikiPage : object, System.ComponentModel.INotifyPropertyChanged {
        
        private string titleField;
        
        private string documentField;
        
        private string[] parentsField;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=0)]
        public string Title {
            get {
                return this.titleField;
            }
            set {
                this.titleField = value;
                this.RaisePropertyChanged("Title");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=1)]
        public string Document {
            get {
                return this.documentField;
            }
            set {
                this.documentField = value;
                this.RaisePropertyChanged("Document");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlArrayAttribute(Order=2)]
        public string[] Parents {
            get {
                return this.parentsField;
            }
            set {
                this.parentsField = value;
                this.RaisePropertyChanged("Parents");
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.3163.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://inventory.psi.ch/DataAccess.asmx")]
    public partial class LocationInformation : object, System.ComponentModel.INotifyPropertyChanged {
        
        private int idField;
        
        private string nameField;
        
        private System.Nullable<int> parentField;
        
        private string commentsField;
        
        private System.Nullable<int> categoryField;
        
        private System.Nullable<int> rackUnitsField;
        
        private string regexpRuleField;
        
        private string abstractField;
        
        private string planUrlField;
        
        private string planCoordinatesField;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=0)]
        public int Id {
            get {
                return this.idField;
            }
            set {
                this.idField = value;
                this.RaisePropertyChanged("Id");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=1)]
        public string Name {
            get {
                return this.nameField;
            }
            set {
                this.nameField = value;
                this.RaisePropertyChanged("Name");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true, Order=2)]
        public System.Nullable<int> Parent {
            get {
                return this.parentField;
            }
            set {
                this.parentField = value;
                this.RaisePropertyChanged("Parent");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=3)]
        public string Comments {
            get {
                return this.commentsField;
            }
            set {
                this.commentsField = value;
                this.RaisePropertyChanged("Comments");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true, Order=4)]
        public System.Nullable<int> Category {
            get {
                return this.categoryField;
            }
            set {
                this.categoryField = value;
                this.RaisePropertyChanged("Category");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true, Order=5)]
        public System.Nullable<int> RackUnits {
            get {
                return this.rackUnitsField;
            }
            set {
                this.rackUnitsField = value;
                this.RaisePropertyChanged("RackUnits");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=6)]
        public string RegexpRule {
            get {
                return this.regexpRuleField;
            }
            set {
                this.regexpRuleField = value;
                this.RaisePropertyChanged("RegexpRule");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=7)]
        public string Abstract {
            get {
                return this.abstractField;
            }
            set {
                this.abstractField = value;
                this.RaisePropertyChanged("Abstract");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=8)]
        public string PlanUrl {
            get {
                return this.planUrlField;
            }
            set {
                this.planUrlField = value;
                this.RaisePropertyChanged("PlanUrl");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=9)]
        public string PlanCoordinates {
            get {
                return this.planCoordinatesField;
            }
            set {
                this.planCoordinatesField = value;
                this.RaisePropertyChanged("PlanCoordinates");
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.3163.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://inventory.psi.ch/DataAccess.asmx")]
    public partial class PrefixInformation : object, System.ComponentModel.INotifyPropertyChanged {
        
        private int idField;
        
        private string prefixField;
        
        private int lastidField;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=0)]
        public int Id {
            get {
                return this.idField;
            }
            set {
                this.idField = value;
                this.RaisePropertyChanged("Id");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=1)]
        public string Prefix {
            get {
                return this.prefixField;
            }
            set {
                this.prefixField = value;
                this.RaisePropertyChanged("Prefix");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=2)]
        public int Lastid {
            get {
                return this.lastidField;
            }
            set {
                this.lastidField = value;
                this.RaisePropertyChanged("Lastid");
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.3163.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://inventory.psi.ch/DataAccess.asmx")]
    public partial class DataClassField : object, System.ComponentModel.INotifyPropertyChanged {
        
        private int idField;
        
        private string nameField;
        
        private int dataTypeField;
        
        private string paramField;
        
        private System.Nullable<int> positionField;
        
        private string copyWhileExchangeField;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=0)]
        public int Id {
            get {
                return this.idField;
            }
            set {
                this.idField = value;
                this.RaisePropertyChanged("Id");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=1)]
        public string Name {
            get {
                return this.nameField;
            }
            set {
                this.nameField = value;
                this.RaisePropertyChanged("Name");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=2)]
        public int DataType {
            get {
                return this.dataTypeField;
            }
            set {
                this.dataTypeField = value;
                this.RaisePropertyChanged("DataType");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=3)]
        public string Param {
            get {
                return this.paramField;
            }
            set {
                this.paramField = value;
                this.RaisePropertyChanged("Param");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true, Order=4)]
        public System.Nullable<int> Position {
            get {
                return this.positionField;
            }
            set {
                this.positionField = value;
                this.RaisePropertyChanged("Position");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=5)]
        public string CopyWhileExchange {
            get {
                return this.copyWhileExchangeField;
            }
            set {
                this.copyWhileExchangeField = value;
                this.RaisePropertyChanged("CopyWhileExchange");
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.3163.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://inventory.psi.ch/DataAccess.asmx")]
    public partial class PartTypeAttribute : object, System.ComponentModel.INotifyPropertyChanged {
        
        private int idField;
        
        private string nameField;
        
        private string valueField;
        
        private System.Nullable<int> positionField;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=0)]
        public int Id {
            get {
                return this.idField;
            }
            set {
                this.idField = value;
                this.RaisePropertyChanged("Id");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=1)]
        public string Name {
            get {
                return this.nameField;
            }
            set {
                this.nameField = value;
                this.RaisePropertyChanged("Name");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=2)]
        public string Value {
            get {
                return this.valueField;
            }
            set {
                this.valueField = value;
                this.RaisePropertyChanged("Value");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true, Order=3)]
        public System.Nullable<int> Position {
            get {
                return this.positionField;
            }
            set {
                this.positionField = value;
                this.RaisePropertyChanged("Position");
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.3163.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://inventory.psi.ch/DataAccess.asmx")]
    public partial class PartTypeInfomation : object, System.ComponentModel.INotifyPropertyChanged {
        
        private int idField;
        
        private string nameField;
        
        private System.Nullable<int> parentField;
        
        private string abstractField;
        
        private int prefixField;
        
        private System.Nullable<int> classTypeField;
        
        private int categoryField;
        
        private string commentsField;
        
        private System.Nullable<int> companyIdField;
        
        private System.Nullable<int> manufacturerIdField;
        
        private System.Nullable<int> psiGroupIdField;
        
        private System.Nullable<int> defaultStockField;
        
        private string displayField;
        
        private System.Nullable<int> disturbanceField;
        
        private System.Nullable<decimal> priceField;
        
        private System.Nullable<int> rackUnitsField;
        
        private System.Nullable<int> stockMinimumField;
        
        private string statusField;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=0)]
        public int Id {
            get {
                return this.idField;
            }
            set {
                this.idField = value;
                this.RaisePropertyChanged("Id");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=1)]
        public string Name {
            get {
                return this.nameField;
            }
            set {
                this.nameField = value;
                this.RaisePropertyChanged("Name");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true, Order=2)]
        public System.Nullable<int> Parent {
            get {
                return this.parentField;
            }
            set {
                this.parentField = value;
                this.RaisePropertyChanged("Parent");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=3)]
        public string Abstract {
            get {
                return this.abstractField;
            }
            set {
                this.abstractField = value;
                this.RaisePropertyChanged("Abstract");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=4)]
        public int Prefix {
            get {
                return this.prefixField;
            }
            set {
                this.prefixField = value;
                this.RaisePropertyChanged("Prefix");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true, Order=5)]
        public System.Nullable<int> ClassType {
            get {
                return this.classTypeField;
            }
            set {
                this.classTypeField = value;
                this.RaisePropertyChanged("ClassType");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=6)]
        public int Category {
            get {
                return this.categoryField;
            }
            set {
                this.categoryField = value;
                this.RaisePropertyChanged("Category");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=7)]
        public string Comments {
            get {
                return this.commentsField;
            }
            set {
                this.commentsField = value;
                this.RaisePropertyChanged("Comments");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true, Order=8)]
        public System.Nullable<int> CompanyId {
            get {
                return this.companyIdField;
            }
            set {
                this.companyIdField = value;
                this.RaisePropertyChanged("CompanyId");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true, Order=9)]
        public System.Nullable<int> ManufacturerId {
            get {
                return this.manufacturerIdField;
            }
            set {
                this.manufacturerIdField = value;
                this.RaisePropertyChanged("ManufacturerId");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true, Order=10)]
        public System.Nullable<int> PsiGroupId {
            get {
                return this.psiGroupIdField;
            }
            set {
                this.psiGroupIdField = value;
                this.RaisePropertyChanged("PsiGroupId");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true, Order=11)]
        public System.Nullable<int> DefaultStock {
            get {
                return this.defaultStockField;
            }
            set {
                this.defaultStockField = value;
                this.RaisePropertyChanged("DefaultStock");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=12)]
        public string Display {
            get {
                return this.displayField;
            }
            set {
                this.displayField = value;
                this.RaisePropertyChanged("Display");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true, Order=13)]
        public System.Nullable<int> Disturbance {
            get {
                return this.disturbanceField;
            }
            set {
                this.disturbanceField = value;
                this.RaisePropertyChanged("Disturbance");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true, Order=14)]
        public System.Nullable<decimal> Price {
            get {
                return this.priceField;
            }
            set {
                this.priceField = value;
                this.RaisePropertyChanged("Price");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true, Order=15)]
        public System.Nullable<int> RackUnits {
            get {
                return this.rackUnitsField;
            }
            set {
                this.rackUnitsField = value;
                this.RaisePropertyChanged("RackUnits");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true, Order=16)]
        public System.Nullable<int> StockMinimum {
            get {
                return this.stockMinimumField;
            }
            set {
                this.stockMinimumField = value;
                this.RaisePropertyChanged("StockMinimum");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=17)]
        public string Status {
            get {
                return this.statusField;
            }
            set {
                this.statusField = value;
                this.RaisePropertyChanged("Status");
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.3163.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://inventory.psi.ch/DataAccess.asmx")]
    public partial class PartTypeConnector : object, System.ComponentModel.INotifyPropertyChanged {
        
        private int idField;
        
        private string nameField;
        
        private int contypeField;
        
        private string locationField;
        
        private string diagramFollowField;
        
        private System.Nullable<int> positionField;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=0)]
        public int Id {
            get {
                return this.idField;
            }
            set {
                this.idField = value;
                this.RaisePropertyChanged("Id");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=1)]
        public string Name {
            get {
                return this.nameField;
            }
            set {
                this.nameField = value;
                this.RaisePropertyChanged("Name");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=2)]
        public int Contype {
            get {
                return this.contypeField;
            }
            set {
                this.contypeField = value;
                this.RaisePropertyChanged("Contype");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=3)]
        public string Location {
            get {
                return this.locationField;
            }
            set {
                this.locationField = value;
                this.RaisePropertyChanged("Location");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=4)]
        public string DiagramFollow {
            get {
                return this.diagramFollowField;
            }
            set {
                this.diagramFollowField = value;
                this.RaisePropertyChanged("DiagramFollow");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true, Order=5)]
        public System.Nullable<int> Position {
            get {
                return this.positionField;
            }
            set {
                this.positionField = value;
                this.RaisePropertyChanged("Position");
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.3163.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://inventory.psi.ch/DataAccess.asmx")]
    public partial class Company : object, System.ComponentModel.INotifyPropertyChanged {
        
        private int idField;
        
        private string displayTitleField;
        
        private string nameField;
        
        private string addressField;
        
        private string plzField;
        
        private string cityField;
        
        private string countryField;
        
        private string contactField;
        
        private string phoneField;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=0)]
        public int Id {
            get {
                return this.idField;
            }
            set {
                this.idField = value;
                this.RaisePropertyChanged("Id");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=1)]
        public string DisplayTitle {
            get {
                return this.displayTitleField;
            }
            set {
                this.displayTitleField = value;
                this.RaisePropertyChanged("DisplayTitle");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=2)]
        public string Name {
            get {
                return this.nameField;
            }
            set {
                this.nameField = value;
                this.RaisePropertyChanged("Name");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=3)]
        public string Address {
            get {
                return this.addressField;
            }
            set {
                this.addressField = value;
                this.RaisePropertyChanged("Address");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=4)]
        public string Plz {
            get {
                return this.plzField;
            }
            set {
                this.plzField = value;
                this.RaisePropertyChanged("Plz");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=5)]
        public string City {
            get {
                return this.cityField;
            }
            set {
                this.cityField = value;
                this.RaisePropertyChanged("City");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=6)]
        public string Country {
            get {
                return this.countryField;
            }
            set {
                this.countryField = value;
                this.RaisePropertyChanged("Country");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=7)]
        public string Contact {
            get {
                return this.contactField;
            }
            set {
                this.contactField = value;
                this.RaisePropertyChanged("Contact");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=8)]
        public string Phone {
            get {
                return this.phoneField;
            }
            set {
                this.phoneField = value;
                this.RaisePropertyChanged("Phone");
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.3163.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://inventory.psi.ch/DataAccess.asmx")]
    public partial class SimpleNodeItem : object, System.ComponentModel.INotifyPropertyChanged {
        
        private int idField;
        
        private System.Nullable<int> parentIdField;
        
        private string nameField;
        
        private bool abstractField;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=0)]
        public int Id {
            get {
                return this.idField;
            }
            set {
                this.idField = value;
                this.RaisePropertyChanged("Id");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true, Order=1)]
        public System.Nullable<int> ParentId {
            get {
                return this.parentIdField;
            }
            set {
                this.parentIdField = value;
                this.RaisePropertyChanged("ParentId");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=2)]
        public string Name {
            get {
                return this.nameField;
            }
            set {
                this.nameField = value;
                this.RaisePropertyChanged("Name");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=3)]
        public bool Abstract {
            get {
                return this.abstractField;
            }
            set {
                this.abstractField = value;
                this.RaisePropertyChanged("Abstract");
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.3163.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://inventory.psi.ch/DataAccess.asmx")]
    public partial class PSP : object, System.ComponentModel.INotifyPropertyChanged {
        
        private string managerField;
        
        private string nameField;
        
        private string numberField;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=0)]
        public string Manager {
            get {
                return this.managerField;
            }
            set {
                this.managerField = value;
                this.RaisePropertyChanged("Manager");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=1)]
        public string Name {
            get {
                return this.nameField;
            }
            set {
                this.nameField = value;
                this.RaisePropertyChanged("Name");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=2)]
        public string Number {
            get {
                return this.numberField;
            }
            set {
                this.numberField = value;
                this.RaisePropertyChanged("Number");
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.3163.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://inventory.psi.ch/DataAccess.asmx")]
    public partial class PlanInformation : object, System.ComponentModel.INotifyPropertyChanged {
        
        private string coordinatesField;
        
        private string planUrlField;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=0)]
        public string Coordinates {
            get {
                return this.coordinatesField;
            }
            set {
                this.coordinatesField = value;
                this.RaisePropertyChanged("Coordinates");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=1)]
        public string PlanUrl {
            get {
                return this.planUrlField;
            }
            set {
                this.planUrlField = value;
                this.RaisePropertyChanged("PlanUrl");
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.3163.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://inventory.psi.ch/DataAccess.asmx")]
    public partial class MaintenanceHistory : object, System.ComponentModel.INotifyPropertyChanged {
        
        private int idField;
        
        private int sheetIdField;
        
        private string psiLabelField;
        
        private System.Nullable<System.DateTime> startTimeField;
        
        private System.Nullable<System.DateTime> endTimeField;
        
        private string descriptionField;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=0)]
        public int Id {
            get {
                return this.idField;
            }
            set {
                this.idField = value;
                this.RaisePropertyChanged("Id");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=1)]
        public int SheetId {
            get {
                return this.sheetIdField;
            }
            set {
                this.sheetIdField = value;
                this.RaisePropertyChanged("SheetId");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=2)]
        public string PsiLabel {
            get {
                return this.psiLabelField;
            }
            set {
                this.psiLabelField = value;
                this.RaisePropertyChanged("PsiLabel");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true, Order=3)]
        public System.Nullable<System.DateTime> StartTime {
            get {
                return this.startTimeField;
            }
            set {
                this.startTimeField = value;
                this.RaisePropertyChanged("StartTime");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true, Order=4)]
        public System.Nullable<System.DateTime> EndTime {
            get {
                return this.endTimeField;
            }
            set {
                this.endTimeField = value;
                this.RaisePropertyChanged("EndTime");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=5)]
        public string Description {
            get {
                return this.descriptionField;
            }
            set {
                this.descriptionField = value;
                this.RaisePropertyChanged("Description");
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.3163.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://inventory.psi.ch/DataAccess.asmx")]
    public partial class GatewayFilterType : object, System.ComponentModel.INotifyPropertyChanged {
        
        private int idField;
        
        private string labelField;
        
        private string nameField;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=0)]
        public int Id {
            get {
                return this.idField;
            }
            set {
                this.idField = value;
                this.RaisePropertyChanged("Id");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=1)]
        public string Label {
            get {
                return this.labelField;
            }
            set {
                this.labelField = value;
                this.RaisePropertyChanged("Label");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=2)]
        public string Name {
            get {
                return this.nameField;
            }
            set {
                this.nameField = value;
                this.RaisePropertyChanged("Name");
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.3163.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://inventory.psi.ch/DataAccess.asmx")]
    public partial class GatewayRule : object, System.ComponentModel.INotifyPropertyChanged {
        
        private int idField;
        
        private string sideField;
        
        private System.Nullable<int> filterTypeField;
        
        private string channelField;
        
        private System.Nullable<int> positionField;
        
        private string filterValueField;
        
        private string accessTypeField;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=0)]
        public int Id {
            get {
                return this.idField;
            }
            set {
                this.idField = value;
                this.RaisePropertyChanged("Id");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=1)]
        public string Side {
            get {
                return this.sideField;
            }
            set {
                this.sideField = value;
                this.RaisePropertyChanged("Side");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true, Order=2)]
        public System.Nullable<int> FilterType {
            get {
                return this.filterTypeField;
            }
            set {
                this.filterTypeField = value;
                this.RaisePropertyChanged("FilterType");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=3)]
        public string Channel {
            get {
                return this.channelField;
            }
            set {
                this.channelField = value;
                this.RaisePropertyChanged("Channel");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true, Order=4)]
        public System.Nullable<int> Position {
            get {
                return this.positionField;
            }
            set {
                this.positionField = value;
                this.RaisePropertyChanged("Position");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=5)]
        public string FilterValue {
            get {
                return this.filterValueField;
            }
            set {
                this.filterValueField = value;
                this.RaisePropertyChanged("FilterValue");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=6)]
        public string AccessType {
            get {
                return this.accessTypeField;
            }
            set {
                this.accessTypeField = value;
                this.RaisePropertyChanged("AccessType");
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.3163.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://inventory.psi.ch/DataAccess.asmx")]
    public partial class GatewayGroupFilter : object, System.ComponentModel.INotifyPropertyChanged {
        
        private int idField;
        
        private System.Nullable<int> filterTypeField;
        
        private string valueField;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=0)]
        public int Id {
            get {
                return this.idField;
            }
            set {
                this.idField = value;
                this.RaisePropertyChanged("Id");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true, Order=1)]
        public System.Nullable<int> FilterType {
            get {
                return this.filterTypeField;
            }
            set {
                this.filterTypeField = value;
                this.RaisePropertyChanged("FilterType");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=2)]
        public string Value {
            get {
                return this.valueField;
            }
            set {
                this.valueField = value;
                this.RaisePropertyChanged("Value");
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.3163.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://inventory.psi.ch/DataAccess.asmx")]
    public partial class GatewayGroup : object, System.ComponentModel.INotifyPropertyChanged {
        
        private int idField;
        
        private string nameField;
        
        private GatewayGroupFilter[] groupFiltersField;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=0)]
        public int Id {
            get {
                return this.idField;
            }
            set {
                this.idField = value;
                this.RaisePropertyChanged("Id");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=1)]
        public string Name {
            get {
                return this.nameField;
            }
            set {
                this.nameField = value;
                this.RaisePropertyChanged("Name");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlArrayAttribute(Order=2)]
        public GatewayGroupFilter[] GroupFilters {
            get {
                return this.groupFiltersField;
            }
            set {
                this.groupFiltersField = value;
                this.RaisePropertyChanged("GroupFilters");
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.3163.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://inventory.psi.ch/DataAccess.asmx")]
    public partial class GatewayConfiguration : object, System.ComponentModel.INotifyPropertyChanged {
        
        private GatewayGroup[] groupsField;
        
        private GatewayRule[] rulesField;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlArrayAttribute(Order=0)]
        public GatewayGroup[] Groups {
            get {
                return this.groupsField;
            }
            set {
                this.groupsField = value;
                this.RaisePropertyChanged("Groups");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlArrayAttribute(Order=1)]
        public GatewayRule[] Rules {
            get {
                return this.rulesField;
            }
            set {
                this.rulesField = value;
                this.RaisePropertyChanged("Rules");
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.3163.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://inventory.psi.ch/DataAccess.asmx")]
    public partial class TidNewDeviceRequest : object, System.ComponentModel.INotifyPropertyChanged {
        
        private System.Nullable<int> idField;
        
        private System.Nullable<System.DateTime> addedOnField;
        
        private int deviceClassIdField;
        
        private string deviceTypeField;
        
        private string deviceDescriptionField;
        
        private int manufacturerField;
        
        private string serialField;
        
        private int standardLocationField;
        
        private string contactPersonField;
        
        private string kostenstelleField;
        
        private string pSPField;
        
        private int distributorField;
        
        private string distributorPartNoField;
        
        private System.Nullable<int> requesterField;
        
        private string statusField;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true, Order=0)]
        public System.Nullable<int> Id {
            get {
                return this.idField;
            }
            set {
                this.idField = value;
                this.RaisePropertyChanged("Id");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true, Order=1)]
        public System.Nullable<System.DateTime> AddedOn {
            get {
                return this.addedOnField;
            }
            set {
                this.addedOnField = value;
                this.RaisePropertyChanged("AddedOn");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=2)]
        public int DeviceClassId {
            get {
                return this.deviceClassIdField;
            }
            set {
                this.deviceClassIdField = value;
                this.RaisePropertyChanged("DeviceClassId");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=3)]
        public string DeviceType {
            get {
                return this.deviceTypeField;
            }
            set {
                this.deviceTypeField = value;
                this.RaisePropertyChanged("DeviceType");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=4)]
        public string DeviceDescription {
            get {
                return this.deviceDescriptionField;
            }
            set {
                this.deviceDescriptionField = value;
                this.RaisePropertyChanged("DeviceDescription");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=5)]
        public int Manufacturer {
            get {
                return this.manufacturerField;
            }
            set {
                this.manufacturerField = value;
                this.RaisePropertyChanged("Manufacturer");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=6)]
        public string Serial {
            get {
                return this.serialField;
            }
            set {
                this.serialField = value;
                this.RaisePropertyChanged("Serial");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=7)]
        public int StandardLocation {
            get {
                return this.standardLocationField;
            }
            set {
                this.standardLocationField = value;
                this.RaisePropertyChanged("StandardLocation");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=8)]
        public string ContactPerson {
            get {
                return this.contactPersonField;
            }
            set {
                this.contactPersonField = value;
                this.RaisePropertyChanged("ContactPerson");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=9)]
        public string Kostenstelle {
            get {
                return this.kostenstelleField;
            }
            set {
                this.kostenstelleField = value;
                this.RaisePropertyChanged("Kostenstelle");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=10)]
        public string PSP {
            get {
                return this.pSPField;
            }
            set {
                this.pSPField = value;
                this.RaisePropertyChanged("PSP");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=11)]
        public int Distributor {
            get {
                return this.distributorField;
            }
            set {
                this.distributorField = value;
                this.RaisePropertyChanged("Distributor");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=12)]
        public string DistributorPartNo {
            get {
                return this.distributorPartNoField;
            }
            set {
                this.distributorPartNoField = value;
                this.RaisePropertyChanged("DistributorPartNo");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true, Order=13)]
        public System.Nullable<int> Requester {
            get {
                return this.requesterField;
            }
            set {
                this.requesterField = value;
                this.RaisePropertyChanged("Requester");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=14)]
        public string Status {
            get {
                return this.statusField;
            }
            set {
                this.statusField = value;
                this.RaisePropertyChanged("Status");
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.3163.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://inventory.psi.ch/DataAccess.asmx")]
    public partial class ShortUserInfo : object, System.ComponentModel.INotifyPropertyChanged {
        
        private int idField;
        
        private string firstNameField;
        
        private string lastNameField;
        
        private bool isActiveField;
        
        private string emailField;
        
        private string loginField;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=0)]
        public int Id {
            get {
                return this.idField;
            }
            set {
                this.idField = value;
                this.RaisePropertyChanged("Id");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=1)]
        public string FirstName {
            get {
                return this.firstNameField;
            }
            set {
                this.firstNameField = value;
                this.RaisePropertyChanged("FirstName");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=2)]
        public string LastName {
            get {
                return this.lastNameField;
            }
            set {
                this.lastNameField = value;
                this.RaisePropertyChanged("LastName");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=3)]
        public bool IsActive {
            get {
                return this.isActiveField;
            }
            set {
                this.isActiveField = value;
                this.RaisePropertyChanged("IsActive");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=4)]
        public string Email {
            get {
                return this.emailField;
            }
            set {
                this.emailField = value;
                this.RaisePropertyChanged("Email");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=5)]
        public string Login {
            get {
                return this.loginField;
            }
            set {
                this.loginField = value;
                this.RaisePropertyChanged("Login");
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.3163.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://inventory.psi.ch/DataAccess.asmx")]
    public partial class TidSearchResult : object, System.ComponentModel.INotifyPropertyChanged {
        
        private string psiLabelField;
        
        private string deviceClassField;
        
        private string manufacturerField;
        
        private string deviceNameField;
        
        private string statusField;
        
        private string shortDescriptionField;
        
        private string locationField;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=0)]
        public string PsiLabel {
            get {
                return this.psiLabelField;
            }
            set {
                this.psiLabelField = value;
                this.RaisePropertyChanged("PsiLabel");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=1)]
        public string DeviceClass {
            get {
                return this.deviceClassField;
            }
            set {
                this.deviceClassField = value;
                this.RaisePropertyChanged("DeviceClass");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=2)]
        public string Manufacturer {
            get {
                return this.manufacturerField;
            }
            set {
                this.manufacturerField = value;
                this.RaisePropertyChanged("Manufacturer");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=3)]
        public string DeviceName {
            get {
                return this.deviceNameField;
            }
            set {
                this.deviceNameField = value;
                this.RaisePropertyChanged("DeviceName");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=4)]
        public string Status {
            get {
                return this.statusField;
            }
            set {
                this.statusField = value;
                this.RaisePropertyChanged("Status");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=5)]
        public string ShortDescription {
            get {
                return this.shortDescriptionField;
            }
            set {
                this.shortDescriptionField = value;
                this.RaisePropertyChanged("ShortDescription");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=6)]
        public string Location {
            get {
                return this.locationField;
            }
            set {
                this.locationField = value;
                this.RaisePropertyChanged("Location");
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.3163.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://inventory.psi.ch/DataAccess.asmx")]
    public partial class TidHistory : object, System.ComponentModel.INotifyPropertyChanged {
        
        private int idField;
        
        private string borrowerField;
        
        private System.Nullable<System.DateTime> fromField;
        
        private System.Nullable<System.DateTime> toField;
        
        private string borrowedForField;
        
        private System.Nullable<System.DateTime> backAtField;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=0)]
        public int Id {
            get {
                return this.idField;
            }
            set {
                this.idField = value;
                this.RaisePropertyChanged("Id");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=1)]
        public string Borrower {
            get {
                return this.borrowerField;
            }
            set {
                this.borrowerField = value;
                this.RaisePropertyChanged("Borrower");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true, Order=2)]
        public System.Nullable<System.DateTime> From {
            get {
                return this.fromField;
            }
            set {
                this.fromField = value;
                this.RaisePropertyChanged("From");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true, Order=3)]
        public System.Nullable<System.DateTime> To {
            get {
                return this.toField;
            }
            set {
                this.toField = value;
                this.RaisePropertyChanged("To");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=4)]
        public string BorrowedFor {
            get {
                return this.borrowedForField;
            }
            set {
                this.borrowedForField = value;
                this.RaisePropertyChanged("BorrowedFor");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true, Order=5)]
        public System.Nullable<System.DateTime> BackAt {
            get {
                return this.backAtField;
            }
            set {
                this.backAtField = value;
                this.RaisePropertyChanged("BackAt");
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.3163.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://inventory.psi.ch/DataAccess.asmx")]
    public partial class TidManual : object, System.ComponentModel.INotifyPropertyChanged {
        
        private int idField;
        
        private string filenameField;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=0)]
        public int Id {
            get {
                return this.idField;
            }
            set {
                this.idField = value;
                this.RaisePropertyChanged("Id");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=1)]
        public string Filename {
            get {
                return this.filenameField;
            }
            set {
                this.filenameField = value;
                this.RaisePropertyChanged("Filename");
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.3163.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://inventory.psi.ch/DataAccess.asmx")]
    public partial class StoredSearch : object, System.ComponentModel.INotifyPropertyChanged {
        
        private int idField;
        
        private string nameField;
        
        private string jsonAttributesField;
        
        private string jsonRuleField;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=0)]
        public int Id {
            get {
                return this.idField;
            }
            set {
                this.idField = value;
                this.RaisePropertyChanged("Id");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=1)]
        public string Name {
            get {
                return this.nameField;
            }
            set {
                this.nameField = value;
                this.RaisePropertyChanged("Name");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=2)]
        public string JsonAttributes {
            get {
                return this.jsonAttributesField;
            }
            set {
                this.jsonAttributesField = value;
                this.RaisePropertyChanged("JsonAttributes");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=3)]
        public string JsonRule {
            get {
                return this.jsonRuleField;
            }
            set {
                this.jsonRuleField = value;
                this.RaisePropertyChanged("JsonRule");
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.3163.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://inventory.psi.ch/DataAccess.asmx")]
    public partial class DataFieldSpec : object, System.ComponentModel.INotifyPropertyChanged {
        
        private string nameField;
        
        private IdValuePair[] valuesField;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=0)]
        public string Name {
            get {
                return this.nameField;
            }
            set {
                this.nameField = value;
                this.RaisePropertyChanged("Name");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlArrayAttribute(Order=1)]
        public IdValuePair[] Values {
            get {
                return this.valuesField;
            }
            set {
                this.valuesField = value;
                this.RaisePropertyChanged("Values");
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.3163.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://inventory.psi.ch/DataAccess.asmx")]
    public partial class SearchCondition : object, System.ComponentModel.INotifyPropertyChanged {
        
        private string fieldField;
        
        private string operatorField;
        
        private string valueField;
        
        private SearchCondition firstConditionField;
        
        private SearchCondition andConditionField;
        
        private SearchCondition orConditionField;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=0)]
        public string Field {
            get {
                return this.fieldField;
            }
            set {
                this.fieldField = value;
                this.RaisePropertyChanged("Field");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=1)]
        public string Operator {
            get {
                return this.operatorField;
            }
            set {
                this.operatorField = value;
                this.RaisePropertyChanged("Operator");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=2)]
        public string Value {
            get {
                return this.valueField;
            }
            set {
                this.valueField = value;
                this.RaisePropertyChanged("Value");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=3)]
        public SearchCondition FirstCondition {
            get {
                return this.firstConditionField;
            }
            set {
                this.firstConditionField = value;
                this.RaisePropertyChanged("FirstCondition");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=4)]
        public SearchCondition AndCondition {
            get {
                return this.andConditionField;
            }
            set {
                this.andConditionField = value;
                this.RaisePropertyChanged("AndCondition");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=5)]
        public SearchCondition OrCondition {
            get {
                return this.orConditionField;
            }
            set {
                this.orConditionField = value;
                this.RaisePropertyChanged("OrCondition");
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.3163.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://inventory.psi.ch/DataAccess.asmx")]
    public partial class SearchDefinition : object, System.ComponentModel.INotifyPropertyChanged {
        
        private string[] columnsField;
        
        private SearchCondition[] queryField;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlArrayAttribute(Order=0)]
        public string[] Columns {
            get {
                return this.columnsField;
            }
            set {
                this.columnsField = value;
                this.RaisePropertyChanged("Columns");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlArrayAttribute(Order=1)]
        public SearchCondition[] Query {
            get {
                return this.queryField;
            }
            set {
                this.queryField = value;
                this.RaisePropertyChanged("Query");
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.3163.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://inventory.psi.ch/DataAccess.asmx")]
    public partial class RequestedPartTypeInformation : object, System.ComponentModel.INotifyPropertyChanged {
        
        private int partTypeField;
        
        private string partTypeNameField;
        
        private int requestedField;
        
        private int onStockField;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=0)]
        public int PartType {
            get {
                return this.partTypeField;
            }
            set {
                this.partTypeField = value;
                this.RaisePropertyChanged("PartType");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=1)]
        public string PartTypeName {
            get {
                return this.partTypeNameField;
            }
            set {
                this.partTypeNameField = value;
                this.RaisePropertyChanged("PartTypeName");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=2)]
        public int Requested {
            get {
                return this.requestedField;
            }
            set {
                this.requestedField = value;
                this.RaisePropertyChanged("Requested");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=3)]
        public int OnStock {
            get {
                return this.onStockField;
            }
            set {
                this.onStockField = value;
                this.RaisePropertyChanged("OnStock");
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.3163.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://inventory.psi.ch/DataAccess.asmx")]
    public partial class RequestInformation : object, System.ComponentModel.INotifyPropertyChanged {
        
        private int idField;
        
        private string psiLabelField;
        
        private System.Nullable<System.DateTime> requestedDateField;
        
        private string requestTypeField;
        
        private int requesterField;
        
        private string requesterNameField;
        
        private int requestPartTypeField;
        
        private string requestPartTypeNameField;
        
        private string sAPField;
        
        private System.Nullable<int> locationIdField;
        
        private string locationPathField;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=0)]
        public int Id {
            get {
                return this.idField;
            }
            set {
                this.idField = value;
                this.RaisePropertyChanged("Id");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=1)]
        public string PsiLabel {
            get {
                return this.psiLabelField;
            }
            set {
                this.psiLabelField = value;
                this.RaisePropertyChanged("PsiLabel");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true, Order=2)]
        public System.Nullable<System.DateTime> RequestedDate {
            get {
                return this.requestedDateField;
            }
            set {
                this.requestedDateField = value;
                this.RaisePropertyChanged("RequestedDate");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=3)]
        public string RequestType {
            get {
                return this.requestTypeField;
            }
            set {
                this.requestTypeField = value;
                this.RaisePropertyChanged("RequestType");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=4)]
        public int Requester {
            get {
                return this.requesterField;
            }
            set {
                this.requesterField = value;
                this.RaisePropertyChanged("Requester");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=5)]
        public string RequesterName {
            get {
                return this.requesterNameField;
            }
            set {
                this.requesterNameField = value;
                this.RaisePropertyChanged("RequesterName");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=6)]
        public int RequestPartType {
            get {
                return this.requestPartTypeField;
            }
            set {
                this.requestPartTypeField = value;
                this.RaisePropertyChanged("RequestPartType");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=7)]
        public string RequestPartTypeName {
            get {
                return this.requestPartTypeNameField;
            }
            set {
                this.requestPartTypeNameField = value;
                this.RaisePropertyChanged("RequestPartTypeName");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=8)]
        public string SAP {
            get {
                return this.sAPField;
            }
            set {
                this.sAPField = value;
                this.RaisePropertyChanged("SAP");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true, Order=9)]
        public System.Nullable<int> LocationId {
            get {
                return this.locationIdField;
            }
            set {
                this.locationIdField = value;
                this.RaisePropertyChanged("LocationId");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=10)]
        public string LocationPath {
            get {
                return this.locationPathField;
            }
            set {
                this.locationPathField = value;
                this.RaisePropertyChanged("LocationPath");
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.3163.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://inventory.psi.ch/DataAccess.asmx")]
    public partial class RackEntry : object, System.ComponentModel.INotifyPropertyChanged {
        
        private string labelField;
        
        private System.Nullable<int> positionField;
        
        private string typeNameField;
        
        private System.Nullable<int> unitsField;
        
        private string descriptionField;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=0)]
        public string Label {
            get {
                return this.labelField;
            }
            set {
                this.labelField = value;
                this.RaisePropertyChanged("Label");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true, Order=1)]
        public System.Nullable<int> Position {
            get {
                return this.positionField;
            }
            set {
                this.positionField = value;
                this.RaisePropertyChanged("Position");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=2)]
        public string TypeName {
            get {
                return this.typeNameField;
            }
            set {
                this.typeNameField = value;
                this.RaisePropertyChanged("TypeName");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true, Order=3)]
        public System.Nullable<int> Units {
            get {
                return this.unitsField;
            }
            set {
                this.unitsField = value;
                this.RaisePropertyChanged("Units");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=4)]
        public string Description {
            get {
                return this.descriptionField;
            }
            set {
                this.descriptionField = value;
                this.RaisePropertyChanged("Description");
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.3163.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://inventory.psi.ch/DataAccess.asmx")]
    public partial class Rack : object, System.ComponentModel.INotifyPropertyChanged {
        
        private RackEntry[] backField;
        
        private RackEntry[] freeField;
        
        private RackEntry[] frontField;
        
        private int locationField;
        
        private System.Nullable<int> rackUnitsField;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlArrayAttribute(Order=0)]
        public RackEntry[] Back {
            get {
                return this.backField;
            }
            set {
                this.backField = value;
                this.RaisePropertyChanged("Back");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlArrayAttribute(Order=1)]
        public RackEntry[] Free {
            get {
                return this.freeField;
            }
            set {
                this.freeField = value;
                this.RaisePropertyChanged("Free");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlArrayAttribute(Order=2)]
        public RackEntry[] Front {
            get {
                return this.frontField;
            }
            set {
                this.frontField = value;
                this.RaisePropertyChanged("Front");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=3)]
        public int Location {
            get {
                return this.locationField;
            }
            set {
                this.locationField = value;
                this.RaisePropertyChanged("Location");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true, Order=4)]
        public System.Nullable<int> RackUnits {
            get {
                return this.rackUnitsField;
            }
            set {
                this.rackUnitsField = value;
                this.RaisePropertyChanged("RackUnits");
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.3163.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://inventory.psi.ch/DataAccess.asmx")]
    public partial class SearchResult : object, System.ComponentModel.INotifyPropertyChanged {
        
        private string[] columnsField;
        
        private string[][] rowsField;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlArrayAttribute(Order=0)]
        public string[] Columns {
            get {
                return this.columnsField;
            }
            set {
                this.columnsField = value;
                this.RaisePropertyChanged("Columns");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlArrayAttribute(Order=1)]
        [System.Xml.Serialization.XmlArrayItemAttribute("ArrayOfString")]
        [System.Xml.Serialization.XmlArrayItemAttribute(NestingLevel=1)]
        public string[][] Rows {
            get {
                return this.rowsField;
            }
            set {
                this.rowsField = value;
                this.RaisePropertyChanged("Rows");
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.3163.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://inventory.psi.ch/DataAccess.asmx")]
    public partial class TreeNode : object, System.ComponentModel.INotifyPropertyChanged {
        
        private bool abstractField;
        
        private string commentsField;
        
        private string idField;
        
        private string valueField;
        
        private TreeNode[] childrenField;
        
        private bool openField;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=0)]
        public bool Abstract {
            get {
                return this.abstractField;
            }
            set {
                this.abstractField = value;
                this.RaisePropertyChanged("Abstract");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=1)]
        public string Comments {
            get {
                return this.commentsField;
            }
            set {
                this.commentsField = value;
                this.RaisePropertyChanged("Comments");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=2)]
        public string Id {
            get {
                return this.idField;
            }
            set {
                this.idField = value;
                this.RaisePropertyChanged("Id");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=3)]
        public string Value {
            get {
                return this.valueField;
            }
            set {
                this.valueField = value;
                this.RaisePropertyChanged("Value");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlArrayAttribute(Order=4)]
        public TreeNode[] Children {
            get {
                return this.childrenField;
            }
            set {
                this.childrenField = value;
                this.RaisePropertyChanged("Children");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=5)]
        public bool Open {
            get {
                return this.openField;
            }
            set {
                this.openField = value;
                this.RaisePropertyChanged("Open");
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(WrapperName="GetHandledRequests", WrapperNamespace="http://inventory.psi.ch/DataAccess.asmx", IsWrapped=true)]
    public partial class GetHandledRequestsRequest {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://inventory.psi.ch/DataAccess.asmx", Order=0)]
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public System.Nullable<System.DateTime> fromDate;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://inventory.psi.ch/DataAccess.asmx", Order=1)]
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public System.Nullable<System.DateTime> toDate;
        
        public GetHandledRequestsRequest() {
        }
        
        public GetHandledRequestsRequest(System.Nullable<System.DateTime> fromDate, System.Nullable<System.DateTime> toDate) {
            this.fromDate = fromDate;
            this.toDate = toDate;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(WrapperName="GetHandledRequestsResponse", WrapperNamespace="http://inventory.psi.ch/DataAccess.asmx", IsWrapped=true)]
    public partial class GetHandledRequestsResponse {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://inventory.psi.ch/DataAccess.asmx", Order=0)]
        public GWLogger.Inventory.SearchResult GetHandledRequestsResult;
        
        public GetHandledRequestsResponse() {
        }
        
        public GetHandledRequestsResponse(GWLogger.Inventory.SearchResult GetHandledRequestsResult) {
            this.GetHandledRequestsResult = GetHandledRequestsResult;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(WrapperName="SearchTid", WrapperNamespace="http://inventory.psi.ch/DataAccess.asmx", IsWrapped=true)]
    public partial class SearchTidRequest {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://inventory.psi.ch/DataAccess.asmx", Order=0)]
        public string txtSearch;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://inventory.psi.ch/DataAccess.asmx", Order=1)]
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public System.Nullable<int> tid;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://inventory.psi.ch/DataAccess.asmx", Order=2)]
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public System.Nullable<int> device;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://inventory.psi.ch/DataAccess.asmx", Order=3)]
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public System.Nullable<int> location;
        
        public SearchTidRequest() {
        }
        
        public SearchTidRequest(string txtSearch, System.Nullable<int> tid, System.Nullable<int> device, System.Nullable<int> location) {
            this.txtSearch = txtSearch;
            this.tid = tid;
            this.device = device;
            this.location = location;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(WrapperName="SearchTidResponse", WrapperNamespace="http://inventory.psi.ch/DataAccess.asmx", IsWrapped=true)]
    public partial class SearchTidResponse {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://inventory.psi.ch/DataAccess.asmx", Order=0)]
        public GWLogger.Inventory.TidSearchResult[] SearchTidResult;
        
        public SearchTidResponse() {
        }
        
        public SearchTidResponse(GWLogger.Inventory.TidSearchResult[] SearchTidResult) {
            this.SearchTidResult = SearchTidResult;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(WrapperName="AddPart", WrapperNamespace="http://inventory.psi.ch/DataAccess.asmx", IsWrapped=true)]
    public partial class AddPartRequest {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://inventory.psi.ch/DataAccess.asmx", Order=0)]
        public string tokenId;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://inventory.psi.ch/DataAccess.asmx", Order=1)]
        public int partType;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://inventory.psi.ch/DataAccess.asmx", Order=2)]
        public int location;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://inventory.psi.ch/DataAccess.asmx", Order=3)]
        public int startNb;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://inventory.psi.ch/DataAccess.asmx", Order=4)]
        public int endNb;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://inventory.psi.ch/DataAccess.asmx", Order=5)]
        public string usageType;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://inventory.psi.ch/DataAccess.asmx", Order=6)]
        public int hwStatus;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://inventory.psi.ch/DataAccess.asmx", Order=7)]
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public System.Nullable<int> price;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://inventory.psi.ch/DataAccess.asmx", Order=8)]
        public bool printLabels;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://inventory.psi.ch/DataAccess.asmx", Order=9)]
        public GWLogger.Inventory.AttributeField[] fields;
        
        public AddPartRequest() {
        }
        
        public AddPartRequest(string tokenId, int partType, int location, int startNb, int endNb, string usageType, int hwStatus, System.Nullable<int> price, bool printLabels, GWLogger.Inventory.AttributeField[] fields) {
            this.tokenId = tokenId;
            this.partType = partType;
            this.location = location;
            this.startNb = startNb;
            this.endNb = endNb;
            this.usageType = usageType;
            this.hwStatus = hwStatus;
            this.price = price;
            this.printLabels = printLabels;
            this.fields = fields;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(WrapperName="AddPartResponse", WrapperNamespace="http://inventory.psi.ch/DataAccess.asmx", IsWrapped=true)]
    public partial class AddPartResponse {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://inventory.psi.ch/DataAccess.asmx", Order=0)]
        public string[] AddPartResult;
        
        public AddPartResponse() {
        }
        
        public AddPartResponse(string[] AddPartResult) {
            this.AddPartResult = AddPartResult;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(WrapperName="GetEpicsBootInfoServiceLogs", WrapperNamespace="http://inventory.psi.ch/DataAccess.asmx", IsWrapped=true)]
    public partial class GetEpicsBootInfoServiceLogsRequest {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://inventory.psi.ch/DataAccess.asmx", Order=0)]
        public System.DateTime from;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://inventory.psi.ch/DataAccess.asmx", Order=1)]
        public System.DateTime to;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://inventory.psi.ch/DataAccess.asmx", Order=2)]
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public System.Nullable<int> limit;
        
        public GetEpicsBootInfoServiceLogsRequest() {
        }
        
        public GetEpicsBootInfoServiceLogsRequest(System.DateTime from, System.DateTime to, System.Nullable<int> limit) {
            this.from = from;
            this.to = to;
            this.limit = limit;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(WrapperName="GetEpicsBootInfoServiceLogsResponse", WrapperNamespace="http://inventory.psi.ch/DataAccess.asmx", IsWrapped=true)]
    public partial class GetEpicsBootInfoServiceLogsResponse {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://inventory.psi.ch/DataAccess.asmx", Order=0)]
        public GWLogger.Inventory.EpicsBootInfoServiceLogEntry[] GetEpicsBootInfoServiceLogsResult;
        
        public GetEpicsBootInfoServiceLogsResponse() {
        }
        
        public GetEpicsBootInfoServiceLogsResponse(GWLogger.Inventory.EpicsBootInfoServiceLogEntry[] GetEpicsBootInfoServiceLogsResult) {
            this.GetEpicsBootInfoServiceLogsResult = GetEpicsBootInfoServiceLogsResult;
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface DataAccessSoapChannel : GWLogger.Inventory.DataAccessSoap, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class DataAccessSoapClient : System.ServiceModel.ClientBase<GWLogger.Inventory.DataAccessSoap>, GWLogger.Inventory.DataAccessSoap {
        
        public DataAccessSoapClient() {
        }
        
        public DataAccessSoapClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public DataAccessSoapClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public DataAccessSoapClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public DataAccessSoapClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public void DeleteDocument(string tokenId, string link) {
            base.Channel.DeleteDocument(tokenId, link);
        }
        
        public System.Threading.Tasks.Task DeleteDocumentAsync(string tokenId, string link) {
            return base.Channel.DeleteDocumentAsync(tokenId, link);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        GWLogger.Inventory.UploadPartDocumentResponse GWLogger.Inventory.DataAccessSoap.UploadPartDocument(GWLogger.Inventory.UploadPartDocumentRequest request) {
            return base.Channel.UploadPartDocument(request);
        }
        
        public string UploadPartDocument(string tokenId, string psiLabel, string comment, string filename, byte[] fileContent) {
            GWLogger.Inventory.UploadPartDocumentRequest inValue = new GWLogger.Inventory.UploadPartDocumentRequest();
            inValue.tokenId = tokenId;
            inValue.psiLabel = psiLabel;
            inValue.comment = comment;
            inValue.filename = filename;
            inValue.fileContent = fileContent;
            GWLogger.Inventory.UploadPartDocumentResponse retVal = ((GWLogger.Inventory.DataAccessSoap)(this)).UploadPartDocument(inValue);
            return retVal.UploadPartDocumentResult;
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.Threading.Tasks.Task<GWLogger.Inventory.UploadPartDocumentResponse> GWLogger.Inventory.DataAccessSoap.UploadPartDocumentAsync(GWLogger.Inventory.UploadPartDocumentRequest request) {
            return base.Channel.UploadPartDocumentAsync(request);
        }
        
        public System.Threading.Tasks.Task<GWLogger.Inventory.UploadPartDocumentResponse> UploadPartDocumentAsync(string tokenId, string psiLabel, string comment, string filename, byte[] fileContent) {
            GWLogger.Inventory.UploadPartDocumentRequest inValue = new GWLogger.Inventory.UploadPartDocumentRequest();
            inValue.tokenId = tokenId;
            inValue.psiLabel = psiLabel;
            inValue.comment = comment;
            inValue.filename = filename;
            inValue.fileContent = fileContent;
            return ((GWLogger.Inventory.DataAccessSoap)(this)).UploadPartDocumentAsync(inValue);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        GWLogger.Inventory.UploadPartTypeDocumentResponse GWLogger.Inventory.DataAccessSoap.UploadPartTypeDocument(GWLogger.Inventory.UploadPartTypeDocumentRequest request) {
            return base.Channel.UploadPartTypeDocument(request);
        }
        
        public string UploadPartTypeDocument(string tokenId, string psiLabel, string comment, string filename, byte[] fileContent) {
            GWLogger.Inventory.UploadPartTypeDocumentRequest inValue = new GWLogger.Inventory.UploadPartTypeDocumentRequest();
            inValue.tokenId = tokenId;
            inValue.psiLabel = psiLabel;
            inValue.comment = comment;
            inValue.filename = filename;
            inValue.fileContent = fileContent;
            GWLogger.Inventory.UploadPartTypeDocumentResponse retVal = ((GWLogger.Inventory.DataAccessSoap)(this)).UploadPartTypeDocument(inValue);
            return retVal.UploadPartTypeDocumentResult;
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.Threading.Tasks.Task<GWLogger.Inventory.UploadPartTypeDocumentResponse> GWLogger.Inventory.DataAccessSoap.UploadPartTypeDocumentAsync(GWLogger.Inventory.UploadPartTypeDocumentRequest request) {
            return base.Channel.UploadPartTypeDocumentAsync(request);
        }
        
        public System.Threading.Tasks.Task<GWLogger.Inventory.UploadPartTypeDocumentResponse> UploadPartTypeDocumentAsync(string tokenId, string psiLabel, string comment, string filename, byte[] fileContent) {
            GWLogger.Inventory.UploadPartTypeDocumentRequest inValue = new GWLogger.Inventory.UploadPartTypeDocumentRequest();
            inValue.tokenId = tokenId;
            inValue.psiLabel = psiLabel;
            inValue.comment = comment;
            inValue.filename = filename;
            inValue.fileContent = fileContent;
            return ((GWLogger.Inventory.DataAccessSoap)(this)).UploadPartTypeDocumentAsync(inValue);
        }
        
        public string GetPartDiagramMap(string psiLabel) {
            return base.Channel.GetPartDiagramMap(psiLabel);
        }
        
        public System.Threading.Tasks.Task<string> GetPartDiagramMapAsync(string psiLabel) {
            return base.Channel.GetPartDiagramMapAsync(psiLabel);
        }
        
        public void UpdateAttributes(string tokenId, string psiLabel, GWLogger.Inventory.AttributeField[] fields) {
            base.Channel.UpdateAttributes(tokenId, psiLabel, fields);
        }
        
        public System.Threading.Tasks.Task UpdateAttributesAsync(string tokenId, string psiLabel, GWLogger.Inventory.AttributeField[] fields) {
            return base.Channel.UpdateAttributesAsync(tokenId, psiLabel, fields);
        }
        
        public void PlugPart(string tokenId, string parentLabel, string connName, string childLabel) {
            base.Channel.PlugPart(tokenId, parentLabel, connName, childLabel);
        }
        
        public System.Threading.Tasks.Task PlugPartAsync(string tokenId, string parentLabel, string connName, string childLabel) {
            return base.Channel.PlugPartAsync(tokenId, parentLabel, connName, childLabel);
        }
        
        public void PlugInPlace(string tokenId, string psiLabel, string newLabel) {
            base.Channel.PlugInPlace(tokenId, psiLabel, newLabel);
        }
        
        public System.Threading.Tasks.Task PlugInPlaceAsync(string tokenId, string psiLabel, string newLabel) {
            return base.Channel.PlugInPlaceAsync(tokenId, psiLabel, newLabel);
        }
        
        public bool CanPlace(string parentLabel, string connName, string childLabel) {
            return base.Channel.CanPlace(parentLabel, connName, childLabel);
        }
        
        public System.Threading.Tasks.Task<bool> CanPlaceAsync(string parentLabel, string connName, string childLabel) {
            return base.Channel.CanPlaceAsync(parentLabel, connName, childLabel);
        }
        
        public string PluggedPart(string parentLabel, string connName) {
            return base.Channel.PluggedPart(parentLabel, connName);
        }
        
        public System.Threading.Tasks.Task<string> PluggedPartAsync(string parentLabel, string connName) {
            return base.Channel.PluggedPartAsync(parentLabel, connName);
        }
        
        public GWLogger.Inventory.TreeNode[] GetCompatibleStockItems(string parentLabel, string connName) {
            return base.Channel.GetCompatibleStockItems(parentLabel, connName);
        }
        
        public System.Threading.Tasks.Task<GWLogger.Inventory.TreeNode[]> GetCompatibleStockItemsAsync(string parentLabel, string connName) {
            return base.Channel.GetCompatibleStockItemsAsync(parentLabel, connName);
        }
        
        public GWLogger.Inventory.TreeNode[] GetCompatibleStockItemsForPart(string currentPart) {
            return base.Channel.GetCompatibleStockItemsForPart(currentPart);
        }
        
        public System.Threading.Tasks.Task<GWLogger.Inventory.TreeNode[]> GetCompatibleStockItemsForPartAsync(string currentPart) {
            return base.Channel.GetCompatibleStockItemsForPartAsync(currentPart);
        }
        
        public GWLogger.Inventory.TreeNode[] GetCompatibleItems(string parentLabel, string connName) {
            return base.Channel.GetCompatibleItems(parentLabel, connName);
        }
        
        public System.Threading.Tasks.Task<GWLogger.Inventory.TreeNode[]> GetCompatibleItemsAsync(string parentLabel, string connName) {
            return base.Channel.GetCompatibleItemsAsync(parentLabel, connName);
        }
        
        public GWLogger.Inventory.TreeNode[] GetCompatibleItemsForPart(string currentPart) {
            return base.Channel.GetCompatibleItemsForPart(currentPart);
        }
        
        public System.Threading.Tasks.Task<GWLogger.Inventory.TreeNode[]> GetCompatibleItemsForPartAsync(string currentPart) {
            return base.Channel.GetCompatibleItemsForPartAsync(currentPart);
        }
        
        public GWLogger.Inventory.TreeNode[] GetCompatibleExchangeItems(string parentLabel, string connName) {
            return base.Channel.GetCompatibleExchangeItems(parentLabel, connName);
        }
        
        public System.Threading.Tasks.Task<GWLogger.Inventory.TreeNode[]> GetCompatibleExchangeItemsAsync(string parentLabel, string connName) {
            return base.Channel.GetCompatibleExchangeItemsAsync(parentLabel, connName);
        }
        
        public GWLogger.Inventory.TreeNode[] GetCompatibleExchangeItemsForPart(string currentPart) {
            return base.Channel.GetCompatibleExchangeItemsForPart(currentPart);
        }
        
        public System.Threading.Tasks.Task<GWLogger.Inventory.TreeNode[]> GetCompatibleExchangeItemsForPartAsync(string currentPart) {
            return base.Channel.GetCompatibleExchangeItemsForPartAsync(currentPart);
        }
        
        public string ReturnPartToStock(string tokenId, string psiLabel, int location) {
            return base.Channel.ReturnPartToStock(tokenId, psiLabel, location);
        }
        
        public System.Threading.Tasks.Task<string> ReturnPartToStockAsync(string tokenId, string psiLabel, int location) {
            return base.Channel.ReturnPartToStockAsync(tokenId, psiLabel, location);
        }
        
        public void ExchangePart(string tokenId, string psiLabel, string newPart, int returnLocation, int hwStatus, string usageType) {
            base.Channel.ExchangePart(tokenId, psiLabel, newPart, returnLocation, hwStatus, usageType);
        }
        
        public System.Threading.Tasks.Task ExchangePartAsync(string tokenId, string psiLabel, string newPart, int returnLocation, int hwStatus, string usageType) {
            return base.Channel.ExchangePartAsync(tokenId, psiLabel, newPart, returnLocation, hwStatus, usageType);
        }
        
        public void CutConnection(string tokenId, string psiLabel, string connName) {
            base.Channel.CutConnection(tokenId, psiLabel, connName);
        }
        
        public System.Threading.Tasks.Task CutConnectionAsync(string tokenId, string psiLabel, string connName) {
            return base.Channel.CutConnectionAsync(tokenId, psiLabel, connName);
        }
        
        public GWLogger.Inventory.SearchResult GetStockWatch() {
            return base.Channel.GetStockWatch();
        }
        
        public System.Threading.Tasks.Task<GWLogger.Inventory.SearchResult> GetStockWatchAsync() {
            return base.Channel.GetStockWatchAsync();
        }
        
        public GWLogger.Inventory.Rack GetRack(int locationId) {
            return base.Channel.GetRack(locationId);
        }
        
        public System.Threading.Tasks.Task<GWLogger.Inventory.Rack> GetRackAsync(int locationId) {
            return base.Channel.GetRackAsync(locationId);
        }
        
        public void SetRackPosition(string tokenId, string label, string location, int position) {
            base.Channel.SetRackPosition(tokenId, label, location, position);
        }
        
        public System.Threading.Tasks.Task SetRackPositionAsync(string tokenId, string label, string location, int position) {
            return base.Channel.SetRackPositionAsync(tokenId, label, location, position);
        }
        
        public GWLogger.Inventory.SearchResult ParentNotSameLocation() {
            return base.Channel.ParentNotSameLocation();
        }
        
        public System.Threading.Tasks.Task<GWLogger.Inventory.SearchResult> ParentNotSameLocationAsync() {
            return base.Channel.ParentNotSameLocationAsync();
        }
        
        public string GetRequestPsp(string psiLabel) {
            return base.Channel.GetRequestPsp(psiLabel);
        }
        
        public System.Threading.Tasks.Task<string> GetRequestPspAsync(string psiLabel) {
            return base.Channel.GetRequestPspAsync(psiLabel);
        }
        
        public string CheckRequest(string psiLabel) {
            return base.Channel.CheckRequest(psiLabel);
        }
        
        public System.Threading.Tasks.Task<string> CheckRequestAsync(string psiLabel) {
            return base.Channel.CheckRequestAsync(psiLabel);
        }
        
        public GWLogger.Inventory.RequestInformation GetRequest(string psiLabel) {
            return base.Channel.GetRequest(psiLabel);
        }
        
        public System.Threading.Tasks.Task<GWLogger.Inventory.RequestInformation> GetRequestAsync(string psiLabel) {
            return base.Channel.GetRequestAsync(psiLabel);
        }
        
        public string RequestedPartTypeName(string psiLabel) {
            return base.Channel.RequestedPartTypeName(psiLabel);
        }
        
        public System.Threading.Tasks.Task<string> RequestedPartTypeNameAsync(string psiLabel) {
            return base.Channel.RequestedPartTypeNameAsync(psiLabel);
        }
        
        public int RequestedPartType(string psiLabel) {
            return base.Channel.RequestedPartType(psiLabel);
        }
        
        public System.Threading.Tasks.Task<int> RequestedPartTypeAsync(string psiLabel) {
            return base.Channel.RequestedPartTypeAsync(psiLabel);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        GWLogger.Inventory.GetHandledRequestsResponse GWLogger.Inventory.DataAccessSoap.GetHandledRequests(GWLogger.Inventory.GetHandledRequestsRequest request) {
            return base.Channel.GetHandledRequests(request);
        }
        
        public GWLogger.Inventory.SearchResult GetHandledRequests(System.Nullable<System.DateTime> fromDate, System.Nullable<System.DateTime> toDate) {
            GWLogger.Inventory.GetHandledRequestsRequest inValue = new GWLogger.Inventory.GetHandledRequestsRequest();
            inValue.fromDate = fromDate;
            inValue.toDate = toDate;
            GWLogger.Inventory.GetHandledRequestsResponse retVal = ((GWLogger.Inventory.DataAccessSoap)(this)).GetHandledRequests(inValue);
            return retVal.GetHandledRequestsResult;
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.Threading.Tasks.Task<GWLogger.Inventory.GetHandledRequestsResponse> GWLogger.Inventory.DataAccessSoap.GetHandledRequestsAsync(GWLogger.Inventory.GetHandledRequestsRequest request) {
            return base.Channel.GetHandledRequestsAsync(request);
        }
        
        public System.Threading.Tasks.Task<GWLogger.Inventory.GetHandledRequestsResponse> GetHandledRequestsAsync(System.Nullable<System.DateTime> fromDate, System.Nullable<System.DateTime> toDate) {
            GWLogger.Inventory.GetHandledRequestsRequest inValue = new GWLogger.Inventory.GetHandledRequestsRequest();
            inValue.fromDate = fromDate;
            inValue.toDate = toDate;
            return ((GWLogger.Inventory.DataAccessSoap)(this)).GetHandledRequestsAsync(inValue);
        }
        
        public string AddRequestForSlot(string tokenId, string psiLabel, string connName, int partType, int location, string deadline, string pspNumber, string comment) {
            return base.Channel.AddRequestForSlot(tokenId, psiLabel, connName, partType, location, deadline, pspNumber, comment);
        }
        
        public System.Threading.Tasks.Task<string> AddRequestForSlotAsync(string tokenId, string psiLabel, string connName, int partType, int location, string deadline, string pspNumber, string comment) {
            return base.Channel.AddRequestForSlotAsync(tokenId, psiLabel, connName, partType, location, deadline, pspNumber, comment);
        }
        
        public string[] AddRequest(string tokenId, int amount, int partType, int location, string deadline, string pspNumber, string comment) {
            return base.Channel.AddRequest(tokenId, amount, partType, location, deadline, pspNumber, comment);
        }
        
        public System.Threading.Tasks.Task<string[]> AddRequestAsync(string tokenId, int amount, int partType, int location, string deadline, string pspNumber, string comment) {
            return base.Channel.AddRequestAsync(tokenId, amount, partType, location, deadline, pspNumber, comment);
        }
        
        public void ChangeRequestPSP(string tokenId, string psiLabel, string pspNumber) {
            base.Channel.ChangeRequestPSP(tokenId, psiLabel, pspNumber);
        }
        
        public System.Threading.Tasks.Task ChangeRequestPSPAsync(string tokenId, string psiLabel, string pspNumber) {
            return base.Channel.ChangeRequestPSPAsync(tokenId, psiLabel, pspNumber);
        }
        
        public void CancelRequestOnPart(string tokenId, string psiLabel) {
            base.Channel.CancelRequestOnPart(tokenId, psiLabel);
        }
        
        public System.Threading.Tasks.Task CancelRequestOnPartAsync(string tokenId, string psiLabel) {
            return base.Channel.CancelRequestOnPartAsync(tokenId, psiLabel);
        }
        
        public int AddRequestToRemove(string tokenId, string psiLabel, string comment, string dealine) {
            return base.Channel.AddRequestToRemove(tokenId, psiLabel, comment, dealine);
        }
        
        public System.Threading.Tasks.Task<int> AddRequestToRemoveAsync(string tokenId, string psiLabel, string comment, string dealine) {
            return base.Channel.AddRequestToRemoveAsync(tokenId, psiLabel, comment, dealine);
        }
        
        public int AddRequestToExchange(string tokenId, string psiLabel, int newPartType, string comment, string dealine, string pspNumber) {
            return base.Channel.AddRequestToExchange(tokenId, psiLabel, newPartType, comment, dealine, pspNumber);
        }
        
        public System.Threading.Tasks.Task<int> AddRequestToExchangeAsync(string tokenId, string psiLabel, int newPartType, string comment, string dealine, string pspNumber) {
            return base.Channel.AddRequestToExchangeAsync(tokenId, psiLabel, newPartType, comment, dealine, pspNumber);
        }
        
        public int RequestOwnerOnPart(string psiLabel) {
            return base.Channel.RequestOwnerOnPart(psiLabel);
        }
        
        public System.Threading.Tasks.Task<int> RequestOwnerOnPartAsync(string psiLabel) {
            return base.Channel.RequestOwnerOnPartAsync(psiLabel);
        }
        
        public GWLogger.Inventory.RequestedPartTypeInformation[] RequestedPartTypes(string tokenId) {
            return base.Channel.RequestedPartTypes(tokenId);
        }
        
        public System.Threading.Tasks.Task<GWLogger.Inventory.RequestedPartTypeInformation[]> RequestedPartTypesAsync(string tokenId) {
            return base.Channel.RequestedPartTypesAsync(tokenId);
        }
        
        public GWLogger.Inventory.RequestInformation[] OpenRequests(string tokenId) {
            return base.Channel.OpenRequests(tokenId);
        }
        
        public System.Threading.Tasks.Task<GWLogger.Inventory.RequestInformation[]> OpenRequestsAsync(string tokenId) {
            return base.Channel.OpenRequestsAsync(tokenId);
        }
        
        public GWLogger.Inventory.RequestInformation[] OpenPersonalRequests(string tokenId) {
            return base.Channel.OpenPersonalRequests(tokenId);
        }
        
        public System.Threading.Tasks.Task<GWLogger.Inventory.RequestInformation[]> OpenPersonalRequestsAsync(string tokenId) {
            return base.Channel.OpenPersonalRequestsAsync(tokenId);
        }
        
        public GWLogger.Inventory.SearchResult FindObjects(GWLogger.Inventory.SearchDefinition search) {
            return base.Channel.FindObjects(search);
        }
        
        public System.Threading.Tasks.Task<GWLogger.Inventory.SearchResult> FindObjectsAsync(GWLogger.Inventory.SearchDefinition search) {
            return base.Channel.FindObjectsAsync(search);
        }
        
        public string[] GetAllAttributes() {
            return base.Channel.GetAllAttributes();
        }
        
        public System.Threading.Tasks.Task<string[]> GetAllAttributesAsync() {
            return base.Channel.GetAllAttributesAsync();
        }
        
        public GWLogger.Inventory.DataFieldSpec[] GetAllDataFields() {
            return base.Channel.GetAllDataFields();
        }
        
        public System.Threading.Tasks.Task<GWLogger.Inventory.DataFieldSpec[]> GetAllDataFieldsAsync() {
            return base.Channel.GetAllDataFieldsAsync();
        }
        
        public GWLogger.Inventory.IdValuePair[] GetStoredSearches(string tokenId) {
            return base.Channel.GetStoredSearches(tokenId);
        }
        
        public System.Threading.Tasks.Task<GWLogger.Inventory.IdValuePair[]> GetStoredSearchesAsync(string tokenId) {
            return base.Channel.GetStoredSearchesAsync(tokenId);
        }
        
        public GWLogger.Inventory.StoredSearch GetStoredSearche(int searchId) {
            return base.Channel.GetStoredSearche(searchId);
        }
        
        public System.Threading.Tasks.Task<GWLogger.Inventory.StoredSearch> GetStoredSearcheAsync(int searchId) {
            return base.Channel.GetStoredSearcheAsync(searchId);
        }
        
        public void AddStoredSearch(string tokenId, string name, string attributes, string rule) {
            base.Channel.AddStoredSearch(tokenId, name, attributes, rule);
        }
        
        public System.Threading.Tasks.Task AddStoredSearchAsync(string tokenId, string name, string attributes, string rule) {
            return base.Channel.AddStoredSearchAsync(tokenId, name, attributes, rule);
        }
        
        public void DeleteStoredSearch(string tokenId, int searchId) {
            base.Channel.DeleteStoredSearch(tokenId, searchId);
        }
        
        public System.Threading.Tasks.Task DeleteStoredSearchAsync(string tokenId, int searchId) {
            return base.Channel.DeleteStoredSearchAsync(tokenId, searchId);
        }
        
        public void CleanSearchCache() {
            base.Channel.CleanSearchCache();
        }
        
        public System.Threading.Tasks.Task CleanSearchCacheAsync() {
            return base.Channel.CleanSearchCacheAsync();
        }
        
        public GWLogger.Inventory.IdValuePair[] GetStatTypes() {
            return base.Channel.GetStatTypes();
        }
        
        public System.Threading.Tasks.Task<GWLogger.Inventory.IdValuePair[]> GetStatTypesAsync() {
            return base.Channel.GetStatTypesAsync();
        }
        
        public double[] GetYearStat(int year, int stat) {
            return base.Channel.GetYearStat(year, stat);
        }
        
        public System.Threading.Tasks.Task<double[]> GetYearStatAsync(int year, int stat) {
            return base.Channel.GetYearStatAsync(year, stat);
        }
        
        public double[] GetMonthStat(int year, int month, int stat) {
            return base.Channel.GetMonthStat(year, month, stat);
        }
        
        public System.Threading.Tasks.Task<double[]> GetMonthStatAsync(int year, int month, int stat) {
            return base.Channel.GetMonthStatAsync(year, month, stat);
        }
        
        public GWLogger.Inventory.IdValuePair[] GetTids() {
            return base.Channel.GetTids();
        }
        
        public System.Threading.Tasks.Task<GWLogger.Inventory.IdValuePair[]> GetTidsAsync() {
            return base.Channel.GetTidsAsync();
        }
        
        public GWLogger.Inventory.TidManual[] GetTidManuals(string psiLabel) {
            return base.Channel.GetTidManuals(psiLabel);
        }
        
        public System.Threading.Tasks.Task<GWLogger.Inventory.TidManual[]> GetTidManualsAsync(string psiLabel) {
            return base.Channel.GetTidManualsAsync(psiLabel);
        }
        
        public GWLogger.Inventory.TidHistory[] GetTidHistory(string psiLabel) {
            return base.Channel.GetTidHistory(psiLabel);
        }
        
        public System.Threading.Tasks.Task<GWLogger.Inventory.TidHistory[]> GetTidHistoryAsync(string psiLabel) {
            return base.Channel.GetTidHistoryAsync(psiLabel);
        }
        
        public bool IsTidPart(string psiLabel) {
            return base.Channel.IsTidPart(psiLabel);
        }
        
        public System.Threading.Tasks.Task<bool> IsTidPartAsync(string psiLabel) {
            return base.Channel.IsTidPartAsync(psiLabel);
        }
        
        public GWLogger.Inventory.TidSearchResult[] GetBorrowedItems(string tokenId) {
            return base.Channel.GetBorrowedItems(tokenId);
        }
        
        public System.Threading.Tasks.Task<GWLogger.Inventory.TidSearchResult[]> GetBorrowedItemsAsync(string tokenId) {
            return base.Channel.GetBorrowedItemsAsync(tokenId);
        }
        
        public void DeleteTidManual(string tokenId, int manualId) {
            base.Channel.DeleteTidManual(tokenId, manualId);
        }
        
        public System.Threading.Tasks.Task DeleteTidManualAsync(string tokenId, int manualId) {
            return base.Channel.DeleteTidManualAsync(tokenId, manualId);
        }
        
        public void DuplicateTid(string tokenId, string psiLabel, string newPsiLabel) {
            base.Channel.DuplicateTid(tokenId, psiLabel, newPsiLabel);
        }
        
        public System.Threading.Tasks.Task DuplicateTidAsync(string tokenId, string psiLabel, string newPsiLabel) {
            return base.Channel.DuplicateTidAsync(tokenId, psiLabel, newPsiLabel);
        }
        
        public bool TidCanJoin(string tokenId, string psiLabel) {
            return base.Channel.TidCanJoin(tokenId, psiLabel);
        }
        
        public System.Threading.Tasks.Task<bool> TidCanJoinAsync(string tokenId, string psiLabel) {
            return base.Channel.TidCanJoinAsync(tokenId, psiLabel);
        }
        
        public bool TidCanAskToBorrow(string tokenId, string psiLabel) {
            return base.Channel.TidCanAskToBorrow(tokenId, psiLabel);
        }
        
        public System.Threading.Tasks.Task<bool> TidCanAskToBorrowAsync(string tokenId, string psiLabel) {
            return base.Channel.TidCanAskToBorrowAsync(tokenId, psiLabel);
        }
        
        public bool TidCanBorrow(string tokenId, string psiLabel) {
            return base.Channel.TidCanBorrow(tokenId, psiLabel);
        }
        
        public System.Threading.Tasks.Task<bool> TidCanBorrowAsync(string tokenId, string psiLabel) {
            return base.Channel.TidCanBorrowAsync(tokenId, psiLabel);
        }
        
        public bool TidCanReturn(string tokenId, string psiLabel) {
            return base.Channel.TidCanReturn(tokenId, psiLabel);
        }
        
        public System.Threading.Tasks.Task<bool> TidCanReturnAsync(string tokenId, string psiLabel) {
            return base.Channel.TidCanReturnAsync(tokenId, psiLabel);
        }
        
        public void TidReturnPart(string tokenId, string psiLabel) {
            base.Channel.TidReturnPart(tokenId, psiLabel);
        }
        
        public System.Threading.Tasks.Task TidReturnPartAsync(string tokenId, string psiLabel) {
            return base.Channel.TidReturnPartAsync(tokenId, psiLabel);
        }
        
        public void TidAskToBorrowPart(string tokenId, string psiLabel, System.DateTime borrowTo) {
            base.Channel.TidAskToBorrowPart(tokenId, psiLabel, borrowTo);
        }
        
        public System.Threading.Tasks.Task TidAskToBorrowPartAsync(string tokenId, string psiLabel, System.DateTime borrowTo) {
            return base.Channel.TidAskToBorrowPartAsync(tokenId, psiLabel, borrowTo);
        }
        
        public void TidAskToJoin(string tokenId, string psiLabel) {
            base.Channel.TidAskToJoin(tokenId, psiLabel);
        }
        
        public System.Threading.Tasks.Task TidAskToJoinAsync(string tokenId, string psiLabel) {
            return base.Channel.TidAskToJoinAsync(tokenId, psiLabel);
        }
        
        public void TidBorrowPart(string tokenId, string psiLabel, System.DateTime borrowTo, int borrowUser, string location, string comment) {
            base.Channel.TidBorrowPart(tokenId, psiLabel, borrowTo, borrowUser, location, comment);
        }
        
        public System.Threading.Tasks.Task TidBorrowPartAsync(string tokenId, string psiLabel, System.DateTime borrowTo, int borrowUser, string location, string comment) {
            return base.Channel.TidBorrowPartAsync(tokenId, psiLabel, borrowTo, borrowUser, location, comment);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        GWLogger.Inventory.SearchTidResponse GWLogger.Inventory.DataAccessSoap.SearchTid(GWLogger.Inventory.SearchTidRequest request) {
            return base.Channel.SearchTid(request);
        }
        
        public GWLogger.Inventory.TidSearchResult[] SearchTid(string txtSearch, System.Nullable<int> tid, System.Nullable<int> device, System.Nullable<int> location) {
            GWLogger.Inventory.SearchTidRequest inValue = new GWLogger.Inventory.SearchTidRequest();
            inValue.txtSearch = txtSearch;
            inValue.tid = tid;
            inValue.device = device;
            inValue.location = location;
            GWLogger.Inventory.SearchTidResponse retVal = ((GWLogger.Inventory.DataAccessSoap)(this)).SearchTid(inValue);
            return retVal.SearchTidResult;
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.Threading.Tasks.Task<GWLogger.Inventory.SearchTidResponse> GWLogger.Inventory.DataAccessSoap.SearchTidAsync(GWLogger.Inventory.SearchTidRequest request) {
            return base.Channel.SearchTidAsync(request);
        }
        
        public System.Threading.Tasks.Task<GWLogger.Inventory.SearchTidResponse> SearchTidAsync(string txtSearch, System.Nullable<int> tid, System.Nullable<int> device, System.Nullable<int> location) {
            GWLogger.Inventory.SearchTidRequest inValue = new GWLogger.Inventory.SearchTidRequest();
            inValue.txtSearch = txtSearch;
            inValue.tid = tid;
            inValue.device = device;
            inValue.location = location;
            return ((GWLogger.Inventory.DataAccessSoap)(this)).SearchTidAsync(inValue);
        }
        
        public GWLogger.Inventory.IdValuePair[] GetTidDeviceClasses() {
            return base.Channel.GetTidDeviceClasses();
        }
        
        public System.Threading.Tasks.Task<GWLogger.Inventory.IdValuePair[]> GetTidDeviceClassesAsync() {
            return base.Channel.GetTidDeviceClassesAsync();
        }
        
        public GWLogger.Inventory.IdValuePair[] GetManagableTids(string tokenId) {
            return base.Channel.GetManagableTids(tokenId);
        }
        
        public System.Threading.Tasks.Task<GWLogger.Inventory.IdValuePair[]> GetManagableTidsAsync(string tokenId) {
            return base.Channel.GetManagableTidsAsync(tokenId);
        }
        
        public GWLogger.Inventory.ShortUserInfo[] GetTidMembers(int tid) {
            return base.Channel.GetTidMembers(tid);
        }
        
        public System.Threading.Tasks.Task<GWLogger.Inventory.ShortUserInfo[]> GetTidMembersAsync(int tid) {
            return base.Channel.GetTidMembersAsync(tid);
        }
        
        public GWLogger.Inventory.ShortUserInfo[] GetTidRequesters(int tid) {
            return base.Channel.GetTidRequesters(tid);
        }
        
        public System.Threading.Tasks.Task<GWLogger.Inventory.ShortUserInfo[]> GetTidRequestersAsync(int tid) {
            return base.Channel.GetTidRequestersAsync(tid);
        }
        
        public void AcceptTidUser(string tokenId, int tid, int requesterId) {
            base.Channel.AcceptTidUser(tokenId, tid, requesterId);
        }
        
        public System.Threading.Tasks.Task AcceptTidUserAsync(string tokenId, int tid, int requesterId) {
            return base.Channel.AcceptTidUserAsync(tokenId, tid, requesterId);
        }
        
        public void RefuseTidUser(string tokenId, int tid, int requesterId) {
            base.Channel.RefuseTidUser(tokenId, tid, requesterId);
        }
        
        public System.Threading.Tasks.Task RefuseTidUserAsync(string tokenId, int tid, int requesterId) {
            return base.Channel.RefuseTidUserAsync(tokenId, tid, requesterId);
        }
        
        public void RevokeTidUser(string tokenId, int tid, int requesterId) {
            base.Channel.RevokeTidUser(tokenId, tid, requesterId);
        }
        
        public System.Threading.Tasks.Task RevokeTidUserAsync(string tokenId, int tid, int requesterId) {
            return base.Channel.RevokeTidUserAsync(tokenId, tid, requesterId);
        }
        
        public void AddTidPart(string tokenId, int tid, string psiLabel) {
            base.Channel.AddTidPart(tokenId, tid, psiLabel);
        }
        
        public System.Threading.Tasks.Task AddTidPartAsync(string tokenId, int tid, string psiLabel) {
            return base.Channel.AddTidPartAsync(tokenId, tid, psiLabel);
        }
        
        public GWLogger.Inventory.IdValuePair GetTidDeviceType(int id) {
            return base.Channel.GetTidDeviceType(id);
        }
        
        public System.Threading.Tasks.Task<GWLogger.Inventory.IdValuePair> GetTidDeviceTypeAsync(int id) {
            return base.Channel.GetTidDeviceTypeAsync(id);
        }
        
        public int AddTidDeviceType(string tokenId, string name) {
            return base.Channel.AddTidDeviceType(tokenId, name);
        }
        
        public System.Threading.Tasks.Task<int> AddTidDeviceTypeAsync(string tokenId, string name) {
            return base.Channel.AddTidDeviceTypeAsync(tokenId, name);
        }
        
        public void UpdateTidDeviceType(string tokenId, int id, string name) {
            base.Channel.UpdateTidDeviceType(tokenId, id, name);
        }
        
        public System.Threading.Tasks.Task UpdateTidDeviceTypeAsync(string tokenId, int id, string name) {
            return base.Channel.UpdateTidDeviceTypeAsync(tokenId, id, name);
        }
        
        public void DeleteTidDeviceType(string tokenId, int id) {
            base.Channel.DeleteTidDeviceType(tokenId, id);
        }
        
        public System.Threading.Tasks.Task DeleteTidDeviceTypeAsync(string tokenId, int id) {
            return base.Channel.DeleteTidDeviceTypeAsync(tokenId, id);
        }
        
        public void TidRequestNewDevice(string tokenId, int deviceClass, string deviceType, string description, int manufacturer, string serial, int standardLocation, string contactPerson, string kostenstelle, string psp, int distributor, string distributorPartNo) {
            base.Channel.TidRequestNewDevice(tokenId, deviceClass, deviceType, description, manufacturer, serial, standardLocation, contactPerson, kostenstelle, psp, distributor, distributorPartNo);
        }
        
        public System.Threading.Tasks.Task TidRequestNewDeviceAsync(string tokenId, int deviceClass, string deviceType, string description, int manufacturer, string serial, int standardLocation, string contactPerson, string kostenstelle, string psp, int distributor, string distributorPartNo) {
            return base.Channel.TidRequestNewDeviceAsync(tokenId, deviceClass, deviceType, description, manufacturer, serial, standardLocation, contactPerson, kostenstelle, psp, distributor, distributorPartNo);
        }
        
        public GWLogger.Inventory.TidNewDeviceRequest[] TidRequestedNewDevices() {
            return base.Channel.TidRequestedNewDevices();
        }
        
        public System.Threading.Tasks.Task<GWLogger.Inventory.TidNewDeviceRequest[]> TidRequestedNewDevicesAsync() {
            return base.Channel.TidRequestedNewDevicesAsync();
        }
        
        public GWLogger.Inventory.TidNewDeviceRequest TidRequestedNewDevice(int id) {
            return base.Channel.TidRequestedNewDevice(id);
        }
        
        public System.Threading.Tasks.Task<GWLogger.Inventory.TidNewDeviceRequest> TidRequestedNewDeviceAsync(int id) {
            return base.Channel.TidRequestedNewDeviceAsync(id);
        }
        
        public void TidUpdateRequestedNewDevice(string tokenId, GWLogger.Inventory.TidNewDeviceRequest update) {
            base.Channel.TidUpdateRequestedNewDevice(tokenId, update);
        }
        
        public System.Threading.Tasks.Task TidUpdateRequestedNewDeviceAsync(string tokenId, GWLogger.Inventory.TidNewDeviceRequest update) {
            return base.Channel.TidUpdateRequestedNewDeviceAsync(tokenId, update);
        }
        
        public void TidHandleRequestedNewDevice(string tokenId, int id) {
            base.Channel.TidHandleRequestedNewDevice(tokenId, id);
        }
        
        public System.Threading.Tasks.Task TidHandleRequestedNewDeviceAsync(string tokenId, int id) {
            return base.Channel.TidHandleRequestedNewDeviceAsync(tokenId, id);
        }
        
        public void TidDeleteRequestedNewDevice(string tokenId, int id) {
            base.Channel.TidDeleteRequestedNewDevice(tokenId, id);
        }
        
        public System.Threading.Tasks.Task TidDeleteRequestedNewDeviceAsync(string tokenId, int id) {
            return base.Channel.TidDeleteRequestedNewDeviceAsync(tokenId, id);
        }
        
        public GWLogger.Inventory.GatewayConfiguration GetGatewayConfiguration(string psiLabel) {
            return base.Channel.GetGatewayConfiguration(psiLabel);
        }
        
        public System.Threading.Tasks.Task<GWLogger.Inventory.GatewayConfiguration> GetGatewayConfigurationAsync(string psiLabel) {
            return base.Channel.GetGatewayConfigurationAsync(psiLabel);
        }
        
        public GWLogger.Inventory.GatewayFilterType[] GetGatewayFilterTypes() {
            return base.Channel.GetGatewayFilterTypes();
        }
        
        public System.Threading.Tasks.Task<GWLogger.Inventory.GatewayFilterType[]> GetGatewayFilterTypesAsync() {
            return base.Channel.GetGatewayFilterTypesAsync();
        }
        
        public GWLogger.Inventory.GatewayConfiguration UpdateGatewayConfiguration(string tokenId, string psiLabel, GWLogger.Inventory.GatewayConfiguration configuration, int command) {
            return base.Channel.UpdateGatewayConfiguration(tokenId, psiLabel, configuration, command);
        }
        
        public System.Threading.Tasks.Task<GWLogger.Inventory.GatewayConfiguration> UpdateGatewayConfigurationAsync(string tokenId, string psiLabel, GWLogger.Inventory.GatewayConfiguration configuration, int command) {
            return base.Channel.UpdateGatewayConfigurationAsync(tokenId, psiLabel, configuration, command);
        }
        
        public GWLogger.Inventory.SearchResult GetPartMaintenanceSheetList(string psiLabel) {
            return base.Channel.GetPartMaintenanceSheetList(psiLabel);
        }
        
        public System.Threading.Tasks.Task<GWLogger.Inventory.SearchResult> GetPartMaintenanceSheetListAsync(string psiLabel) {
            return base.Channel.GetPartMaintenanceSheetListAsync(psiLabel);
        }
        
        public GWLogger.Inventory.MaintenanceHistory[] GetPartMaintenanceHistory(string psiLabel) {
            return base.Channel.GetPartMaintenanceHistory(psiLabel);
        }
        
        public System.Threading.Tasks.Task<GWLogger.Inventory.MaintenanceHistory[]> GetPartMaintenanceHistoryAsync(string psiLabel) {
            return base.Channel.GetPartMaintenanceHistoryAsync(psiLabel);
        }
        
        public int StartMaintenance(string tokenId, int sheetId, string psiLabel) {
            return base.Channel.StartMaintenance(tokenId, sheetId, psiLabel);
        }
        
        public System.Threading.Tasks.Task<int> StartMaintenanceAsync(string tokenId, int sheetId, string psiLabel) {
            return base.Channel.StartMaintenanceAsync(tokenId, sheetId, psiLabel);
        }
        
        public void SetMaintenanceDescription(string tokenId, int sheetId, string psiLabel, string description) {
            base.Channel.SetMaintenanceDescription(tokenId, sheetId, psiLabel, description);
        }
        
        public System.Threading.Tasks.Task SetMaintenanceDescriptionAsync(string tokenId, int sheetId, string psiLabel, string description) {
            return base.Channel.SetMaintenanceDescriptionAsync(tokenId, sheetId, psiLabel, description);
        }
        
        public void StopMaintenance(string tokenId, int sheetId, string psiLabel, string description) {
            base.Channel.StopMaintenance(tokenId, sheetId, psiLabel, description);
        }
        
        public System.Threading.Tasks.Task StopMaintenanceAsync(string tokenId, int sheetId, string psiLabel, string description) {
            return base.Channel.StopMaintenanceAsync(tokenId, sheetId, psiLabel, description);
        }
        
        public GWLogger.Inventory.SearchResult GetAllMaintenanceSheetList() {
            return base.Channel.GetAllMaintenanceSheetList();
        }
        
        public System.Threading.Tasks.Task<GWLogger.Inventory.SearchResult> GetAllMaintenanceSheetListAsync() {
            return base.Channel.GetAllMaintenanceSheetListAsync();
        }
        
        public void SetNextMaintenance(string tokenId, int sheetId, string psiLabel, System.DateTime nextMaintenance) {
            base.Channel.SetNextMaintenance(tokenId, sheetId, psiLabel, nextMaintenance);
        }
        
        public System.Threading.Tasks.Task SetNextMaintenanceAsync(string tokenId, int sheetId, string psiLabel, System.DateTime nextMaintenance) {
            return base.Channel.SetNextMaintenanceAsync(tokenId, sheetId, psiLabel, nextMaintenance);
        }
        
        public GWLogger.Inventory.IdValuePair[] GetMaintenanceSheetsForPart(int sheetId) {
            return base.Channel.GetMaintenanceSheetsForPart(sheetId);
        }
        
        public System.Threading.Tasks.Task<GWLogger.Inventory.IdValuePair[]> GetMaintenanceSheetsForPartAsync(int sheetId) {
            return base.Channel.GetMaintenanceSheetsForPartAsync(sheetId);
        }
        
        public int AddMaintenanceSheetForPart(string tokenId, int sheetId, string psiLabel) {
            return base.Channel.AddMaintenanceSheetForPart(tokenId, sheetId, psiLabel);
        }
        
        public System.Threading.Tasks.Task<int> AddMaintenanceSheetForPartAsync(string tokenId, int sheetId, string psiLabel) {
            return base.Channel.AddMaintenanceSheetForPartAsync(tokenId, sheetId, psiLabel);
        }
        
        public void DeleteMaintenanceSheetForPart(string tokenId, int sheetForPartId) {
            base.Channel.DeleteMaintenanceSheetForPart(tokenId, sheetForPartId);
        }
        
        public System.Threading.Tasks.Task DeleteMaintenanceSheetForPartAsync(string tokenId, int sheetForPartId) {
            return base.Channel.DeleteMaintenanceSheetForPartAsync(tokenId, sheetForPartId);
        }
        
        public void UpdatePartDisturbance(string tokenId, int disturbanceId, GWLogger.Inventory.DataField[] fields, bool sendUpdate) {
            base.Channel.UpdatePartDisturbance(tokenId, disturbanceId, fields, sendUpdate);
        }
        
        public System.Threading.Tasks.Task UpdatePartDisturbanceAsync(string tokenId, int disturbanceId, GWLogger.Inventory.DataField[] fields, bool sendUpdate) {
            return base.Channel.UpdatePartDisturbanceAsync(tokenId, disturbanceId, fields, sendUpdate);
        }
        
        public int AddPartDisturbance(string tokenId, string psiLabel, GWLogger.Inventory.DataField[] fields) {
            return base.Channel.AddPartDisturbance(tokenId, psiLabel, fields);
        }
        
        public System.Threading.Tasks.Task<int> AddPartDisturbanceAsync(string tokenId, string psiLabel, GWLogger.Inventory.DataField[] fields) {
            return base.Channel.AddPartDisturbanceAsync(tokenId, psiLabel, fields);
        }
        
        public void DeletePartDisturbance(string tokenId, int disturbanceId) {
            base.Channel.DeletePartDisturbance(tokenId, disturbanceId);
        }
        
        public System.Threading.Tasks.Task DeletePartDisturbanceAsync(string tokenId, int disturbanceId) {
            return base.Channel.DeletePartDisturbanceAsync(tokenId, disturbanceId);
        }
        
        public GWLogger.Inventory.DataField[] GetPartDisturbanceFields(string psiLabel) {
            return base.Channel.GetPartDisturbanceFields(psiLabel);
        }
        
        public System.Threading.Tasks.Task<GWLogger.Inventory.DataField[]> GetPartDisturbanceFieldsAsync(string psiLabel) {
            return base.Channel.GetPartDisturbanceFieldsAsync(psiLabel);
        }
        
        public GWLogger.Inventory.ShortUserInfo[] GetUsers() {
            return base.Channel.GetUsers();
        }
        
        public System.Threading.Tasks.Task<GWLogger.Inventory.ShortUserInfo[]> GetUsersAsync() {
            return base.Channel.GetUsersAsync();
        }
        
        public GWLogger.Inventory.IdValuePair[] GetUsageTypes() {
            return base.Channel.GetUsageTypes();
        }
        
        public System.Threading.Tasks.Task<GWLogger.Inventory.IdValuePair[]> GetUsageTypesAsync() {
            return base.Channel.GetUsageTypesAsync();
        }
        
        public GWLogger.Inventory.PlanInformation GetPlanInformation(int locationId) {
            return base.Channel.GetPlanInformation(locationId);
        }
        
        public System.Threading.Tasks.Task<GWLogger.Inventory.PlanInformation> GetPlanInformationAsync(int locationId) {
            return base.Channel.GetPlanInformationAsync(locationId);
        }
        
        public GWLogger.Inventory.PSP[] GetPSPs() {
            return base.Channel.GetPSPs();
        }
        
        public System.Threading.Tasks.Task<GWLogger.Inventory.PSP[]> GetPSPsAsync() {
            return base.Channel.GetPSPsAsync();
        }
        
        public GWLogger.Inventory.IdValuePair[] GetHwStatusTypes() {
            return base.Channel.GetHwStatusTypes();
        }
        
        public System.Threading.Tasks.Task<GWLogger.Inventory.IdValuePair[]> GetHwStatusTypesAsync() {
            return base.Channel.GetHwStatusTypesAsync();
        }
        
        public void ThrowGeneric() {
            base.Channel.ThrowGeneric();
        }
        
        public System.Threading.Tasks.Task ThrowGenericAsync() {
            return base.Channel.ThrowGenericAsync();
        }
        
        public void ThrowIvException() {
            base.Channel.ThrowIvException();
        }
        
        public System.Threading.Tasks.Task ThrowIvExceptionAsync() {
            return base.Channel.ThrowIvExceptionAsync();
        }
        
        public int AddBug(string title, string message) {
            return base.Channel.AddBug(title, message);
        }
        
        public System.Threading.Tasks.Task<int> AddBugAsync(string title, string message) {
            return base.Channel.AddBugAsync(title, message);
        }
        
        public void AddBugInfo(int bugId, string message) {
            base.Channel.AddBugInfo(bugId, message);
        }
        
        public System.Threading.Tasks.Task AddBugInfoAsync(int bugId, string message) {
            return base.Channel.AddBugInfoAsync(bugId, message);
        }
        
        public GWLogger.Inventory.SimpleNodeItem[] GetPartTypes() {
            return base.Channel.GetPartTypes();
        }
        
        public System.Threading.Tasks.Task<GWLogger.Inventory.SimpleNodeItem[]> GetPartTypesAsync() {
            return base.Channel.GetPartTypesAsync();
        }
        
        public GWLogger.Inventory.IdValuePair[] GetClassTypes() {
            return base.Channel.GetClassTypes();
        }
        
        public System.Threading.Tasks.Task<GWLogger.Inventory.IdValuePair[]> GetClassTypesAsync() {
            return base.Channel.GetClassTypesAsync();
        }
        
        public GWLogger.Inventory.IdValuePair[] GetManagableClassTypes(string tokenId) {
            return base.Channel.GetManagableClassTypes(tokenId);
        }
        
        public System.Threading.Tasks.Task<GWLogger.Inventory.IdValuePair[]> GetManagableClassTypesAsync(string tokenId) {
            return base.Channel.GetManagableClassTypesAsync(tokenId);
        }
        
        public GWLogger.Inventory.IdValuePair[] GetCompanies() {
            return base.Channel.GetCompanies();
        }
        
        public System.Threading.Tasks.Task<GWLogger.Inventory.IdValuePair[]> GetCompaniesAsync() {
            return base.Channel.GetCompaniesAsync();
        }
        
        public GWLogger.Inventory.Company GetCompany(int companyId) {
            return base.Channel.GetCompany(companyId);
        }
        
        public System.Threading.Tasks.Task<GWLogger.Inventory.Company> GetCompanyAsync(int companyId) {
            return base.Channel.GetCompanyAsync(companyId);
        }
        
        public GWLogger.Inventory.IdValuePair[] GetPsiGroups() {
            return base.Channel.GetPsiGroups();
        }
        
        public System.Threading.Tasks.Task<GWLogger.Inventory.IdValuePair[]> GetPsiGroupsAsync() {
            return base.Channel.GetPsiGroupsAsync();
        }
        
        public GWLogger.Inventory.IdValuePair[] GetPrefixes() {
            return base.Channel.GetPrefixes();
        }
        
        public System.Threading.Tasks.Task<GWLogger.Inventory.IdValuePair[]> GetPrefixesAsync() {
            return base.Channel.GetPrefixesAsync();
        }
        
        public GWLogger.Inventory.SimpleNodeItem[] GetAllLocations() {
            return base.Channel.GetAllLocations();
        }
        
        public System.Threading.Tasks.Task<GWLogger.Inventory.SimpleNodeItem[]> GetAllLocationsAsync() {
            return base.Channel.GetAllLocationsAsync();
        }
        
        public GWLogger.Inventory.IdValuePair[] GetDisturbanceTypes() {
            return base.Channel.GetDisturbanceTypes();
        }
        
        public System.Threading.Tasks.Task<GWLogger.Inventory.IdValuePair[]> GetDisturbanceTypesAsync() {
            return base.Channel.GetDisturbanceTypesAsync();
        }
        
        public GWLogger.Inventory.IdValuePair[] GetPartTypeCategories() {
            return base.Channel.GetPartTypeCategories();
        }
        
        public System.Threading.Tasks.Task<GWLogger.Inventory.IdValuePair[]> GetPartTypeCategoriesAsync() {
            return base.Channel.GetPartTypeCategoriesAsync();
        }
        
        public GWLogger.Inventory.PartTypeConnector[] GetPartTypeConnectors(int partType) {
            return base.Channel.GetPartTypeConnectors(partType);
        }
        
        public System.Threading.Tasks.Task<GWLogger.Inventory.PartTypeConnector[]> GetPartTypeConnectorsAsync(int partType) {
            return base.Channel.GetPartTypeConnectorsAsync(partType);
        }
        
        public GWLogger.Inventory.IdValuePair[] GetConnectorTypes() {
            return base.Channel.GetConnectorTypes();
        }
        
        public System.Threading.Tasks.Task<GWLogger.Inventory.IdValuePair[]> GetConnectorTypesAsync() {
            return base.Channel.GetConnectorTypesAsync();
        }
        
        public GWLogger.Inventory.PartTypeConnector GetPartTypeConnector(int connectorId) {
            return base.Channel.GetPartTypeConnector(connectorId);
        }
        
        public System.Threading.Tasks.Task<GWLogger.Inventory.PartTypeConnector> GetPartTypeConnectorAsync(int connectorId) {
            return base.Channel.GetPartTypeConnectorAsync(connectorId);
        }
        
        public GWLogger.Inventory.PartTypeInfomation GetPartTypeInformation(int partTypeId) {
            return base.Channel.GetPartTypeInformation(partTypeId);
        }
        
        public System.Threading.Tasks.Task<GWLogger.Inventory.PartTypeInfomation> GetPartTypeInformationAsync(int partTypeId) {
            return base.Channel.GetPartTypeInformationAsync(partTypeId);
        }
        
        public GWLogger.Inventory.PartTypeAttribute[] GetPartTypeAttributes(int partType) {
            return base.Channel.GetPartTypeAttributes(partType);
        }
        
        public System.Threading.Tasks.Task<GWLogger.Inventory.PartTypeAttribute[]> GetPartTypeAttributesAsync(int partType) {
            return base.Channel.GetPartTypeAttributesAsync(partType);
        }
        
        public GWLogger.Inventory.PartTypeAttribute GetPartTypeAttribute(int attributeId) {
            return base.Channel.GetPartTypeAttribute(attributeId);
        }
        
        public System.Threading.Tasks.Task<GWLogger.Inventory.PartTypeAttribute> GetPartTypeAttributeAsync(int attributeId) {
            return base.Channel.GetPartTypeAttributeAsync(attributeId);
        }
        
        public GWLogger.Inventory.DataClassField[] GetDataClassFields(int dataClass) {
            return base.Channel.GetDataClassFields(dataClass);
        }
        
        public System.Threading.Tasks.Task<GWLogger.Inventory.DataClassField[]> GetDataClassFieldsAsync(int dataClass) {
            return base.Channel.GetDataClassFieldsAsync(dataClass);
        }
        
        public GWLogger.Inventory.DataClassField[] GetDataClassAndParentFields(int dataClass) {
            return base.Channel.GetDataClassAndParentFields(dataClass);
        }
        
        public System.Threading.Tasks.Task<GWLogger.Inventory.DataClassField[]> GetDataClassAndParentFieldsAsync(int dataClass) {
            return base.Channel.GetDataClassAndParentFieldsAsync(dataClass);
        }
        
        public GWLogger.Inventory.DataClassField GetDataClassField(int fieldId) {
            return base.Channel.GetDataClassField(fieldId);
        }
        
        public System.Threading.Tasks.Task<GWLogger.Inventory.DataClassField> GetDataClassFieldAsync(int fieldId) {
            return base.Channel.GetDataClassFieldAsync(fieldId);
        }
        
        public GWLogger.Inventory.IdValuePair[] GetDataFieldTypes() {
            return base.Channel.GetDataFieldTypes();
        }
        
        public System.Threading.Tasks.Task<GWLogger.Inventory.IdValuePair[]> GetDataFieldTypesAsync() {
            return base.Channel.GetDataFieldTypesAsync();
        }
        
        public GWLogger.Inventory.IdValuePair[] GetProvideConnectorTypes() {
            return base.Channel.GetProvideConnectorTypes();
        }
        
        public System.Threading.Tasks.Task<GWLogger.Inventory.IdValuePair[]> GetProvideConnectorTypesAsync() {
            return base.Channel.GetProvideConnectorTypesAsync();
        }
        
        public GWLogger.Inventory.IdValuePair[] GetRequireConnectorTypes() {
            return base.Channel.GetRequireConnectorTypes();
        }
        
        public System.Threading.Tasks.Task<GWLogger.Inventory.IdValuePair[]> GetRequireConnectorTypesAsync() {
            return base.Channel.GetRequireConnectorTypesAsync();
        }
        
        public GWLogger.Inventory.IdValuePair[] GetLinkedConnectorTypes(int parentConnector) {
            return base.Channel.GetLinkedConnectorTypes(parentConnector);
        }
        
        public System.Threading.Tasks.Task<GWLogger.Inventory.IdValuePair[]> GetLinkedConnectorTypesAsync(int parentConnector) {
            return base.Channel.GetLinkedConnectorTypesAsync(parentConnector);
        }
        
        public GWLogger.Inventory.PrefixInformation GetPrefix(int prefixId) {
            return base.Channel.GetPrefix(prefixId);
        }
        
        public System.Threading.Tasks.Task<GWLogger.Inventory.PrefixInformation> GetPrefixAsync(int prefixId) {
            return base.Channel.GetPrefixAsync(prefixId);
        }
        
        public string[] GetTags() {
            return base.Channel.GetTags();
        }
        
        public System.Threading.Tasks.Task<string[]> GetTagsAsync() {
            return base.Channel.GetTagsAsync();
        }
        
        public GWLogger.Inventory.LocationInformation GetLocation(int locationId) {
            return base.Channel.GetLocation(locationId);
        }
        
        public System.Threading.Tasks.Task<GWLogger.Inventory.LocationInformation> GetLocationAsync(int locationId) {
            return base.Channel.GetLocationAsync(locationId);
        }
        
        public GWLogger.Inventory.IdValuePair[] GetLocationCategories() {
            return base.Channel.GetLocationCategories();
        }
        
        public System.Threading.Tasks.Task<GWLogger.Inventory.IdValuePair[]> GetLocationCategoriesAsync() {
            return base.Channel.GetLocationCategoriesAsync();
        }
        
        public void StoreLastUrls(string username, string[] urls) {
            base.Channel.StoreLastUrls(username, urls);
        }
        
        public System.Threading.Tasks.Task StoreLastUrlsAsync(string username, string[] urls) {
            return base.Channel.StoreLastUrlsAsync(username, urls);
        }
        
        public GWLogger.Inventory.SearchResult GetPartTypeInformationList() {
            return base.Channel.GetPartTypeInformationList();
        }
        
        public System.Threading.Tasks.Task<GWLogger.Inventory.SearchResult> GetPartTypeInformationListAsync() {
            return base.Channel.GetPartTypeInformationListAsync();
        }
        
        public string[] SearchHelpPages(string search) {
            return base.Channel.SearchHelpPages(search);
        }
        
        public System.Threading.Tasks.Task<string[]> SearchHelpPagesAsync(string search) {
            return base.Channel.SearchHelpPagesAsync(search);
        }
        
        public GWLogger.Inventory.WikiPage GetRenderedWikiPage(string title) {
            return base.Channel.GetRenderedWikiPage(title);
        }
        
        public System.Threading.Tasks.Task<GWLogger.Inventory.WikiPage> GetRenderedWikiPageAsync(string title) {
            return base.Channel.GetRenderedWikiPageAsync(title);
        }
        
        public GWLogger.Inventory.WikiPage GetWikiPage(string title) {
            return base.Channel.GetWikiPage(title);
        }
        
        public System.Threading.Tasks.Task<GWLogger.Inventory.WikiPage> GetWikiPageAsync(string title) {
            return base.Channel.GetWikiPageAsync(title);
        }
        
        public void UpdateWikiPage(string tokenId, GWLogger.Inventory.WikiPage page) {
            base.Channel.UpdateWikiPage(tokenId, page);
        }
        
        public System.Threading.Tasks.Task UpdateWikiPageAsync(string tokenId, GWLogger.Inventory.WikiPage page) {
            return base.Channel.UpdateWikiPageAsync(tokenId, page);
        }
        
        public GWLogger.Inventory.HostCheckEntryInformation[] GetAllHostChecks() {
            return base.Channel.GetAllHostChecks();
        }
        
        public System.Threading.Tasks.Task<GWLogger.Inventory.HostCheckEntryInformation[]> GetAllHostChecksAsync() {
            return base.Channel.GetAllHostChecksAsync();
        }
        
        public GWLogger.Inventory.IdValuePair[] GetNediSwitches() {
            return base.Channel.GetNediSwitches();
        }
        
        public System.Threading.Tasks.Task<GWLogger.Inventory.IdValuePair[]> GetNediSwitchesAsync() {
            return base.Channel.GetNediSwitchesAsync();
        }
        
        public GWLogger.Inventory.NediPort[] GetNediSwitchPorts(string name) {
            return base.Channel.GetNediSwitchPorts(name);
        }
        
        public System.Threading.Tasks.Task<GWLogger.Inventory.NediPort[]> GetNediSwitchPortsAsync(string name) {
            return base.Channel.GetNediSwitchPortsAsync(name);
        }
        
        public GWLogger.Inventory.SoftIocInformation[] GetSoftIocs() {
            return base.Channel.GetSoftIocs();
        }
        
        public System.Threading.Tasks.Task<GWLogger.Inventory.SoftIocInformation[]> GetSoftIocsAsync() {
            return base.Channel.GetSoftIocsAsync();
        }
        
        public GWLogger.Inventory.HostCheckTypeInformation[] GetHostCheckTypes() {
            return base.Channel.GetHostCheckTypes();
        }
        
        public System.Threading.Tasks.Task<GWLogger.Inventory.HostCheckTypeInformation[]> GetHostCheckTypesAsync() {
            return base.Channel.GetHostCheckTypesAsync();
        }
        
        public void UpdateHostCheck(string tokenId, string hostname, int[] deletedChecks, GWLogger.Inventory.HostCheckEntryInformation[] changedChecks, GWLogger.Inventory.HostCheckEntryInformation[] newChecks) {
            base.Channel.UpdateHostCheck(tokenId, hostname, deletedChecks, changedChecks, newChecks);
        }
        
        public System.Threading.Tasks.Task UpdateHostCheckAsync(string tokenId, string hostname, int[] deletedChecks, GWLogger.Inventory.HostCheckEntryInformation[] changedChecks, GWLogger.Inventory.HostCheckEntryInformation[] newChecks) {
            return base.Channel.UpdateHostCheckAsync(tokenId, hostname, deletedChecks, changedChecks, newChecks);
        }
        
        public string[] GetUserGroupMonitors(string tokenId) {
            return base.Channel.GetUserGroupMonitors(tokenId);
        }
        
        public System.Threading.Tasks.Task<string[]> GetUserGroupMonitorsAsync(string tokenId) {
            return base.Channel.GetUserGroupMonitorsAsync(tokenId);
        }
        
        public void SubscribeGroupHostCheck(string tokenId, string groupname, string hostname) {
            base.Channel.SubscribeGroupHostCheck(tokenId, groupname, hostname);
        }
        
        public System.Threading.Tasks.Task SubscribeGroupHostCheckAsync(string tokenId, string groupname, string hostname) {
            return base.Channel.SubscribeGroupHostCheckAsync(tokenId, groupname, hostname);
        }
        
        public void UnsubscribeGroupHostCheck(string tokenId, string groupname, string hostname) {
            base.Channel.UnsubscribeGroupHostCheck(tokenId, groupname, hostname);
        }
        
        public System.Threading.Tasks.Task UnsubscribeGroupHostCheckAsync(string tokenId, string groupname, string hostname) {
            return base.Channel.UnsubscribeGroupHostCheckAsync(tokenId, groupname, hostname);
        }
        
        public void SubscribeHostCheck(string tokenId, string hostname) {
            base.Channel.SubscribeHostCheck(tokenId, hostname);
        }
        
        public System.Threading.Tasks.Task SubscribeHostCheckAsync(string tokenId, string hostname) {
            return base.Channel.SubscribeHostCheckAsync(tokenId, hostname);
        }
        
        public void UnsubscribeHostCheck(string tokenId, string hostname) {
            base.Channel.UnsubscribeHostCheck(tokenId, hostname);
        }
        
        public System.Threading.Tasks.Task UnsubscribeHostCheckAsync(string tokenId, string hostname) {
            return base.Channel.UnsubscribeHostCheckAsync(tokenId, hostname);
        }
        
        public GWLogger.Inventory.HostCheckInformation[] GetHostChecks(string[] hosts) {
            return base.Channel.GetHostChecks(hosts);
        }
        
        public System.Threading.Tasks.Task<GWLogger.Inventory.HostCheckInformation[]> GetHostChecksAsync(string[] hosts) {
            return base.Channel.GetHostChecksAsync(hosts);
        }
        
        public GWLogger.Inventory.HostPuppetAttributeInformation[] GetPuppetAttributes(string[] hosts) {
            return base.Channel.GetPuppetAttributes(hosts);
        }
        
        public System.Threading.Tasks.Task<GWLogger.Inventory.HostPuppetAttributeInformation[]> GetPuppetAttributesAsync(string[] hosts) {
            return base.Channel.GetPuppetAttributesAsync(hosts);
        }
        
        public void UpdateHostFunctions(string tokenId, string hostname, int[] deletedFunctions, GWLogger.Inventory.PartHostFunction[] changedFunctions, GWLogger.Inventory.PartHostFunction[] newFunctions) {
            base.Channel.UpdateHostFunctions(tokenId, hostname, deletedFunctions, changedFunctions, newFunctions);
        }
        
        public System.Threading.Tasks.Task UpdateHostFunctionsAsync(string tokenId, string hostname, int[] deletedFunctions, GWLogger.Inventory.PartHostFunction[] changedFunctions, GWLogger.Inventory.PartHostFunction[] newFunctions) {
            return base.Channel.UpdateHostFunctionsAsync(tokenId, hostname, deletedFunctions, changedFunctions, newFunctions);
        }
        
        public void UpdateHostRelations(string tokenId, string hostname, int[] deletedRelations, GWLogger.Inventory.PartHostFunction[] changedRelations, GWLogger.Inventory.PartHostFunction[] newRelations) {
            base.Channel.UpdateHostRelations(tokenId, hostname, deletedRelations, changedRelations, newRelations);
        }
        
        public System.Threading.Tasks.Task UpdateHostRelationsAsync(string tokenId, string hostname, int[] deletedRelations, GWLogger.Inventory.PartHostFunction[] changedRelations, GWLogger.Inventory.PartHostFunction[] newRelations) {
            return base.Channel.UpdateHostRelationsAsync(tokenId, hostname, deletedRelations, changedRelations, newRelations);
        }
        
        public GWLogger.Inventory.LastBootEntry[] GetLastBooted() {
            return base.Channel.GetLastBooted();
        }
        
        public System.Threading.Tasks.Task<GWLogger.Inventory.LastBootEntry[]> GetLastBootedAsync() {
            return base.Channel.GetLastBootedAsync();
        }
        
        public GWLogger.Inventory.HostRelation[] GetBootPcList() {
            return base.Channel.GetBootPcList();
        }
        
        public System.Threading.Tasks.Task<GWLogger.Inventory.HostRelation[]> GetBootPcListAsync() {
            return base.Channel.GetBootPcListAsync();
        }
        
        public GWLogger.Inventory.HostRelation[] GetPortServerList() {
            return base.Channel.GetPortServerList();
        }
        
        public System.Threading.Tasks.Task<GWLogger.Inventory.HostRelation[]> GetPortServerListAsync() {
            return base.Channel.GetPortServerListAsync();
        }
        
        public GWLogger.Inventory.HostRelation[] GetSwitchList() {
            return base.Channel.GetSwitchList();
        }
        
        public System.Threading.Tasks.Task<GWLogger.Inventory.HostRelation[]> GetSwitchListAsync() {
            return base.Channel.GetSwitchListAsync();
        }
        
        public string GetPortServerMapDiagram(string portserver) {
            return base.Channel.GetPortServerMapDiagram(portserver);
        }
        
        public System.Threading.Tasks.Task<string> GetPortServerMapDiagramAsync(string portserver) {
            return base.Channel.GetPortServerMapDiagramAsync(portserver);
        }
        
        public string GetSwitchMapDiagram(string switchName) {
            return base.Channel.GetSwitchMapDiagram(switchName);
        }
        
        public System.Threading.Tasks.Task<string> GetSwitchMapDiagramAsync(string switchName) {
            return base.Channel.GetSwitchMapDiagramAsync(switchName);
        }
        
        public GWLogger.Inventory.EpicsGatewayActivity[] GetEpicsGatewayLog() {
            return base.Channel.GetEpicsGatewayLog();
        }
        
        public System.Threading.Tasks.Task<GWLogger.Inventory.EpicsGatewayActivity[]> GetEpicsGatewayLogAsync() {
            return base.Channel.GetEpicsGatewayLogAsync();
        }
        
        public GWLogger.Inventory.IdValuePair[] GetOs() {
            return base.Channel.GetOs();
        }
        
        public System.Threading.Tasks.Task<GWLogger.Inventory.IdValuePair[]> GetOsAsync() {
            return base.Channel.GetOsAsync();
        }
        
        public string[] GetPossibleSwitches() {
            return base.Channel.GetPossibleSwitches();
        }
        
        public System.Threading.Tasks.Task<string[]> GetPossibleSwitchesAsync() {
            return base.Channel.GetPossibleSwitchesAsync();
        }
        
        public string AddHost(string tokenId, string pcNumber, string hostname, string model, string function, string os, int responsible, string owner, string description, int location, string warranty, string linkedToSwitch) {
            return base.Channel.AddHost(tokenId, pcNumber, hostname, model, function, os, responsible, owner, description, location, warranty, linkedToSwitch);
        }
        
        public System.Threading.Tasks.Task<string> AddHostAsync(string tokenId, string pcNumber, string hostname, string model, string function, string os, int responsible, string owner, string description, int location, string warranty, string linkedToSwitch) {
            return base.Channel.AddHostAsync(tokenId, pcNumber, hostname, model, function, os, responsible, owner, description, location, warranty, linkedToSwitch);
        }
        
        public void TransferHost(string tokenId, string source, string dest) {
            base.Channel.TransferHost(tokenId, source, dest);
        }
        
        public System.Threading.Tasks.Task TransferHostAsync(string tokenId, string source, string dest) {
            return base.Channel.TransferHostAsync(tokenId, source, dest);
        }
        
        public void DeleteHost(string tokenId, string hostname) {
            base.Channel.DeleteHost(tokenId, hostname);
        }
        
        public System.Threading.Tasks.Task DeleteHostAsync(string tokenId, string hostname) {
            return base.Channel.DeleteHostAsync(tokenId, hostname);
        }
        
        public GWLogger.Inventory.SearchResult GetPuppetConfig() {
            return base.Channel.GetPuppetConfig();
        }
        
        public System.Threading.Tasks.Task<GWLogger.Inventory.SearchResult> GetPuppetConfigAsync() {
            return base.Channel.GetPuppetConfigAsync();
        }
        
        public GWLogger.Inventory.IdValuePair[] GetQipNetworks() {
            return base.Channel.GetQipNetworks();
        }
        
        public System.Threading.Tasks.Task<GWLogger.Inventory.IdValuePair[]> GetQipNetworksAsync() {
            return base.Channel.GetQipNetworksAsync();
        }
        
        public GWLogger.Inventory.SearchResult GetQipList(string network, bool displayFree) {
            return base.Channel.GetQipList(network, displayFree);
        }
        
        public System.Threading.Tasks.Task<GWLogger.Inventory.SearchResult> GetQipListAsync(string network, bool displayFree) {
            return base.Channel.GetQipListAsync(network, displayFree);
        }
        
        public void UpdateVmStatusInformation(GWLogger.Inventory.VmStatusInformation[] vmInfo) {
            base.Channel.UpdateVmStatusInformation(vmInfo);
        }
        
        public System.Threading.Tasks.Task UpdateVmStatusInformationAsync(GWLogger.Inventory.VmStatusInformation[] vmInfo) {
            return base.Channel.UpdateVmStatusInformationAsync(vmInfo);
        }
        
        public GWLogger.Inventory.VmStatusInformation[] GetVmStatusInformation() {
            return base.Channel.GetVmStatusInformation();
        }
        
        public System.Threading.Tasks.Task<GWLogger.Inventory.VmStatusInformation[]> GetVmStatusInformationAsync() {
            return base.Channel.GetVmStatusInformationAsync();
        }
        
        public GWLogger.Inventory.AuthToken Login(string userName, string password) {
            return base.Channel.Login(userName, password);
        }
        
        public System.Threading.Tasks.Task<GWLogger.Inventory.AuthToken> LoginAsync(string userName, string password) {
            return base.Channel.LoginAsync(userName, password);
        }
        
        public GWLogger.Inventory.AuthToken Impersonate(string tokenId, int userToImpersonate) {
            return base.Channel.Impersonate(tokenId, userToImpersonate);
        }
        
        public System.Threading.Tasks.Task<GWLogger.Inventory.AuthToken> ImpersonateAsync(string tokenId, int userToImpersonate) {
            return base.Channel.ImpersonateAsync(tokenId, userToImpersonate);
        }
        
        public void Logout(string tokenId) {
            base.Channel.Logout(tokenId);
        }
        
        public System.Threading.Tasks.Task LogoutAsync(string tokenId) {
            return base.Channel.LogoutAsync(tokenId);
        }
        
        public void RenewToken(string tokenId) {
            base.Channel.RenewToken(tokenId);
        }
        
        public System.Threading.Tasks.Task RenewTokenAsync(string tokenId) {
            return base.Channel.RenewTokenAsync(tokenId);
        }
        
        public bool CanEdit(string tokenId, string psiLabel) {
            return base.Channel.CanEdit(tokenId, psiLabel);
        }
        
        public System.Threading.Tasks.Task<bool> CanEditAsync(string tokenId, string psiLabel) {
            return base.Channel.CanEditAsync(tokenId, psiLabel);
        }
        
        public bool HasClassManager(string tokenId) {
            return base.Channel.HasClassManager(tokenId);
        }
        
        public System.Threading.Tasks.Task<bool> HasClassManagerAsync(string tokenId) {
            return base.Channel.HasClassManagerAsync(tokenId);
        }
        
        public bool IsClassManagerOfPart(string tokenId, string psiLabel) {
            return base.Channel.IsClassManagerOfPart(tokenId, psiLabel);
        }
        
        public System.Threading.Tasks.Task<bool> IsClassManagerOfPartAsync(string tokenId, string psiLabel) {
            return base.Channel.IsClassManagerOfPartAsync(tokenId, psiLabel);
        }
        
        public bool IsClassManagerOfPartType(string tokenId, int partType) {
            return base.Channel.IsClassManagerOfPartType(tokenId, partType);
        }
        
        public System.Threading.Tasks.Task<bool> IsClassManagerOfPartTypeAsync(string tokenId, int partType) {
            return base.Channel.IsClassManagerOfPartTypeAsync(tokenId, partType);
        }
        
        public bool HasStockManager(string tokenId) {
            return base.Channel.HasStockManager(tokenId);
        }
        
        public System.Threading.Tasks.Task<bool> HasStockManagerAsync(string tokenId) {
            return base.Channel.HasStockManagerAsync(tokenId);
        }
        
        public bool IsStockManagerOfPart(string tokenId, string psiLabel) {
            return base.Channel.IsStockManagerOfPart(tokenId, psiLabel);
        }
        
        public System.Threading.Tasks.Task<bool> IsStockManagerOfPartAsync(string tokenId, string psiLabel) {
            return base.Channel.IsStockManagerOfPartAsync(tokenId, psiLabel);
        }
        
        public bool IsStockManagerOfPartType(string tokenId, int partType) {
            return base.Channel.IsStockManagerOfPartType(tokenId, partType);
        }
        
        public System.Threading.Tasks.Task<bool> IsStockManagerOfPartTypeAsync(string tokenId, int partType) {
            return base.Channel.IsStockManagerOfPartTypeAsync(tokenId, partType);
        }
        
        public GWLogger.Inventory.Order[] GetOpenOrders() {
            return base.Channel.GetOpenOrders();
        }
        
        public System.Threading.Tasks.Task<GWLogger.Inventory.Order[]> GetOpenOrdersAsync() {
            return base.Channel.GetOpenOrdersAsync();
        }
        
        public GWLogger.Inventory.Order[] GetClosedOrders() {
            return base.Channel.GetClosedOrders();
        }
        
        public System.Threading.Tasks.Task<GWLogger.Inventory.Order[]> GetClosedOrdersAsync() {
            return base.Channel.GetClosedOrdersAsync();
        }
        
        public GWLogger.Inventory.Order GetOrder(int orderId) {
            return base.Channel.GetOrder(orderId);
        }
        
        public System.Threading.Tasks.Task<GWLogger.Inventory.Order> GetOrderAsync(int orderId) {
            return base.Channel.GetOrderAsync(orderId);
        }
        
        public void DeleteOrder(string tokenId, int orderId) {
            base.Channel.DeleteOrder(tokenId, orderId);
        }
        
        public System.Threading.Tasks.Task DeleteOrderAsync(string tokenId, int orderId) {
            return base.Channel.DeleteOrderAsync(tokenId, orderId);
        }
        
        public void UpdateOrder(string tokenId, GWLogger.Inventory.Order order) {
            base.Channel.UpdateOrder(tokenId, order);
        }
        
        public System.Threading.Tasks.Task UpdateOrderAsync(string tokenId, GWLogger.Inventory.Order order) {
            return base.Channel.UpdateOrderAsync(tokenId, order);
        }
        
        public int AddOrder(string tokenId, GWLogger.Inventory.Order order) {
            return base.Channel.AddOrder(tokenId, order);
        }
        
        public System.Threading.Tasks.Task<int> AddOrderAsync(string tokenId, GWLogger.Inventory.Order order) {
            return base.Channel.AddOrderAsync(tokenId, order);
        }
        
        public GWLogger.Inventory.OrderItem[] GetOrderNonDeliveredParts(int orderId) {
            return base.Channel.GetOrderNonDeliveredParts(orderId);
        }
        
        public System.Threading.Tasks.Task<GWLogger.Inventory.OrderItem[]> GetOrderNonDeliveredPartsAsync(int orderId) {
            return base.Channel.GetOrderNonDeliveredPartsAsync(orderId);
        }
        
        public GWLogger.Inventory.OrderItem[] GetOrderDeliveredParts(int orderId) {
            return base.Channel.GetOrderDeliveredParts(orderId);
        }
        
        public System.Threading.Tasks.Task<GWLogger.Inventory.OrderItem[]> GetOrderDeliveredPartsAsync(int orderId) {
            return base.Channel.GetOrderDeliveredPartsAsync(orderId);
        }
        
        public void DeleteOrderItem(string tokenId, int orderItemId) {
            base.Channel.DeleteOrderItem(tokenId, orderItemId);
        }
        
        public System.Threading.Tasks.Task DeleteOrderItemAsync(string tokenId, int orderItemId) {
            return base.Channel.DeleteOrderItemAsync(tokenId, orderItemId);
        }
        
        public void UpdateOrderItem(string tokenId, GWLogger.Inventory.OrderItem orderItem) {
            base.Channel.UpdateOrderItem(tokenId, orderItem);
        }
        
        public System.Threading.Tasks.Task UpdateOrderItemAsync(string tokenId, GWLogger.Inventory.OrderItem orderItem) {
            return base.Channel.UpdateOrderItemAsync(tokenId, orderItem);
        }
        
        public int AddOrderItem(string tokenId, GWLogger.Inventory.OrderItem orderItem, int orderId) {
            return base.Channel.AddOrderItem(tokenId, orderItem, orderId);
        }
        
        public System.Threading.Tasks.Task<int> AddOrderItemAsync(string tokenId, GWLogger.Inventory.OrderItem orderItem, int orderId) {
            return base.Channel.AddOrderItemAsync(tokenId, orderItem, orderId);
        }
        
        public GWLogger.Inventory.OrderItem GetOrderPart(int orderItemId) {
            return base.Channel.GetOrderPart(orderItemId);
        }
        
        public System.Threading.Tasks.Task<GWLogger.Inventory.OrderItem> GetOrderPartAsync(int orderItemId) {
            return base.Channel.GetOrderPartAsync(orderItemId);
        }
        
        public void DeliverOrderItem(string tokenId, int orderItemId, int defaultResponsible, int defaultHwStatus, string defaultUsageType, System.DateTime defaultLastTested, string defaultFwVersion, string defaultHwRevision, GWLogger.Inventory.DeliverDetail[] deliverDetails, bool needToPrint) {
            base.Channel.DeliverOrderItem(tokenId, orderItemId, defaultResponsible, defaultHwStatus, defaultUsageType, defaultLastTested, defaultFwVersion, defaultHwRevision, deliverDetails, needToPrint);
        }
        
        public System.Threading.Tasks.Task DeliverOrderItemAsync(string tokenId, int orderItemId, int defaultResponsible, int defaultHwStatus, string defaultUsageType, System.DateTime defaultLastTested, string defaultFwVersion, string defaultHwRevision, GWLogger.Inventory.DeliverDetail[] deliverDetails, bool needToPrint) {
            return base.Channel.DeliverOrderItemAsync(tokenId, orderItemId, defaultResponsible, defaultHwStatus, defaultUsageType, defaultLastTested, defaultFwVersion, defaultHwRevision, deliverDetails, needToPrint);
        }
        
        public GWLogger.Inventory.PartInformation GetPart(string psiLabel) {
            return base.Channel.GetPart(psiLabel);
        }
        
        public System.Threading.Tasks.Task<GWLogger.Inventory.PartInformation> GetPartAsync(string psiLabel) {
            return base.Channel.GetPartAsync(psiLabel);
        }
        
        public GWLogger.Inventory.DataField[] GetPartAttributes(string psiLabel) {
            return base.Channel.GetPartAttributes(psiLabel);
        }
        
        public System.Threading.Tasks.Task<GWLogger.Inventory.DataField[]> GetPartAttributesAsync(string psiLabel) {
            return base.Channel.GetPartAttributesAsync(psiLabel);
        }
        
        public void RemovePartTag(string tokenId, string psiLabel, string tag) {
            base.Channel.RemovePartTag(tokenId, psiLabel, tag);
        }
        
        public System.Threading.Tasks.Task RemovePartTagAsync(string tokenId, string psiLabel, string tag) {
            return base.Channel.RemovePartTagAsync(tokenId, psiLabel, tag);
        }
        
        public void AddPartTag(string tokenId, string psiLabel, string tag) {
            base.Channel.AddPartTag(tokenId, psiLabel, tag);
        }
        
        public System.Threading.Tasks.Task AddPartTagAsync(string tokenId, string psiLabel, string tag) {
            return base.Channel.AddPartTagAsync(tokenId, psiLabel, tag);
        }
        
        public string GetPartSpecialEditor(string psiLabel) {
            return base.Channel.GetPartSpecialEditor(psiLabel);
        }
        
        public System.Threading.Tasks.Task<string> GetPartSpecialEditorAsync(string psiLabel) {
            return base.Channel.GetPartSpecialEditorAsync(psiLabel);
        }
        
        public GWLogger.Inventory.PartPartialHierarchy GetPartialHierarchy(string psiLabel, int nbParents, int nbChildren) {
            return base.Channel.GetPartialHierarchy(psiLabel, nbParents, nbChildren);
        }
        
        public System.Threading.Tasks.Task<GWLogger.Inventory.PartPartialHierarchy> GetPartialHierarchyAsync(string psiLabel, int nbParents, int nbChildren) {
            return base.Channel.GetPartialHierarchyAsync(psiLabel, nbParents, nbChildren);
        }
        
        public string GetPartAttribute(string psiLabel, string attributeName) {
            return base.Channel.GetPartAttribute(psiLabel, attributeName);
        }
        
        public System.Threading.Tasks.Task<string> GetPartAttributeAsync(string psiLabel, string attributeName) {
            return base.Channel.GetPartAttributeAsync(psiLabel, attributeName);
        }
        
        public GWLogger.Inventory.DataField[] GetCableData(string psiLabel, string connector) {
            return base.Channel.GetCableData(psiLabel, connector);
        }
        
        public System.Threading.Tasks.Task<GWLogger.Inventory.DataField[]> GetCableDataAsync(string psiLabel, string connector) {
            return base.Channel.GetCableDataAsync(psiLabel, connector);
        }
        
        public void UpdateCableData(string tokenId, string psiLabel, string connector, GWLogger.Inventory.AttributeField[] values) {
            base.Channel.UpdateCableData(tokenId, psiLabel, connector, values);
        }
        
        public System.Threading.Tasks.Task UpdateCableDataAsync(string tokenId, string psiLabel, string connector, GWLogger.Inventory.AttributeField[] values) {
            return base.Channel.UpdateCableDataAsync(tokenId, psiLabel, connector, values);
        }
        
        public string[] GetPartParents(string psiLabel) {
            return base.Channel.GetPartParents(psiLabel);
        }
        
        public System.Threading.Tasks.Task<string[]> GetPartParentsAsync(string psiLabel) {
            return base.Channel.GetPartParentsAsync(psiLabel);
        }
        
        public bool CanMultiConnect(string parentLabel, string childLabel) {
            return base.Channel.CanMultiConnect(parentLabel, childLabel);
        }
        
        public System.Threading.Tasks.Task<bool> CanMultiConnectAsync(string parentLabel, string childLabel) {
            return base.Channel.CanMultiConnectAsync(parentLabel, childLabel);
        }
        
        public GWLogger.Inventory.MultiConnection GetMultiConnection(string parentLabel, string childLabel) {
            return base.Channel.GetMultiConnection(parentLabel, childLabel);
        }
        
        public System.Threading.Tasks.Task<GWLogger.Inventory.MultiConnection> GetMultiConnectionAsync(string parentLabel, string childLabel) {
            return base.Channel.GetMultiConnectionAsync(parentLabel, childLabel);
        }
        
        public void UpdateMultiConnection(string parentLabel, string childLabel, GWLogger.Inventory.MultiConnectionEntry[] connections, string tokenId) {
            base.Channel.UpdateMultiConnection(parentLabel, childLabel, connections, tokenId);
        }
        
        public System.Threading.Tasks.Task UpdateMultiConnectionAsync(string parentLabel, string childLabel, GWLogger.Inventory.MultiConnectionEntry[] connections, string tokenId) {
            return base.Channel.UpdateMultiConnectionAsync(parentLabel, childLabel, connections, tokenId);
        }
        
        public string PartRelationImageMap(string[] systems) {
            return base.Channel.PartRelationImageMap(systems);
        }
        
        public System.Threading.Tasks.Task<string> PartRelationImageMapAsync(string[] systems) {
            return base.Channel.PartRelationImageMapAsync(systems);
        }
        
        public GWLogger.Inventory.PartInformation GetPartBySystem(string systemName) {
            return base.Channel.GetPartBySystem(systemName);
        }
        
        public System.Threading.Tasks.Task<GWLogger.Inventory.PartInformation> GetPartBySystemAsync(string systemName) {
            return base.Channel.GetPartBySystemAsync(systemName);
        }
        
        public GWLogger.Inventory.HostInformation[] GetHostInformation(string[] hosts) {
            return base.Channel.GetHostInformation(hosts);
        }
        
        public System.Threading.Tasks.Task<GWLogger.Inventory.HostInformation[]> GetHostInformationAsync(string[] hosts) {
            return base.Channel.GetHostInformationAsync(hosts);
        }
        
        public GWLogger.Inventory.HostPiquetInformation[] GetPiquetInformation(string[] hosts) {
            return base.Channel.GetPiquetInformation(hosts);
        }
        
        public System.Threading.Tasks.Task<GWLogger.Inventory.HostPiquetInformation[]> GetPiquetInformationAsync(string[] hosts) {
            return base.Channel.GetPiquetInformationAsync(hosts);
        }
        
        public void UpdateHostPiquetInformation(string tokenId, GWLogger.Inventory.HostPiquetInformation info) {
            base.Channel.UpdateHostPiquetInformation(tokenId, info);
        }
        
        public System.Threading.Tasks.Task UpdateHostPiquetInformationAsync(string tokenId, GWLogger.Inventory.HostPiquetInformation info) {
            return base.Channel.UpdateHostPiquetInformationAsync(tokenId, info);
        }
        
        public GWLogger.Inventory.LastBootInformation[] GetLastBoot(string[] hosts) {
            return base.Channel.GetLastBoot(hosts);
        }
        
        public System.Threading.Tasks.Task<GWLogger.Inventory.LastBootInformation[]> GetLastBootAsync(string[] hosts) {
            return base.Channel.GetLastBootAsync(hosts);
        }
        
        public GWLogger.Inventory.PartHistoryInformation[] GetPartHistory(string psiLabel) {
            return base.Channel.GetPartHistory(psiLabel);
        }
        
        public System.Threading.Tasks.Task<GWLogger.Inventory.PartHistoryInformation[]> GetPartHistoryAsync(string psiLabel) {
            return base.Channel.GetPartHistoryAsync(psiLabel);
        }
        
        public GWLogger.Inventory.PartNoteInformation[] GetPartNotes(string psiLabel) {
            return base.Channel.GetPartNotes(psiLabel);
        }
        
        public System.Threading.Tasks.Task<GWLogger.Inventory.PartNoteInformation[]> GetPartNotesAsync(string psiLabel) {
            return base.Channel.GetPartNotesAsync(psiLabel);
        }
        
        public int AddPartNote(string tokenId, string psiLabel, string title, string description) {
            return base.Channel.AddPartNote(tokenId, psiLabel, title, description);
        }
        
        public System.Threading.Tasks.Task<int> AddPartNoteAsync(string tokenId, string psiLabel, string title, string description) {
            return base.Channel.AddPartNoteAsync(tokenId, psiLabel, title, description);
        }
        
        public void DeletePartNote(string tokenId, int nodeId) {
            base.Channel.DeletePartNote(tokenId, nodeId);
        }
        
        public System.Threading.Tasks.Task DeletePartNoteAsync(string tokenId, int nodeId) {
            return base.Channel.DeletePartNoteAsync(tokenId, nodeId);
        }
        
        public void UpdatePartNote(string tokenId, int noteId, string title, string description) {
            base.Channel.UpdatePartNote(tokenId, noteId, title, description);
        }
        
        public System.Threading.Tasks.Task UpdatePartNoteAsync(string tokenId, int noteId, string title, string description) {
            return base.Channel.UpdatePartNoteAsync(tokenId, noteId, title, description);
        }
        
        public GWLogger.Inventory.PartDocumentInformation[] GetPartDocuments(string psiLabel) {
            return base.Channel.GetPartDocuments(psiLabel);
        }
        
        public System.Threading.Tasks.Task<GWLogger.Inventory.PartDocumentInformation[]> GetPartDocumentsAsync(string psiLabel) {
            return base.Channel.GetPartDocumentsAsync(psiLabel);
        }
        
        public string GetMainNode() {
            return base.Channel.GetMainNode();
        }
        
        public System.Threading.Tasks.Task<string> GetMainNodeAsync() {
            return base.Channel.GetMainNodeAsync();
        }
        
        public void ForceCacheReload() {
            base.Channel.ForceCacheReload();
        }
        
        public System.Threading.Tasks.Task ForceCacheReloadAsync() {
            return base.Channel.ForceCacheReloadAsync();
        }
        
        public void ForceActionLogInit() {
            base.Channel.ForceActionLogInit();
        }
        
        public System.Threading.Tasks.Task ForceActionLogInitAsync() {
            return base.Channel.ForceActionLogInitAsync();
        }
        
        public string ServerName() {
            return base.Channel.ServerName();
        }
        
        public System.Threading.Tasks.Task<string> ServerNameAsync() {
            return base.Channel.ServerNameAsync();
        }
        
        public string DatabaseName() {
            return base.Channel.DatabaseName();
        }
        
        public System.Threading.Tasks.Task<string> DatabaseNameAsync() {
            return base.Channel.DatabaseNameAsync();
        }
        
        public void UnlockTfsConfigs(string tokenId) {
            base.Channel.UnlockTfsConfigs(tokenId);
        }
        
        public System.Threading.Tasks.Task UnlockTfsConfigsAsync(string tokenId) {
            return base.Channel.UnlockTfsConfigsAsync(tokenId);
        }
        
        public void LockTfsConfigs(string tokenId) {
            base.Channel.LockTfsConfigs(tokenId);
        }
        
        public System.Threading.Tasks.Task LockTfsConfigsAsync(string tokenId) {
            return base.Channel.LockTfsConfigsAsync(tokenId);
        }
        
        public long InterfaceTimeStamp() {
            return base.Channel.InterfaceTimeStamp();
        }
        
        public System.Threading.Tasks.Task<long> InterfaceTimeStampAsync() {
            return base.Channel.InterfaceTimeStampAsync();
        }
        
        public GWLogger.Inventory.PartTypeShort[] GetManagablePartTypes(string tokenId) {
            return base.Channel.GetManagablePartTypes(tokenId);
        }
        
        public System.Threading.Tasks.Task<GWLogger.Inventory.PartTypeShort[]> GetManagablePartTypesAsync(string tokenId) {
            return base.Channel.GetManagablePartTypesAsync(tokenId);
        }
        
        public GWLogger.Inventory.DataField[] GetPartTypePossibleAttributes(int partType) {
            return base.Channel.GetPartTypePossibleAttributes(partType);
        }
        
        public System.Threading.Tasks.Task<GWLogger.Inventory.DataField[]> GetPartTypePossibleAttributesAsync(int partType) {
            return base.Channel.GetPartTypePossibleAttributesAsync(partType);
        }
        
        public void UpdatePartType(string tokenId, GWLogger.Inventory.PartTypeInfomation partType) {
            base.Channel.UpdatePartType(tokenId, partType);
        }
        
        public System.Threading.Tasks.Task UpdatePartTypeAsync(string tokenId, GWLogger.Inventory.PartTypeInfomation partType) {
            return base.Channel.UpdatePartTypeAsync(tokenId, partType);
        }
        
        public int AddPartType(string tokenId, GWLogger.Inventory.PartTypeInfomation partType) {
            return base.Channel.AddPartType(tokenId, partType);
        }
        
        public System.Threading.Tasks.Task<int> AddPartTypeAsync(string tokenId, GWLogger.Inventory.PartTypeInfomation partType) {
            return base.Channel.AddPartTypeAsync(tokenId, partType);
        }
        
        public void DeletePartType(string tokenId, int id) {
            base.Channel.DeletePartType(tokenId, id);
        }
        
        public System.Threading.Tasks.Task DeletePartTypeAsync(string tokenId, int id) {
            return base.Channel.DeletePartTypeAsync(tokenId, id);
        }
        
        public void UpdatePartTypeConnector(string tokenId, GWLogger.Inventory.PartTypeConnector connector) {
            base.Channel.UpdatePartTypeConnector(tokenId, connector);
        }
        
        public System.Threading.Tasks.Task UpdatePartTypeConnectorAsync(string tokenId, GWLogger.Inventory.PartTypeConnector connector) {
            return base.Channel.UpdatePartTypeConnectorAsync(tokenId, connector);
        }
        
        public void DeletePartTypeConnector(string tokenId, int connectorId) {
            base.Channel.DeletePartTypeConnector(tokenId, connectorId);
        }
        
        public System.Threading.Tasks.Task DeletePartTypeConnectorAsync(string tokenId, int connectorId) {
            return base.Channel.DeletePartTypeConnectorAsync(tokenId, connectorId);
        }
        
        public int AddPartTypeConnector(string tokenId, int partTypeId, GWLogger.Inventory.PartTypeConnector connector) {
            return base.Channel.AddPartTypeConnector(tokenId, partTypeId, connector);
        }
        
        public System.Threading.Tasks.Task<int> AddPartTypeConnectorAsync(string tokenId, int partTypeId, GWLogger.Inventory.PartTypeConnector connector) {
            return base.Channel.AddPartTypeConnectorAsync(tokenId, partTypeId, connector);
        }
        
        public void UpdatePartTypeAttribute(string tokenId, GWLogger.Inventory.PartTypeAttribute attribute) {
            base.Channel.UpdatePartTypeAttribute(tokenId, attribute);
        }
        
        public System.Threading.Tasks.Task UpdatePartTypeAttributeAsync(string tokenId, GWLogger.Inventory.PartTypeAttribute attribute) {
            return base.Channel.UpdatePartTypeAttributeAsync(tokenId, attribute);
        }
        
        public void DeletePartTypeAttribute(string tokenId, int attributeId) {
            base.Channel.DeletePartTypeAttribute(tokenId, attributeId);
        }
        
        public System.Threading.Tasks.Task DeletePartTypeAttributeAsync(string tokenId, int attributeId) {
            return base.Channel.DeletePartTypeAttributeAsync(tokenId, attributeId);
        }
        
        public int AddPartTypeAttribute(string tokenId, int partTypeId, GWLogger.Inventory.PartTypeAttribute attribute) {
            return base.Channel.AddPartTypeAttribute(tokenId, partTypeId, attribute);
        }
        
        public System.Threading.Tasks.Task<int> AddPartTypeAttributeAsync(string tokenId, int partTypeId, GWLogger.Inventory.PartTypeAttribute attribute) {
            return base.Channel.AddPartTypeAttributeAsync(tokenId, partTypeId, attribute);
        }
        
        public GWLogger.Inventory.DataClass[] GetManagableDataClass(string tokenId) {
            return base.Channel.GetManagableDataClass(tokenId);
        }
        
        public System.Threading.Tasks.Task<GWLogger.Inventory.DataClass[]> GetManagableDataClassAsync(string tokenId) {
            return base.Channel.GetManagableDataClassAsync(tokenId);
        }
        
        public GWLogger.Inventory.DataClass GetDataClassInformation(int dataClassId) {
            return base.Channel.GetDataClassInformation(dataClassId);
        }
        
        public System.Threading.Tasks.Task<GWLogger.Inventory.DataClass> GetDataClassInformationAsync(int dataClassId) {
            return base.Channel.GetDataClassInformationAsync(dataClassId);
        }
        
        public void UpdateDataClass(string tokenId, GWLogger.Inventory.DataClass dataClass) {
            base.Channel.UpdateDataClass(tokenId, dataClass);
        }
        
        public System.Threading.Tasks.Task UpdateDataClassAsync(string tokenId, GWLogger.Inventory.DataClass dataClass) {
            return base.Channel.UpdateDataClassAsync(tokenId, dataClass);
        }
        
        public int AddDataClass(string tokenId, GWLogger.Inventory.DataClass dataClass) {
            return base.Channel.AddDataClass(tokenId, dataClass);
        }
        
        public System.Threading.Tasks.Task<int> AddDataClassAsync(string tokenId, GWLogger.Inventory.DataClass dataClass) {
            return base.Channel.AddDataClassAsync(tokenId, dataClass);
        }
        
        public void DeleteDataClass(string tokenId, int id) {
            base.Channel.DeleteDataClass(tokenId, id);
        }
        
        public System.Threading.Tasks.Task DeleteDataClassAsync(string tokenId, int id) {
            return base.Channel.DeleteDataClassAsync(tokenId, id);
        }
        
        public void UpdateDataClassField(string tokenId, GWLogger.Inventory.DataClassField classField) {
            base.Channel.UpdateDataClassField(tokenId, classField);
        }
        
        public System.Threading.Tasks.Task UpdateDataClassFieldAsync(string tokenId, GWLogger.Inventory.DataClassField classField) {
            return base.Channel.UpdateDataClassFieldAsync(tokenId, classField);
        }
        
        public void DeleteDataClassField(string tokenId, int fieldId) {
            base.Channel.DeleteDataClassField(tokenId, fieldId);
        }
        
        public System.Threading.Tasks.Task DeleteDataClassFieldAsync(string tokenId, int fieldId) {
            return base.Channel.DeleteDataClassFieldAsync(tokenId, fieldId);
        }
        
        public int AddDataClassField(string tokenId, int dataClassId, GWLogger.Inventory.DataClassField classField) {
            return base.Channel.AddDataClassField(tokenId, dataClassId, classField);
        }
        
        public System.Threading.Tasks.Task<int> AddDataClassFieldAsync(string tokenId, int dataClassId, GWLogger.Inventory.DataClassField classField) {
            return base.Channel.AddDataClassFieldAsync(tokenId, dataClassId, classField);
        }
        
        public void SaveDataClassSpecialEditor(string tokenId, int dataClassId, string specialEditor) {
            base.Channel.SaveDataClassSpecialEditor(tokenId, dataClassId, specialEditor);
        }
        
        public System.Threading.Tasks.Task SaveDataClassSpecialEditorAsync(string tokenId, int dataClassId, string specialEditor) {
            return base.Channel.SaveDataClassSpecialEditorAsync(tokenId, dataClassId, specialEditor);
        }
        
        public string GetDataClassSpecialEditor(int dataClassId) {
            return base.Channel.GetDataClassSpecialEditor(dataClassId);
        }
        
        public System.Threading.Tasks.Task<string> GetDataClassSpecialEditorAsync(int dataClassId) {
            return base.Channel.GetDataClassSpecialEditorAsync(dataClassId);
        }
        
        public GWLogger.Inventory.ConnectorType[] AdminGetConnectorTypes() {
            return base.Channel.AdminGetConnectorTypes();
        }
        
        public System.Threading.Tasks.Task<GWLogger.Inventory.ConnectorType[]> AdminGetConnectorTypesAsync() {
            return base.Channel.AdminGetConnectorTypesAsync();
        }
        
        public GWLogger.Inventory.ConnectorType GetConnectorType(int connectorId) {
            return base.Channel.GetConnectorType(connectorId);
        }
        
        public System.Threading.Tasks.Task<GWLogger.Inventory.ConnectorType> GetConnectorTypeAsync(int connectorId) {
            return base.Channel.GetConnectorTypeAsync(connectorId);
        }
        
        public void UpdateConnectorType(string tokenId, GWLogger.Inventory.ConnectorType connectorType) {
            base.Channel.UpdateConnectorType(tokenId, connectorType);
        }
        
        public System.Threading.Tasks.Task UpdateConnectorTypeAsync(string tokenId, GWLogger.Inventory.ConnectorType connectorType) {
            return base.Channel.UpdateConnectorTypeAsync(tokenId, connectorType);
        }
        
        public int AddConnectorType(string tokenId, GWLogger.Inventory.ConnectorType connectorType) {
            return base.Channel.AddConnectorType(tokenId, connectorType);
        }
        
        public System.Threading.Tasks.Task<int> AddConnectorTypeAsync(string tokenId, GWLogger.Inventory.ConnectorType connectorType) {
            return base.Channel.AddConnectorTypeAsync(tokenId, connectorType);
        }
        
        public void DeleteConnectorType(string tokenId, int id) {
            base.Channel.DeleteConnectorType(tokenId, id);
        }
        
        public System.Threading.Tasks.Task DeleteConnectorTypeAsync(string tokenId, int id) {
            return base.Channel.DeleteConnectorTypeAsync(tokenId, id);
        }
        
        public void LinkConnectors(string tokenId, int provideConnector, int requireConnector) {
            base.Channel.LinkConnectors(tokenId, provideConnector, requireConnector);
        }
        
        public System.Threading.Tasks.Task LinkConnectorsAsync(string tokenId, int provideConnector, int requireConnector) {
            return base.Channel.LinkConnectorsAsync(tokenId, provideConnector, requireConnector);
        }
        
        public void UnlinkConnectors(string tokenId, int provideConnector, int requireConnector) {
            base.Channel.UnlinkConnectors(tokenId, provideConnector, requireConnector);
        }
        
        public System.Threading.Tasks.Task UnlinkConnectorsAsync(string tokenId, int provideConnector, int requireConnector) {
            return base.Channel.UnlinkConnectorsAsync(tokenId, provideConnector, requireConnector);
        }
        
        public void UpdatePrefix(string tokenId, GWLogger.Inventory.PrefixInformation prefix) {
            base.Channel.UpdatePrefix(tokenId, prefix);
        }
        
        public System.Threading.Tasks.Task UpdatePrefixAsync(string tokenId, GWLogger.Inventory.PrefixInformation prefix) {
            return base.Channel.UpdatePrefixAsync(tokenId, prefix);
        }
        
        public int AddPrefix(string tokenId, GWLogger.Inventory.PrefixInformation prefix) {
            return base.Channel.AddPrefix(tokenId, prefix);
        }
        
        public System.Threading.Tasks.Task<int> AddPrefixAsync(string tokenId, GWLogger.Inventory.PrefixInformation prefix) {
            return base.Channel.AddPrefixAsync(tokenId, prefix);
        }
        
        public void DeletePrefix(string tokenId, int prefixId) {
            base.Channel.DeletePrefix(tokenId, prefixId);
        }
        
        public System.Threading.Tasks.Task DeletePrefixAsync(string tokenId, int prefixId) {
            return base.Channel.DeletePrefixAsync(tokenId, prefixId);
        }
        
        public void UpdateCompany(string tokenId, GWLogger.Inventory.Company company) {
            base.Channel.UpdateCompany(tokenId, company);
        }
        
        public System.Threading.Tasks.Task UpdateCompanyAsync(string tokenId, GWLogger.Inventory.Company company) {
            return base.Channel.UpdateCompanyAsync(tokenId, company);
        }
        
        public int AddCompany(string tokenId, GWLogger.Inventory.Company company) {
            return base.Channel.AddCompany(tokenId, company);
        }
        
        public System.Threading.Tasks.Task<int> AddCompanyAsync(string tokenId, GWLogger.Inventory.Company company) {
            return base.Channel.AddCompanyAsync(tokenId, company);
        }
        
        public void DeleteCompany(string tokenId, int companyId) {
            base.Channel.DeleteCompany(tokenId, companyId);
        }
        
        public System.Threading.Tasks.Task DeleteCompanyAsync(string tokenId, int companyId) {
            return base.Channel.DeleteCompanyAsync(tokenId, companyId);
        }
        
        public GWLogger.Inventory.RoleType[] GetRoleTypes() {
            return base.Channel.GetRoleTypes();
        }
        
        public System.Threading.Tasks.Task<GWLogger.Inventory.RoleType[]> GetRoleTypesAsync() {
            return base.Channel.GetRoleTypesAsync();
        }
        
        public GWLogger.Inventory.UserRole[] UserRoles(int userId) {
            return base.Channel.UserRoles(userId);
        }
        
        public System.Threading.Tasks.Task<GWLogger.Inventory.UserRole[]> UserRolesAsync(int userId) {
            return base.Channel.UserRolesAsync(userId);
        }
        
        public int AddUserRole(string tokenId, int userId, GWLogger.Inventory.UserRole role) {
            return base.Channel.AddUserRole(tokenId, userId, role);
        }
        
        public System.Threading.Tasks.Task<int> AddUserRoleAsync(string tokenId, int userId, GWLogger.Inventory.UserRole role) {
            return base.Channel.AddUserRoleAsync(tokenId, userId, role);
        }
        
        public void RemoveUserRole(string tokenId, int roleId) {
            base.Channel.RemoveUserRole(tokenId, roleId);
        }
        
        public System.Threading.Tasks.Task RemoveUserRoleAsync(string tokenId, int roleId) {
            return base.Channel.RemoveUserRoleAsync(tokenId, roleId);
        }
        
        public void AddTag(string tokenId, string tag) {
            base.Channel.AddTag(tokenId, tag);
        }
        
        public System.Threading.Tasks.Task AddTagAsync(string tokenId, string tag) {
            return base.Channel.AddTagAsync(tokenId, tag);
        }
        
        public void RemoveTag(string tokenId, string tag) {
            base.Channel.RemoveTag(tokenId, tag);
        }
        
        public System.Threading.Tasks.Task RemoveTagAsync(string tokenId, string tag) {
            return base.Channel.RemoveTagAsync(tokenId, tag);
        }
        
        public int AddLocation(string tokenId, int parentId, GWLogger.Inventory.LocationInformation location) {
            return base.Channel.AddLocation(tokenId, parentId, location);
        }
        
        public System.Threading.Tasks.Task<int> AddLocationAsync(string tokenId, int parentId, GWLogger.Inventory.LocationInformation location) {
            return base.Channel.AddLocationAsync(tokenId, parentId, location);
        }
        
        public void UpdateLocation(string tokenId, GWLogger.Inventory.LocationInformation location) {
            base.Channel.UpdateLocation(tokenId, location);
        }
        
        public System.Threading.Tasks.Task UpdateLocationAsync(string tokenId, GWLogger.Inventory.LocationInformation location) {
            return base.Channel.UpdateLocationAsync(tokenId, location);
        }
        
        public void DeleteLocation(string tokenId, int locationId) {
            base.Channel.DeleteLocation(tokenId, locationId);
        }
        
        public System.Threading.Tasks.Task DeleteLocationAsync(string tokenId, int locationId) {
            return base.Channel.DeleteLocationAsync(tokenId, locationId);
        }
        
        public void MergeLocation(string tokenId, int locationToKeep, int locationToMerge) {
            base.Channel.MergeLocation(tokenId, locationToKeep, locationToMerge);
        }
        
        public System.Threading.Tasks.Task MergeLocationAsync(string tokenId, int locationToKeep, int locationToMerge) {
            return base.Channel.MergeLocationAsync(tokenId, locationToKeep, locationToMerge);
        }
        
        public void MoveLocation(string tokenId, int parentLocation, int childLocation) {
            base.Channel.MoveLocation(tokenId, parentLocation, childLocation);
        }
        
        public System.Threading.Tasks.Task MoveLocationAsync(string tokenId, int parentLocation, int childLocation) {
            return base.Channel.MoveLocationAsync(tokenId, parentLocation, childLocation);
        }
        
        public void SendMailing(string tokenId, string subject, string content) {
            base.Channel.SendMailing(tokenId, subject, content);
        }
        
        public System.Threading.Tasks.Task SendMailingAsync(string tokenId, string subject, string content) {
            return base.Channel.SendMailingAsync(tokenId, subject, content);
        }
        
        public GWLogger.Inventory.PsiGroup GetPsiGroup(int groupId) {
            return base.Channel.GetPsiGroup(groupId);
        }
        
        public System.Threading.Tasks.Task<GWLogger.Inventory.PsiGroup> GetPsiGroupAsync(int groupId) {
            return base.Channel.GetPsiGroupAsync(groupId);
        }
        
        public void UpdatePsiGroup(string tokenId, GWLogger.Inventory.PsiGroup psiGroup) {
            base.Channel.UpdatePsiGroup(tokenId, psiGroup);
        }
        
        public System.Threading.Tasks.Task UpdatePsiGroupAsync(string tokenId, GWLogger.Inventory.PsiGroup psiGroup) {
            return base.Channel.UpdatePsiGroupAsync(tokenId, psiGroup);
        }
        
        public int AddPsiGroup(string tokenId, GWLogger.Inventory.PsiGroup psiGroup) {
            return base.Channel.AddPsiGroup(tokenId, psiGroup);
        }
        
        public System.Threading.Tasks.Task<int> AddPsiGroupAsync(string tokenId, GWLogger.Inventory.PsiGroup psiGroup) {
            return base.Channel.AddPsiGroupAsync(tokenId, psiGroup);
        }
        
        public void DeletePsiGroup(string tokenId, int psiGroupId) {
            base.Channel.DeletePsiGroup(tokenId, psiGroupId);
        }
        
        public System.Threading.Tasks.Task DeletePsiGroupAsync(string tokenId, int psiGroupId) {
            return base.Channel.DeletePsiGroupAsync(tokenId, psiGroupId);
        }
        
        public GWLogger.Inventory.Disturbance GetDisturbance(int disturbanceId) {
            return base.Channel.GetDisturbance(disturbanceId);
        }
        
        public System.Threading.Tasks.Task<GWLogger.Inventory.Disturbance> GetDisturbanceAsync(int disturbanceId) {
            return base.Channel.GetDisturbanceAsync(disturbanceId);
        }
        
        public GWLogger.Inventory.DisturbanceField[] GetDisturbanceFields(int disturbanceId) {
            return base.Channel.GetDisturbanceFields(disturbanceId);
        }
        
        public System.Threading.Tasks.Task<GWLogger.Inventory.DisturbanceField[]> GetDisturbanceFieldsAsync(int disturbanceId) {
            return base.Channel.GetDisturbanceFieldsAsync(disturbanceId);
        }
        
        public GWLogger.Inventory.DisturbanceField GetDisturbanceField(int fieldId) {
            return base.Channel.GetDisturbanceField(fieldId);
        }
        
        public System.Threading.Tasks.Task<GWLogger.Inventory.DisturbanceField> GetDisturbanceFieldAsync(int fieldId) {
            return base.Channel.GetDisturbanceFieldAsync(fieldId);
        }
        
        public void UpdateDisturbance(string tokenId, GWLogger.Inventory.Disturbance disturbance) {
            base.Channel.UpdateDisturbance(tokenId, disturbance);
        }
        
        public System.Threading.Tasks.Task UpdateDisturbanceAsync(string tokenId, GWLogger.Inventory.Disturbance disturbance) {
            return base.Channel.UpdateDisturbanceAsync(tokenId, disturbance);
        }
        
        public int AddDisturbance(string tokenId, GWLogger.Inventory.Disturbance disturbance) {
            return base.Channel.AddDisturbance(tokenId, disturbance);
        }
        
        public System.Threading.Tasks.Task<int> AddDisturbanceAsync(string tokenId, GWLogger.Inventory.Disturbance disturbance) {
            return base.Channel.AddDisturbanceAsync(tokenId, disturbance);
        }
        
        public void DeleteDisturbance(string tokenId, int disturbanceId) {
            base.Channel.DeleteDisturbance(tokenId, disturbanceId);
        }
        
        public System.Threading.Tasks.Task DeleteDisturbanceAsync(string tokenId, int disturbanceId) {
            return base.Channel.DeleteDisturbanceAsync(tokenId, disturbanceId);
        }
        
        public void UpdateDisturbanceField(string tokenId, GWLogger.Inventory.DisturbanceField disturbanceField) {
            base.Channel.UpdateDisturbanceField(tokenId, disturbanceField);
        }
        
        public System.Threading.Tasks.Task UpdateDisturbanceFieldAsync(string tokenId, GWLogger.Inventory.DisturbanceField disturbanceField) {
            return base.Channel.UpdateDisturbanceFieldAsync(tokenId, disturbanceField);
        }
        
        public int AddDisturbanceField(string tokenId, int disturbanceId, GWLogger.Inventory.DisturbanceField disturbanceField) {
            return base.Channel.AddDisturbanceField(tokenId, disturbanceId, disturbanceField);
        }
        
        public System.Threading.Tasks.Task<int> AddDisturbanceFieldAsync(string tokenId, int disturbanceId, GWLogger.Inventory.DisturbanceField disturbanceField) {
            return base.Channel.AddDisturbanceFieldAsync(tokenId, disturbanceId, disturbanceField);
        }
        
        public void DeleteDisturbanceField(string tokenId, int disturbanceFieldId) {
            base.Channel.DeleteDisturbanceField(tokenId, disturbanceFieldId);
        }
        
        public System.Threading.Tasks.Task DeleteDisturbanceFieldAsync(string tokenId, int disturbanceFieldId) {
            return base.Channel.DeleteDisturbanceFieldAsync(tokenId, disturbanceFieldId);
        }
        
        public GWLogger.Inventory.PsErrorCodeInformation[] GetPsErrorCodes() {
            return base.Channel.GetPsErrorCodes();
        }
        
        public System.Threading.Tasks.Task<GWLogger.Inventory.PsErrorCodeInformation[]> GetPsErrorCodesAsync() {
            return base.Channel.GetPsErrorCodesAsync();
        }
        
        public GWLogger.Inventory.PsErrorCodeInformation GetPsErrorCode(string errorId, string applicationId) {
            return base.Channel.GetPsErrorCode(errorId, applicationId);
        }
        
        public System.Threading.Tasks.Task<GWLogger.Inventory.PsErrorCodeInformation> GetPsErrorCodeAsync(string errorId, string applicationId) {
            return base.Channel.GetPsErrorCodeAsync(errorId, applicationId);
        }
        
        public void UpdatePsErrorCode(string tokenId, GWLogger.Inventory.PsErrorCodeInformation psErrorCode) {
            base.Channel.UpdatePsErrorCode(tokenId, psErrorCode);
        }
        
        public System.Threading.Tasks.Task UpdatePsErrorCodeAsync(string tokenId, GWLogger.Inventory.PsErrorCodeInformation psErrorCode) {
            return base.Channel.UpdatePsErrorCodeAsync(tokenId, psErrorCode);
        }
        
        public void AddPsErrorCode(string tokenId, GWLogger.Inventory.PsErrorCodeInformation psErrorCode) {
            base.Channel.AddPsErrorCode(tokenId, psErrorCode);
        }
        
        public System.Threading.Tasks.Task AddPsErrorCodeAsync(string tokenId, GWLogger.Inventory.PsErrorCodeInformation psErrorCode) {
            return base.Channel.AddPsErrorCodeAsync(tokenId, psErrorCode);
        }
        
        public void DeletePsErrorCode(string tokenId, string psErrorCodeId, string applicationId) {
            base.Channel.DeletePsErrorCode(tokenId, psErrorCodeId, applicationId);
        }
        
        public System.Threading.Tasks.Task DeletePsErrorCodeAsync(string tokenId, string psErrorCodeId, string applicationId) {
            return base.Channel.DeletePsErrorCodeAsync(tokenId, psErrorCodeId, applicationId);
        }
        
        public GWLogger.Inventory.DataField[] MassEditorCommonAttributes(string[] labels) {
            return base.Channel.MassEditorCommonAttributes(labels);
        }
        
        public System.Threading.Tasks.Task<GWLogger.Inventory.DataField[]> MassEditorCommonAttributesAsync(string[] labels) {
            return base.Channel.MassEditorCommonAttributesAsync(labels);
        }
        
        public void MassEdit(string tokenId, string[] labels, GWLogger.Inventory.AttributeField[] fields) {
            base.Channel.MassEdit(tokenId, labels, fields);
        }
        
        public System.Threading.Tasks.Task MassEditAsync(string tokenId, string[] labels, GWLogger.Inventory.AttributeField[] fields) {
            return base.Channel.MassEditAsync(tokenId, labels, fields);
        }
        
        public void PrintLabel(string tokenId, string[] labels) {
            base.Channel.PrintLabel(tokenId, labels);
        }
        
        public System.Threading.Tasks.Task PrintLabelAsync(string tokenId, string[] labels) {
            return base.Channel.PrintLabelAsync(tokenId, labels);
        }
        
        public void ChangePartType(string tokenId, string psiLabel, int newPartType) {
            base.Channel.ChangePartType(tokenId, psiLabel, newPartType);
        }
        
        public System.Threading.Tasks.Task ChangePartTypeAsync(string tokenId, string psiLabel, int newPartType) {
            return base.Channel.ChangePartTypeAsync(tokenId, psiLabel, newPartType);
        }
        
        public void DeleteParts(string tokenId, string[] psiLabels) {
            base.Channel.DeleteParts(tokenId, psiLabels);
        }
        
        public System.Threading.Tasks.Task DeletePartsAsync(string tokenId, string[] psiLabels) {
            return base.Channel.DeletePartsAsync(tokenId, psiLabels);
        }
        
        public GWLogger.Inventory.DataClass GetPartTypeDataClass(int partType) {
            return base.Channel.GetPartTypeDataClass(partType);
        }
        
        public System.Threading.Tasks.Task<GWLogger.Inventory.DataClass> GetPartTypeDataClassAsync(int partType) {
            return base.Channel.GetPartTypeDataClassAsync(partType);
        }
        
        public GWLogger.Inventory.SwitchEffect SwitchDataClassEffect(int partTypeId, int newDataClassId) {
            return base.Channel.SwitchDataClassEffect(partTypeId, newDataClassId);
        }
        
        public System.Threading.Tasks.Task<GWLogger.Inventory.SwitchEffect> SwitchDataClassEffectAsync(int partTypeId, int newDataClassId) {
            return base.Channel.SwitchDataClassEffectAsync(partTypeId, newDataClassId);
        }
        
        public void SwitchDataClass(string tokenId, int partTypeId, int newDataClassId) {
            base.Channel.SwitchDataClass(tokenId, partTypeId, newDataClassId);
        }
        
        public System.Threading.Tasks.Task SwitchDataClassAsync(string tokenId, int partTypeId, int newDataClassId) {
            return base.Channel.SwitchDataClassAsync(tokenId, partTypeId, newDataClassId);
        }
        
        public GWLogger.Inventory.IdValuePair[] GetPartTypesWithDisturbance() {
            return base.Channel.GetPartTypesWithDisturbance();
        }
        
        public System.Threading.Tasks.Task<GWLogger.Inventory.IdValuePair[]> GetPartTypesWithDisturbanceAsync() {
            return base.Channel.GetPartTypesWithDisturbanceAsync();
        }
        
        public GWLogger.Inventory.Disturbance GetPartTypeDisturbance(int partType) {
            return base.Channel.GetPartTypeDisturbance(partType);
        }
        
        public System.Threading.Tasks.Task<GWLogger.Inventory.Disturbance> GetPartTypeDisturbanceAsync(int partType) {
            return base.Channel.GetPartTypeDisturbanceAsync(partType);
        }
        
        public GWLogger.Inventory.SwitchEffect SwitchDisturbanceEffect(int partTypeId, int newDisturbanceId) {
            return base.Channel.SwitchDisturbanceEffect(partTypeId, newDisturbanceId);
        }
        
        public System.Threading.Tasks.Task<GWLogger.Inventory.SwitchEffect> SwitchDisturbanceEffectAsync(int partTypeId, int newDisturbanceId) {
            return base.Channel.SwitchDisturbanceEffectAsync(partTypeId, newDisturbanceId);
        }
        
        public void SwitchDisturbance(string tokenId, int partTypeId, int newDisturbanceId) {
            base.Channel.SwitchDisturbance(tokenId, partTypeId, newDisturbanceId);
        }
        
        public System.Threading.Tasks.Task SwitchDisturbanceAsync(string tokenId, int partTypeId, int newDisturbanceId) {
            return base.Channel.SwitchDisturbanceAsync(tokenId, partTypeId, newDisturbanceId);
        }
        
        public int DuplicateDisturbance(string tokenId, int sourceDisturbance, string newName) {
            return base.Channel.DuplicateDisturbance(tokenId, sourceDisturbance, newName);
        }
        
        public System.Threading.Tasks.Task<int> DuplicateDisturbanceAsync(string tokenId, int sourceDisturbance, string newName) {
            return base.Channel.DuplicateDisturbanceAsync(tokenId, sourceDisturbance, newName);
        }
        
        public void BatchUpdateAttributes(string tokenId, GWLogger.Inventory.PartUpdate[] updates) {
            base.Channel.BatchUpdateAttributes(tokenId, updates);
        }
        
        public System.Threading.Tasks.Task BatchUpdateAttributesAsync(string tokenId, GWLogger.Inventory.PartUpdate[] updates) {
            return base.Channel.BatchUpdateAttributesAsync(tokenId, updates);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        GWLogger.Inventory.AddPartResponse GWLogger.Inventory.DataAccessSoap.AddPart(GWLogger.Inventory.AddPartRequest request) {
            return base.Channel.AddPart(request);
        }
        
        public string[] AddPart(string tokenId, int partType, int location, int startNb, int endNb, string usageType, int hwStatus, System.Nullable<int> price, bool printLabels, GWLogger.Inventory.AttributeField[] fields) {
            GWLogger.Inventory.AddPartRequest inValue = new GWLogger.Inventory.AddPartRequest();
            inValue.tokenId = tokenId;
            inValue.partType = partType;
            inValue.location = location;
            inValue.startNb = startNb;
            inValue.endNb = endNb;
            inValue.usageType = usageType;
            inValue.hwStatus = hwStatus;
            inValue.price = price;
            inValue.printLabels = printLabels;
            inValue.fields = fields;
            GWLogger.Inventory.AddPartResponse retVal = ((GWLogger.Inventory.DataAccessSoap)(this)).AddPart(inValue);
            return retVal.AddPartResult;
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.Threading.Tasks.Task<GWLogger.Inventory.AddPartResponse> GWLogger.Inventory.DataAccessSoap.AddPartAsync(GWLogger.Inventory.AddPartRequest request) {
            return base.Channel.AddPartAsync(request);
        }
        
        public System.Threading.Tasks.Task<GWLogger.Inventory.AddPartResponse> AddPartAsync(string tokenId, int partType, int location, int startNb, int endNb, string usageType, int hwStatus, System.Nullable<int> price, bool printLabels, GWLogger.Inventory.AttributeField[] fields) {
            GWLogger.Inventory.AddPartRequest inValue = new GWLogger.Inventory.AddPartRequest();
            inValue.tokenId = tokenId;
            inValue.partType = partType;
            inValue.location = location;
            inValue.startNb = startNb;
            inValue.endNb = endNb;
            inValue.usageType = usageType;
            inValue.hwStatus = hwStatus;
            inValue.price = price;
            inValue.printLabels = printLabels;
            inValue.fields = fields;
            return ((GWLogger.Inventory.DataAccessSoap)(this)).AddPartAsync(inValue);
        }
        
        public int PartNextPrefixValue(int partType) {
            return base.Channel.PartNextPrefixValue(partType);
        }
        
        public System.Threading.Tasks.Task<int> PartNextPrefixValueAsync(int partType) {
            return base.Channel.PartNextPrefixValueAsync(partType);
        }
        
        public GWLogger.Inventory.ShortPart[] GetStockItems(int partType) {
            return base.Channel.GetStockItems(partType);
        }
        
        public System.Threading.Tasks.Task<GWLogger.Inventory.ShortPart[]> GetStockItemsAsync(int partType) {
            return base.Channel.GetStockItemsAsync(partType);
        }
        
        public GWLogger.Inventory.PrefixInformation PartTypePrefix(int partType) {
            return base.Channel.PartTypePrefix(partType);
        }
        
        public System.Threading.Tasks.Task<GWLogger.Inventory.PrefixInformation> PartTypePrefixAsync(int partType) {
            return base.Channel.PartTypePrefixAsync(partType);
        }
        
        public GWLogger.Inventory.UserRoleSummary[] GetUserRoles() {
            return base.Channel.GetUserRoles();
        }
        
        public System.Threading.Tasks.Task<GWLogger.Inventory.UserRoleSummary[]> GetUserRolesAsync() {
            return base.Channel.GetUserRolesAsync();
        }
        
        public GWLogger.Inventory.UserAction[] GetUserActionLog(string tokenId, int userToCheck) {
            return base.Channel.GetUserActionLog(tokenId, userToCheck);
        }
        
        public System.Threading.Tasks.Task<GWLogger.Inventory.UserAction[]> GetUserActionLogAsync(string tokenId, int userToCheck) {
            return base.Channel.GetUserActionLogAsync(tokenId, userToCheck);
        }
        
        public GWLogger.Inventory.ActiveDirectoryGroup[] GetLinuxGroups() {
            return base.Channel.GetLinuxGroups();
        }
        
        public System.Threading.Tasks.Task<GWLogger.Inventory.ActiveDirectoryGroup[]> GetLinuxGroupsAsync() {
            return base.Channel.GetLinuxGroupsAsync();
        }
        
        public string[] GetEditableLinuxGroups(string tokenId) {
            return base.Channel.GetEditableLinuxGroups(tokenId);
        }
        
        public System.Threading.Tasks.Task<string[]> GetEditableLinuxGroupsAsync(string tokenId) {
            return base.Channel.GetEditableLinuxGroupsAsync(tokenId);
        }
        
        public GWLogger.Inventory.ActiveDirectoryUser[] GetLinuxUsers() {
            return base.Channel.GetLinuxUsers();
        }
        
        public System.Threading.Tasks.Task<GWLogger.Inventory.ActiveDirectoryUser[]> GetLinuxUsersAsync() {
            return base.Channel.GetLinuxUsersAsync();
        }
        
        public GWLogger.Inventory.ActiveDirectoryUser[] GetLinuxGroupMembers(string groupName) {
            return base.Channel.GetLinuxGroupMembers(groupName);
        }
        
        public System.Threading.Tasks.Task<GWLogger.Inventory.ActiveDirectoryUser[]> GetLinuxGroupMembersAsync(string groupName) {
            return base.Channel.GetLinuxGroupMembersAsync(groupName);
        }
        
        public void AddLinuxGroupMember(string tokenId, string groupName, string accountName) {
            base.Channel.AddLinuxGroupMember(tokenId, groupName, accountName);
        }
        
        public System.Threading.Tasks.Task AddLinuxGroupMemberAsync(string tokenId, string groupName, string accountName) {
            return base.Channel.AddLinuxGroupMemberAsync(tokenId, groupName, accountName);
        }
        
        public void RemoveLinuxGroupMember(string tokenId, string groupName, string accountName) {
            base.Channel.RemoveLinuxGroupMember(tokenId, groupName, accountName);
        }
        
        public System.Threading.Tasks.Task RemoveLinuxGroupMemberAsync(string tokenId, string groupName, string accountName) {
            return base.Channel.RemoveLinuxGroupMemberAsync(tokenId, groupName, accountName);
        }
        
        public void RestoreUIDb() {
            base.Channel.RestoreUIDb();
        }
        
        public System.Threading.Tasks.Task RestoreUIDbAsync() {
            return base.Channel.RestoreUIDbAsync();
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        GWLogger.Inventory.GetEpicsBootInfoServiceLogsResponse GWLogger.Inventory.DataAccessSoap.GetEpicsBootInfoServiceLogs(GWLogger.Inventory.GetEpicsBootInfoServiceLogsRequest request) {
            return base.Channel.GetEpicsBootInfoServiceLogs(request);
        }
        
        public GWLogger.Inventory.EpicsBootInfoServiceLogEntry[] GetEpicsBootInfoServiceLogs(System.DateTime from, System.DateTime to, System.Nullable<int> limit) {
            GWLogger.Inventory.GetEpicsBootInfoServiceLogsRequest inValue = new GWLogger.Inventory.GetEpicsBootInfoServiceLogsRequest();
            inValue.from = from;
            inValue.to = to;
            inValue.limit = limit;
            GWLogger.Inventory.GetEpicsBootInfoServiceLogsResponse retVal = ((GWLogger.Inventory.DataAccessSoap)(this)).GetEpicsBootInfoServiceLogs(inValue);
            return retVal.GetEpicsBootInfoServiceLogsResult;
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.Threading.Tasks.Task<GWLogger.Inventory.GetEpicsBootInfoServiceLogsResponse> GWLogger.Inventory.DataAccessSoap.GetEpicsBootInfoServiceLogsAsync(GWLogger.Inventory.GetEpicsBootInfoServiceLogsRequest request) {
            return base.Channel.GetEpicsBootInfoServiceLogsAsync(request);
        }
        
        public System.Threading.Tasks.Task<GWLogger.Inventory.GetEpicsBootInfoServiceLogsResponse> GetEpicsBootInfoServiceLogsAsync(System.DateTime from, System.DateTime to, System.Nullable<int> limit) {
            GWLogger.Inventory.GetEpicsBootInfoServiceLogsRequest inValue = new GWLogger.Inventory.GetEpicsBootInfoServiceLogsRequest();
            inValue.from = from;
            inValue.to = to;
            inValue.limit = limit;
            return ((GWLogger.Inventory.DataAccessSoap)(this)).GetEpicsBootInfoServiceLogsAsync(inValue);
        }
        
        public void DeleteEpicsBootInfoServiceLogs(string tokenId, int daysToKeep) {
            base.Channel.DeleteEpicsBootInfoServiceLogs(tokenId, daysToKeep);
        }
        
        public System.Threading.Tasks.Task DeleteEpicsBootInfoServiceLogsAsync(string tokenId, int daysToKeep) {
            return base.Channel.DeleteEpicsBootInfoServiceLogsAsync(tokenId, daysToKeep);
        }
        
        public GWLogger.Inventory.EpicsBootInfoIocInfo[] GetEpicsBootInfoIocList() {
            return base.Channel.GetEpicsBootInfoIocList();
        }
        
        public System.Threading.Tasks.Task<GWLogger.Inventory.EpicsBootInfoIocInfo[]> GetEpicsBootInfoIocListAsync() {
            return base.Channel.GetEpicsBootInfoIocListAsync();
        }
        
        public void DeleteEpicsBootInfoIocRecords(string tokenId, string ioc, string facility) {
            base.Channel.DeleteEpicsBootInfoIocRecords(tokenId, ioc, facility);
        }
        
        public System.Threading.Tasks.Task DeleteEpicsBootInfoIocRecordsAsync(string tokenId, string ioc, string facility) {
            return base.Channel.DeleteEpicsBootInfoIocRecordsAsync(tokenId, ioc, facility);
        }
        
        public void EraseEpicsBootInfoIoc(string tokenId, string ioc, string facility) {
            base.Channel.EraseEpicsBootInfoIoc(tokenId, ioc, facility);
        }
        
        public System.Threading.Tasks.Task EraseEpicsBootInfoIocAsync(string tokenId, string ioc, string facility) {
            return base.Channel.EraseEpicsBootInfoIocAsync(tokenId, ioc, facility);
        }
        
        public GWLogger.Inventory.EpicsBootInfoStatusInfo GetEpicsBootInfoStatusInfo() {
            return base.Channel.GetEpicsBootInfoStatusInfo();
        }
        
        public System.Threading.Tasks.Task<GWLogger.Inventory.EpicsBootInfoStatusInfo> GetEpicsBootInfoStatusInfoAsync() {
            return base.Channel.GetEpicsBootInfoStatusInfoAsync();
        }
        
        public void RefreshEpicsBootInfoCache(string tokenId) {
            base.Channel.RefreshEpicsBootInfoCache(tokenId);
        }
        
        public System.Threading.Tasks.Task RefreshEpicsBootInfoCacheAsync(string tokenId) {
            return base.Channel.RefreshEpicsBootInfoCacheAsync(tokenId);
        }
        
        public void DeleteAllEpicsBootInfoRecordsForFacility(string tokenId, string facility) {
            base.Channel.DeleteAllEpicsBootInfoRecordsForFacility(tokenId, facility);
        }
        
        public System.Threading.Tasks.Task DeleteAllEpicsBootInfoRecordsForFacilityAsync(string tokenId, string facility) {
            return base.Channel.DeleteAllEpicsBootInfoRecordsForFacilityAsync(tokenId, facility);
        }
        
        public string[] GetEpicsBootInfoFacilityList() {
            return base.Channel.GetEpicsBootInfoFacilityList();
        }
        
        public System.Threading.Tasks.Task<string[]> GetEpicsBootInfoFacilityListAsync() {
            return base.Channel.GetEpicsBootInfoFacilityListAsync();
        }
        
        public GWLogger.Inventory.SearchResult GetMaintenanceSheetList(string tokenId) {
            return base.Channel.GetMaintenanceSheetList(tokenId);
        }
        
        public System.Threading.Tasks.Task<GWLogger.Inventory.SearchResult> GetMaintenanceSheetListAsync(string tokenId) {
            return base.Channel.GetMaintenanceSheetListAsync(tokenId);
        }
        
        public GWLogger.Inventory.MaintenanceSheet GetMaintenanceSheet(int sheetId) {
            return base.Channel.GetMaintenanceSheet(sheetId);
        }
        
        public System.Threading.Tasks.Task<GWLogger.Inventory.MaintenanceSheet> GetMaintenanceSheetAsync(int sheetId) {
            return base.Channel.GetMaintenanceSheetAsync(sheetId);
        }
        
        public int AddMaintenanceSheet(string tokenId, GWLogger.Inventory.MaintenanceSheet sheet) {
            return base.Channel.AddMaintenanceSheet(tokenId, sheet);
        }
        
        public System.Threading.Tasks.Task<int> AddMaintenanceSheetAsync(string tokenId, GWLogger.Inventory.MaintenanceSheet sheet) {
            return base.Channel.AddMaintenanceSheetAsync(tokenId, sheet);
        }
        
        public void DeleteMaintenanceSheet(string tokenId, int sheetId) {
            base.Channel.DeleteMaintenanceSheet(tokenId, sheetId);
        }
        
        public System.Threading.Tasks.Task DeleteMaintenanceSheetAsync(string tokenId, int sheetId) {
            return base.Channel.DeleteMaintenanceSheetAsync(tokenId, sheetId);
        }
        
        public void UpdateMaintenanceSheet(string tokenId, GWLogger.Inventory.MaintenanceSheet sheet) {
            base.Channel.UpdateMaintenanceSheet(tokenId, sheet);
        }
        
        public System.Threading.Tasks.Task UpdateMaintenanceSheetAsync(string tokenId, GWLogger.Inventory.MaintenanceSheet sheet) {
            return base.Channel.UpdateMaintenanceSheetAsync(tokenId, sheet);
        }
        
        public GWLogger.Inventory.SearchResult GetMaintenancePartList(int sheetId) {
            return base.Channel.GetMaintenancePartList(sheetId);
        }
        
        public System.Threading.Tasks.Task<GWLogger.Inventory.SearchResult> GetMaintenancePartListAsync(int sheetId) {
            return base.Channel.GetMaintenancePartListAsync(sheetId);
        }
        
        public GWLogger.Inventory.MaintenancePart GetMaintenancePart(int sheetId, string psiLabel) {
            return base.Channel.GetMaintenancePart(sheetId, psiLabel);
        }
        
        public System.Threading.Tasks.Task<GWLogger.Inventory.MaintenancePart> GetMaintenancePartAsync(int sheetId, string psiLabel) {
            return base.Channel.GetMaintenancePartAsync(sheetId, psiLabel);
        }
        
        public void AddMaintenancePart(string tokenId, GWLogger.Inventory.MaintenancePart maintenancePart) {
            base.Channel.AddMaintenancePart(tokenId, maintenancePart);
        }
        
        public System.Threading.Tasks.Task AddMaintenancePartAsync(string tokenId, GWLogger.Inventory.MaintenancePart maintenancePart) {
            return base.Channel.AddMaintenancePartAsync(tokenId, maintenancePart);
        }
        
        public void UpdateMaintenancePart(string tokenId, GWLogger.Inventory.MaintenancePart maintenancePart) {
            base.Channel.UpdateMaintenancePart(tokenId, maintenancePart);
        }
        
        public System.Threading.Tasks.Task UpdateMaintenancePartAsync(string tokenId, GWLogger.Inventory.MaintenancePart maintenancePart) {
            return base.Channel.UpdateMaintenancePartAsync(tokenId, maintenancePart);
        }
        
        public void DeleteMaintenancePart(string tokenId, int sheetId, string psiLabel) {
            base.Channel.DeleteMaintenancePart(tokenId, sheetId, psiLabel);
        }
        
        public System.Threading.Tasks.Task DeleteMaintenancePartAsync(string tokenId, int sheetId, string psiLabel) {
            return base.Channel.DeleteMaintenancePartAsync(tokenId, sheetId, psiLabel);
        }
        
        public string GetWebIocHost() {
            return base.Channel.GetWebIocHost();
        }
        
        public System.Threading.Tasks.Task<string> GetWebIocHostAsync() {
            return base.Channel.GetWebIocHostAsync();
        }
        
        public string[] GetPortserverOfNetwork() {
            return base.Channel.GetPortserverOfNetwork();
        }
        
        public System.Threading.Tasks.Task<string[]> GetPortserverOfNetworkAsync() {
            return base.Channel.GetPortserverOfNetworkAsync();
        }
        
        public GWLogger.Inventory.PortserverIoc[] GetIocsOfPortserver(string portserver) {
            return base.Channel.GetIocsOfPortserver(portserver);
        }
        
        public System.Threading.Tasks.Task<GWLogger.Inventory.PortserverIoc[]> GetIocsOfPortserverAsync(string portserver) {
            return base.Channel.GetIocsOfPortserverAsync(portserver);
        }
        
        public GWLogger.Inventory.ConnectorMatrixInformation[] GetConnectorMatrixReport() {
            return base.Channel.GetConnectorMatrixReport();
        }
        
        public System.Threading.Tasks.Task<GWLogger.Inventory.ConnectorMatrixInformation[]> GetConnectorMatrixReportAsync() {
            return base.Channel.GetConnectorMatrixReportAsync();
        }
        
        public GWLogger.Inventory.TableInformation[] GetDatabaseList() {
            return base.Channel.GetDatabaseList();
        }
        
        public System.Threading.Tasks.Task<GWLogger.Inventory.TableInformation[]> GetDatabaseListAsync() {
            return base.Channel.GetDatabaseListAsync();
        }
        
        public GWLogger.Inventory.TableDetails GetTableFields(string tableName) {
            return base.Channel.GetTableFields(tableName);
        }
        
        public System.Threading.Tasks.Task<GWLogger.Inventory.TableDetails> GetTableFieldsAsync(string tableName) {
            return base.Channel.GetTableFieldsAsync(tableName);
        }
        
        public GWLogger.Inventory.SearchResult ExecutePublicQuery(string query) {
            return base.Channel.ExecutePublicQuery(query);
        }
        
        public System.Threading.Tasks.Task<GWLogger.Inventory.SearchResult> ExecutePublicQueryAsync(string query) {
            return base.Channel.ExecutePublicQueryAsync(query);
        }
        
        public GWLogger.Inventory.SearchResult GetDisturbanceList(string search) {
            return base.Channel.GetDisturbanceList(search);
        }
        
        public System.Threading.Tasks.Task<GWLogger.Inventory.SearchResult> GetDisturbanceListAsync(string search) {
            return base.Channel.GetDisturbanceListAsync(search);
        }
        
        public GWLogger.Inventory.SearchResult GetPartDisturbances(string psiLabel) {
            return base.Channel.GetPartDisturbances(psiLabel);
        }
        
        public System.Threading.Tasks.Task<GWLogger.Inventory.SearchResult> GetPartDisturbancesAsync(string psiLabel) {
            return base.Channel.GetPartDisturbancesAsync(psiLabel);
        }
        
        public GWLogger.Inventory.PartDisturbance GetPartDisturbance(int disturbanceId) {
            return base.Channel.GetPartDisturbance(disturbanceId);
        }
        
        public System.Threading.Tasks.Task<GWLogger.Inventory.PartDisturbance> GetPartDisturbanceAsync(int disturbanceId) {
            return base.Channel.GetPartDisturbanceAsync(disturbanceId);
        }
    }
}
