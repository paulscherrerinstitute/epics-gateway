//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace GatewayLogic.GWLoggerSoap {
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(Namespace="http://gwlogger.psi.ch/", ConfigurationName="GWLoggerSoap.DataAccessSoap")]
    public interface DataAccessSoap {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://gwlogger.psi.ch/GetGatewaysList", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        string[] GetGatewaysList();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://gwlogger.psi.ch/GetGatewaysList", ReplyAction="*")]
        System.Threading.Tasks.Task<string[]> GetGatewaysListAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://gwlogger.psi.ch/GetGatewaySessionsList", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        GatewayLogic.GWLoggerSoap.GatewaySession[] GetGatewaySessionsList(string gatewayName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://gwlogger.psi.ch/GetGatewaySessionsList", ReplyAction="*")]
        System.Threading.Tasks.Task<GatewayLogic.GWLoggerSoap.GatewaySession[]> GetGatewaySessionsListAsync(string gatewayName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://gwlogger.psi.ch/GetSearchedChannels", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        GatewayLogic.GWLoggerSoap.SearchRequest[] GetSearchedChannels(string gatewayName, System.DateTime datePoint);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://gwlogger.psi.ch/GetSearchedChannels", ReplyAction="*")]
        System.Threading.Tasks.Task<GatewayLogic.GWLoggerSoap.SearchRequest[]> GetSearchedChannelsAsync(string gatewayName, System.DateTime datePoint);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://gwlogger.psi.ch/RegisterLogMessageType", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        void RegisterLogMessageType(GatewayLogic.GWLoggerSoap.MessageType[] types);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://gwlogger.psi.ch/RegisterLogMessageType", ReplyAction="*")]
        System.Threading.Tasks.Task RegisterLogMessageTypeAsync(GatewayLogic.GWLoggerSoap.MessageType[] types);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://gwlogger.psi.ch/RegisterLogMessageDetailType", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        void RegisterLogMessageDetailType(GatewayLogic.GWLoggerSoap.IdValue[] types);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://gwlogger.psi.ch/RegisterLogMessageDetailType", ReplyAction="*")]
        System.Threading.Tasks.Task RegisterLogMessageDetailTypeAsync(GatewayLogic.GWLoggerSoap.IdValue[] types);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://gwlogger.psi.ch/LogEntries", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        void LogEntries([System.ServiceModel.MessageParameterAttribute(Name="logEntries")] GatewayLogic.GWLoggerSoap.LogEntry[] logEntries1);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://gwlogger.psi.ch/LogEntries", ReplyAction="*")]
        System.Threading.Tasks.Task LogEntriesAsync(GatewayLogic.GWLoggerSoap.LogEntry[] logEntries);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://gwlogger.psi.ch/LogEntry", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        void LogEntry(string gateway, string remoteIpPoint, int messageType, GatewayLogic.GWLoggerSoap.LogEntryDetail[] details);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://gwlogger.psi.ch/LogEntry", ReplyAction="*")]
        System.Threading.Tasks.Task LogEntryAsync(string gateway, string remoteIpPoint, int messageType, GatewayLogic.GWLoggerSoap.LogEntryDetail[] details);
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.2612.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://gwlogger.psi.ch/")]
    public partial class GatewaySession : object, System.ComponentModel.INotifyPropertyChanged {
        
        private System.DateTime endDateField;
        
        private System.DateTime startDateField;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=0)]
        public System.DateTime EndDate {
            get {
                return this.endDateField;
            }
            set {
                this.endDateField = value;
                this.RaisePropertyChanged("EndDate");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=1)]
        public System.DateTime StartDate {
            get {
                return this.startDateField;
            }
            set {
                this.startDateField = value;
                this.RaisePropertyChanged("StartDate");
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.2612.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://gwlogger.psi.ch/")]
    public partial class LogEntryDetail : object, System.ComponentModel.INotifyPropertyChanged {
        
        private int typeIdField;
        
        private string valueField;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=0)]
        public int TypeId {
            get {
                return this.typeIdField;
            }
            set {
                this.typeIdField = value;
                this.RaisePropertyChanged("TypeId");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=1)]
        public string Value {
            get {
                return this.valueField;
            }
            set {
                this.valueField = value;
                this.RaisePropertyChanged("Value");
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.2612.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://gwlogger.psi.ch/")]
    public partial class LogEntry : object, System.ComponentModel.INotifyPropertyChanged {
        
        private string gatewayField;
        
        private string remoteIpPointField;
        
        private int messageTypeField;
        
        private LogEntryDetail[] detailsField;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=0)]
        public string Gateway {
            get {
                return this.gatewayField;
            }
            set {
                this.gatewayField = value;
                this.RaisePropertyChanged("Gateway");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=1)]
        public string RemoteIpPoint {
            get {
                return this.remoteIpPointField;
            }
            set {
                this.remoteIpPointField = value;
                this.RaisePropertyChanged("RemoteIpPoint");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=2)]
        public int MessageType {
            get {
                return this.messageTypeField;
            }
            set {
                this.messageTypeField = value;
                this.RaisePropertyChanged("MessageType");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlArrayAttribute(Order=3)]
        public LogEntryDetail[] Details {
            get {
                return this.detailsField;
            }
            set {
                this.detailsField = value;
                this.RaisePropertyChanged("Details");
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.2612.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://gwlogger.psi.ch/")]
    public partial class IdValue : object, System.ComponentModel.INotifyPropertyChanged {
        
        private int idField;
        
        private string valueField;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=0)]
        public int Id {
            get {
                return this.idField;
            }
            set {
                this.idField = value;
                this.RaisePropertyChanged("Id");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=1)]
        public string Value {
            get {
                return this.valueField;
            }
            set {
                this.valueField = value;
                this.RaisePropertyChanged("Value");
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.2612.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://gwlogger.psi.ch/")]
    public partial class MessageType : object, System.ComponentModel.INotifyPropertyChanged {
        
        private int idField;
        
        private string nameField;
        
        private string displayMaskField;
        
        private int logLevelField;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=0)]
        public int Id {
            get {
                return this.idField;
            }
            set {
                this.idField = value;
                this.RaisePropertyChanged("Id");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=1)]
        public string Name {
            get {
                return this.nameField;
            }
            set {
                this.nameField = value;
                this.RaisePropertyChanged("Name");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=2)]
        public string DisplayMask {
            get {
                return this.displayMaskField;
            }
            set {
                this.displayMaskField = value;
                this.RaisePropertyChanged("DisplayMask");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=3)]
        public int LogLevel {
            get {
                return this.logLevelField;
            }
            set {
                this.logLevelField = value;
                this.RaisePropertyChanged("LogLevel");
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.2612.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://gwlogger.psi.ch/")]
    public partial class SearchRequest : object, System.ComponentModel.INotifyPropertyChanged {
        
        private string channelField;
        
        private System.DateTime dateField;
        
        private string clientField;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=0)]
        public string Channel {
            get {
                return this.channelField;
            }
            set {
                this.channelField = value;
                this.RaisePropertyChanged("Channel");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=1)]
        public System.DateTime Date {
            get {
                return this.dateField;
            }
            set {
                this.dateField = value;
                this.RaisePropertyChanged("Date");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=2)]
        public string Client {
            get {
                return this.clientField;
            }
            set {
                this.clientField = value;
                this.RaisePropertyChanged("Client");
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface DataAccessSoapChannel : GatewayLogic.GWLoggerSoap.DataAccessSoap, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class DataAccessSoapClient : System.ServiceModel.ClientBase<GatewayLogic.GWLoggerSoap.DataAccessSoap>, GatewayLogic.GWLoggerSoap.DataAccessSoap {
        
        public DataAccessSoapClient() {
        }
        
        public DataAccessSoapClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public DataAccessSoapClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public DataAccessSoapClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public DataAccessSoapClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public string[] GetGatewaysList() {
            return base.Channel.GetGatewaysList();
        }
        
        public System.Threading.Tasks.Task<string[]> GetGatewaysListAsync() {
            return base.Channel.GetGatewaysListAsync();
        }
        
        public GatewayLogic.GWLoggerSoap.GatewaySession[] GetGatewaySessionsList(string gatewayName) {
            return base.Channel.GetGatewaySessionsList(gatewayName);
        }
        
        public System.Threading.Tasks.Task<GatewayLogic.GWLoggerSoap.GatewaySession[]> GetGatewaySessionsListAsync(string gatewayName) {
            return base.Channel.GetGatewaySessionsListAsync(gatewayName);
        }
        
        public GatewayLogic.GWLoggerSoap.SearchRequest[] GetSearchedChannels(string gatewayName, System.DateTime datePoint) {
            return base.Channel.GetSearchedChannels(gatewayName, datePoint);
        }
        
        public System.Threading.Tasks.Task<GatewayLogic.GWLoggerSoap.SearchRequest[]> GetSearchedChannelsAsync(string gatewayName, System.DateTime datePoint) {
            return base.Channel.GetSearchedChannelsAsync(gatewayName, datePoint);
        }
        
        public void RegisterLogMessageType(GatewayLogic.GWLoggerSoap.MessageType[] types) {
            base.Channel.RegisterLogMessageType(types);
        }
        
        public System.Threading.Tasks.Task RegisterLogMessageTypeAsync(GatewayLogic.GWLoggerSoap.MessageType[] types) {
            return base.Channel.RegisterLogMessageTypeAsync(types);
        }
        
        public void RegisterLogMessageDetailType(GatewayLogic.GWLoggerSoap.IdValue[] types) {
            base.Channel.RegisterLogMessageDetailType(types);
        }
        
        public System.Threading.Tasks.Task RegisterLogMessageDetailTypeAsync(GatewayLogic.GWLoggerSoap.IdValue[] types) {
            return base.Channel.RegisterLogMessageDetailTypeAsync(types);
        }
        
        public void LogEntries(GatewayLogic.GWLoggerSoap.LogEntry[] logEntries1) {
            base.Channel.LogEntries(logEntries1);
        }
        
        public System.Threading.Tasks.Task LogEntriesAsync(GatewayLogic.GWLoggerSoap.LogEntry[] logEntries) {
            return base.Channel.LogEntriesAsync(logEntries);
        }
        
        public void LogEntry(string gateway, string remoteIpPoint, int messageType, GatewayLogic.GWLoggerSoap.LogEntryDetail[] details) {
            base.Channel.LogEntry(gateway, remoteIpPoint, messageType, details);
        }
        
        public System.Threading.Tasks.Task LogEntryAsync(string gateway, string remoteIpPoint, int messageType, GatewayLogic.GWLoggerSoap.LogEntryDetail[] details) {
            return base.Channel.LogEntryAsync(gateway, remoteIpPoint, messageType, details);
        }
    }
}
